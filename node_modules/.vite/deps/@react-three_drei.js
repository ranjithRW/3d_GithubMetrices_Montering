import {
  require_client
} from "./chunk-N36D6ERX.js";
import {
  animated,
  useSpring
} from "./chunk-RWVLZY7K.js";
import {
  ArcballControls,
  DRACOLoader,
  DeviceOrientationControls,
  EffectComposer,
  FBXLoader,
  FirstPersonControls,
  Flow,
  FlyControls,
  FontLoader,
  GLTFLoader,
  GammaCorrectionShader,
  HorizontalBlurShader,
  KTX2Loader,
  Line2,
  LineGeometry,
  LineMaterial,
  LineSegmentsGeometry,
  MapControls,
  MeshSurfaceSampler,
  MeshoptDecoder,
  OrbitControls,
  PointerLockControls,
  RGBELoader,
  RenderPass,
  SelectionBox,
  ShaderPass,
  SimplexNoise,
  Sky,
  TextGeometry,
  TrackballControls,
  TransformControls,
  VerticalBlurShader,
  react_merge_refs_esm_default
} from "./chunk-Z5KST32V.js";
import {
  _extends,
  addAfterEffect,
  addEffect,
  applyProps,
  context,
  create,
  createPortal,
  extend,
  init_dist,
  init_esm,
  init_extends,
  init_react_three_fiber_esm,
  suspend,
  useFrame,
  useLoader,
  useThree
} from "./chunk-HENFT3N6.js";
import {
  require_react
} from "./chunk-CW3Q3AZN.js";
import {
  AdditiveBlending,
  AlwaysStencilFunc,
  AnimationMixer,
  AudioListener,
  AudioLoader,
  BackSide,
  Box3,
  BufferAttribute,
  BufferGeometry,
  Camera,
  CanvasTexture,
  Color,
  CubeCamera,
  CubeReflectionMapping,
  CubeTextureLoader,
  CubicBezierCurve3,
  CylinderGeometry,
  DefaultLoadingManager,
  DepthFormat,
  DepthTexture,
  DoubleSide,
  DynamicDrawUsage,
  EdgesGeometry,
  EqualStencilFunc,
  EquirectangularReflectionMapping,
  Float32BufferAttribute,
  FrontSide,
  Group,
  HalfFloatType,
  InstancedBufferAttribute,
  InstancedBufferGeometry,
  KeepStencilOp,
  Line3,
  LineSegments,
  LinearFilter,
  MathUtils,
  Matrix3,
  Matrix4,
  Mesh,
  MeshBasicMaterial,
  MeshDepthMaterial,
  MeshDistanceMaterial,
  MeshPhysicalMaterial,
  MeshStandardMaterial,
  NoBlending,
  NotEqualStencilFunc,
  Object3D,
  OrthographicCamera,
  PerspectiveCamera,
  Plane,
  PlaneGeometry,
  PointsMaterial,
  QuadraticBezierCurve3,
  Quaternion,
  RGBADepthPacking,
  RGBAFormat,
  Ray,
  Raycaster,
  RepeatWrapping,
  ReplaceStencilOp,
  Scene,
  ShaderChunk,
  ShaderMaterial,
  Shape,
  Sphere,
  Spherical,
  Texture,
  TextureLoader,
  Triangle,
  Uniform,
  UniformsLib,
  UniformsUtils,
  UnsignedShortType,
  Vector2,
  Vector3,
  Vector4,
  WebGLCubeRenderTarget,
  WebGLRenderTarget,
  init_three_module
} from "./chunk-PJLJJBSA.js";
import {
  __commonJS,
  __objRest,
  __spreadProps,
  __spreadValues,
  __toESM
} from "./chunk-IGMYUX52.js";

// node_modules/lodash.pick/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.pick/index.js"(exports, module) {
    var INFINITY = 1 / 0;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var symbolTag = "[object Symbol]";
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function arrayMap(array, iteratee) {
      var index = -1, length = array ? array.length : 0, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var Symbol2 = root.Symbol;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
    var nativeMax = Math.max;
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1, length = array.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);
      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }
    function basePick(object, props) {
      object = Object(object);
      return basePickBy(object, props, function(value, key) {
        return key in object;
      });
    }
    function basePickBy(object, props, predicate) {
      var index = -1, length = props.length, result = {};
      while (++index < length) {
        var key = props[index], value = object[key];
        if (predicate(value, key)) {
          result[key] = value;
        }
      }
      return result;
    }
    function baseRest(func, start) {
      start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = array;
        return apply(func, this, otherArgs);
      };
    }
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function isFunction(value) {
      var tag = isObject(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    var pick3 = baseRest(function(object, props) {
      return object == null ? {} : basePick(object, arrayMap(baseFlatten(props, 1), toKey));
    });
    module.exports = pick3;
  }
});

// node_modules/lodash.omit/index.js
var require_lodash2 = __commonJS({
  "node_modules/lodash.omit/index.js"(exports, module) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var INFINITY = 1 / 0;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var symbolTag = "[object Symbol]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function arrayIncludes(array, value) {
      var length = array ? array.length : 0;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }
    function arrayIncludesWith(array, value, comparator) {
      var index = -1, length = array ? array.length : 0;
      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }
      return false;
    }
    function arrayMap(array, iteratee) {
      var index = -1, length = array ? array.length : 0, result = Array(length);
      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }
    function arrayPush(array, values) {
      var index = -1, length = values.length, offset = array.length;
      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index-- : ++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }
    function baseIndexOf(array, value, fromIndex) {
      if (value !== value) {
        return baseFindIndex(array, baseIsNaN, fromIndex);
      }
      var index = fromIndex - 1, length = array.length;
      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }
    function baseIsNaN(value) {
      return value !== value;
    }
    function baseTimes(n2, iteratee) {
      var index = -1, result = Array(n2);
      while (++index < n2) {
        result[index] = iteratee(index);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    function isHostObject(value) {
      var result = false;
      if (value != null && typeof value.toString != "function") {
        try {
          result = !!(value + "");
        } catch (e3) {
        }
      }
      return result;
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectToString = objectProto.toString;
    var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
    var Symbol2 = root.Symbol;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : void 0;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var nativeMax = Math.max;
    var Map2 = getNative(root, "Map");
    var nativeCreate = getNative(Object, "create");
    function Hash(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function listCacheClear() {
      this.__data__ = [];
    }
    function listCacheDelete(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      return true;
    }
    function listCacheGet(key) {
      var data = this.__data__, index = assocIndexOf(data, key);
      return index < 0 ? void 0 : data[index][1];
    }
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    function listCacheSet(key, value) {
      var data = this.__data__, index = assocIndexOf(data, key);
      if (index < 0) {
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index = -1, length = entries ? entries.length : 0;
      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }
    function mapCacheClear() {
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    function mapCacheDelete(key) {
      return getMapData(this, key)["delete"](key);
    }
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function SetCache(values) {
      var index = -1, length = values ? values.length : 0;
      this.__data__ = new MapCache();
      while (++index < length) {
        this.add(values[index]);
      }
    }
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    function arrayLikeKeys(value, inherited) {
      var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
      var length = result.length, skipIndexes = !!length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == "length" || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values.length;
      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      } else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
        while (++index < length) {
          var value = array[index], computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;
            while (valuesIndex--) {
              if (values[valuesIndex] === computed) {
                continue outer;
              }
            }
            result.push(value);
          } else if (!includes(values, computed, comparator)) {
            result.push(value);
          }
        }
      return result;
    }
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1, length = array.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);
      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    function basePick(object, props) {
      object = Object(object);
      return basePickBy(object, props, function(value, key) {
        return key in object;
      });
    }
    function basePickBy(object, props, predicate) {
      var index = -1, length = props.length, result = {};
      while (++index < length) {
        var key = props[index], value = object[key];
        if (predicate(value, key)) {
          result[key] = value;
        }
      }
      return result;
    }
    function baseRest(func, start) {
      start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = array;
        return apply(func, this, otherArgs);
      };
    }
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    var getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e3) {
        }
        try {
          return func + "";
        } catch (e3) {
        }
      }
      return "";
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    function isArguments(value) {
      return isArrayLikeObject(value) && hasOwnProperty.call(value, "callee") && (!propertyIsEnumerable.call(value, "callee") || objectToString.call(value) == argsTag);
    }
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    function isFunction(value) {
      var tag = isObject(value) ? objectToString.call(value) : "";
      return tag == funcTag || tag == genTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject(value) {
      var type = typeof value;
      return !!value && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return !!value && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
    }
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    var omit2 = baseRest(function(object, props) {
      if (object == null) {
        return {};
      }
      props = arrayMap(baseFlatten(props, 1), toKey);
      return basePick(object, baseDifference(getAllKeysIn(object), props));
    });
    function stubArray() {
      return [];
    }
    module.exports = omit2;
  }
});

// node_modules/stats.js/build/stats.min.js
var require_stats_min = __commonJS({
  "node_modules/stats.js/build/stats.min.js"(exports, module) {
    (function(f2, e3) {
      typeof exports === "object" && typeof module !== "undefined" ? module.exports = e3() : typeof define === "function" && define.amd ? define(e3) : f2.Stats = e3();
    })(exports, function() {
      var f2 = function() {
        function e3(a3) {
          c2.appendChild(a3.dom);
          return a3;
        }
        function u(a3) {
          for (var d2 = 0; d2 < c2.children.length; d2++)
            c2.children[d2].style.display = d2 === a3 ? "block" : "none";
          l2 = a3;
        }
        var l2 = 0, c2 = document.createElement("div");
        c2.style.cssText = "position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000";
        c2.addEventListener("click", function(a3) {
          a3.preventDefault();
          u(++l2 % c2.children.length);
        }, false);
        var k = (performance || Date).now(), g = k, a2 = 0, r3 = e3(new f2.Panel("FPS", "#0ff", "#002")), h = e3(new f2.Panel("MS", "#0f0", "#020"));
        if (self.performance && self.performance.memory)
          var t2 = e3(new f2.Panel("MB", "#f08", "#201"));
        u(0);
        return { REVISION: 16, dom: c2, addPanel: e3, showPanel: u, begin: function() {
          k = (performance || Date).now();
        }, end: function() {
          a2++;
          var c3 = (performance || Date).now();
          h.update(c3 - k, 200);
          if (c3 > g + 1e3 && (r3.update(1e3 * a2 / (c3 - g), 100), g = c3, a2 = 0, t2)) {
            var d2 = performance.memory;
            t2.update(d2.usedJSHeapSize / 1048576, d2.jsHeapSizeLimit / 1048576);
          }
          return c3;
        }, update: function() {
          k = this.end();
        }, domElement: c2, setMode: u };
      };
      f2.Panel = function(e3, f3, l2) {
        var c2 = Infinity, k = 0, g = Math.round, a2 = g(window.devicePixelRatio || 1), r3 = 80 * a2, h = 48 * a2, t2 = 3 * a2, v4 = 2 * a2, d2 = 3 * a2, m = 15 * a2, n2 = 74 * a2, p = 30 * a2, q = document.createElement("canvas");
        q.width = r3;
        q.height = h;
        q.style.cssText = "width:80px;height:48px";
        var b = q.getContext("2d");
        b.font = "bold " + 9 * a2 + "px Helvetica,Arial,sans-serif";
        b.textBaseline = "top";
        b.fillStyle = l2;
        b.fillRect(0, 0, r3, h);
        b.fillStyle = f3;
        b.fillText(e3, t2, v4);
        b.fillRect(d2, m, n2, p);
        b.fillStyle = l2;
        b.globalAlpha = 0.9;
        b.fillRect(d2, m, n2, p);
        return { dom: q, update: function(h2, w) {
          c2 = Math.min(c2, h2);
          k = Math.max(k, h2);
          b.fillStyle = l2;
          b.globalAlpha = 1;
          b.fillRect(0, 0, r3, m);
          b.fillStyle = f3;
          b.fillText(g(h2) + " " + e3 + " (" + g(c2) + "-" + g(k) + ")", t2, v4);
          b.drawImage(q, d2 + a2, m, n2 - a2, p, d2, m, n2 - a2, p);
          b.fillRect(d2 + n2 - a2, m, a2, p);
          b.fillStyle = l2;
          b.globalAlpha = 0.9;
          b.fillRect(d2 + n2 - a2, m, a2, g((1 - h2 / w) * p));
        } };
      };
      return f2;
    });
  }
});

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment7 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment7;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i5 = 0; i5 < 10; i5++) {
          test2["_" + String.fromCharCode(i5)] = i5;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
          return test2[n2];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target2, source) {
      var from;
      var to = toObject(target2);
      var symbols;
      for (var s3 = 1; s3 < arguments.length; s3++) {
        from = Object(arguments[s3]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i5 = 0; i5 < symbols.length; i5++) {
            if (propIsEnumerable.call(from, symbols[i5])) {
              to[symbols[i5]] = from[symbols[i5]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning((componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning("Failed " + location + " type: " + error.message + (stack != null ? stack : ""));
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign3 = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement2, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y) {
        if (x === y) {
          return x !== 0 || 1 / x === 1 / y;
        } else {
          return x !== x && y !== y;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."), { expectedType });
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i5 = 0; i5 < propValue.length; i5++) {
            var error = typeChecker(propValue, i5, componentName, location, propFullName + "[" + i5 + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement2(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i5 = 0; i5 < expectedValues.length; i5++) {
            if (is(propValue, expectedValues[i5])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i5 = 0; i5 < arrayOfTypeCheckers.length; i5++) {
          var checker = arrayOfTypeCheckers[i5];
          if (typeof checker !== "function") {
            printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i5 + ".");
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i6 = 0; i6 < arrayOfTypeCheckers.length; i6++) {
            var checker2 = arrayOfTypeCheckers[i6];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError((componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`.");
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign3({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement2(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/@react-three/drei/web/Html.js
init_extends();
var React = __toESM(require_react());
var ReactDOM = __toESM(require_client());
init_three_module();
init_react_three_fiber_esm();
var v1 = new Vector3();
var v2 = new Vector3();
var v3 = new Vector3();
function defaultCalculatePosition(el, camera, size) {
  const objectPos = v1.setFromMatrixPosition(el.matrixWorld);
  objectPos.project(camera);
  const widthHalf = size.width / 2;
  const heightHalf = size.height / 2;
  return [objectPos.x * widthHalf + widthHalf, -(objectPos.y * heightHalf) + heightHalf];
}
function isObjectBehindCamera(el, camera) {
  const objectPos = v1.setFromMatrixPosition(el.matrixWorld);
  const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);
  const deltaCamObj = objectPos.sub(cameraPos);
  const camDir = camera.getWorldDirection(v3);
  return deltaCamObj.angleTo(camDir) > Math.PI / 2;
}
function isObjectVisible(el, camera, raycaster, occlude) {
  const elPos = v1.setFromMatrixPosition(el.matrixWorld);
  const screenPos = elPos.clone();
  screenPos.project(camera);
  raycaster.setFromCamera(screenPos, camera);
  const intersects = raycaster.intersectObjects(occlude, true);
  if (intersects.length) {
    const intersectionDistance = intersects[0].distance;
    const pointDistance = elPos.distanceTo(raycaster.ray.origin);
    return pointDistance < intersectionDistance;
  }
  return true;
}
function objectScale(el, camera) {
  if (camera instanceof OrthographicCamera) {
    return camera.zoom;
  } else if (camera instanceof PerspectiveCamera) {
    const objectPos = v1.setFromMatrixPosition(el.matrixWorld);
    const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);
    const vFOV = camera.fov * Math.PI / 180;
    const dist = objectPos.distanceTo(cameraPos);
    const scaleFOV = 2 * Math.tan(vFOV / 2) * dist;
    return 1 / scaleFOV;
  } else {
    return 1;
  }
}
function objectZIndex(el, camera, zIndexRange) {
  if (camera instanceof PerspectiveCamera || camera instanceof OrthographicCamera) {
    const objectPos = v1.setFromMatrixPosition(el.matrixWorld);
    const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);
    const dist = objectPos.distanceTo(cameraPos);
    const A = (zIndexRange[1] - zIndexRange[0]) / (camera.far - camera.near);
    const B = zIndexRange[1] - A * camera.far;
    return Math.round(A * dist + B);
  }
  return void 0;
}
var epsilon = (value) => Math.abs(value) < 1e-10 ? 0 : value;
function getCSSMatrix(matrix2, multipliers, prepend = "") {
  let matrix3d = "matrix3d(";
  for (let i5 = 0; i5 !== 16; i5++) {
    matrix3d += epsilon(multipliers[i5] * matrix2.elements[i5]) + (i5 !== 15 ? "," : ")");
  }
  return prepend + matrix3d;
}
var getCameraCSSMatrix = ((multipliers) => {
  return (matrix2) => getCSSMatrix(matrix2, multipliers);
})([1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1, 1, -1, 1, 1]);
var getObjectCSSMatrix = ((scaleMultipliers) => {
  return (matrix2, factor) => getCSSMatrix(matrix2, scaleMultipliers(factor), "translate(-50%,-50%)");
})((f2) => [1 / f2, 1 / f2, 1 / f2, 1, -1 / f2, -1 / f2, -1 / f2, -1, 1 / f2, 1 / f2, 1 / f2, 1, 1, 1, 1, 1]);
var Html = React.forwardRef((_a, ref) => {
  var _b = _a, {
    children,
    eps: eps2 = 1e-3,
    style,
    className,
    prepend,
    center,
    fullscreen,
    portal,
    distanceFactor,
    sprite = false,
    transform = false,
    occlude,
    onOcclude,
    zIndexRange = [16777271, 0],
    calculatePosition = defaultCalculatePosition,
    as = "div",
    wrapperClass,
    pointerEvents = "auto"
  } = _b, props = __objRest(_b, [
    "children",
    "eps",
    "style",
    "className",
    "prepend",
    "center",
    "fullscreen",
    "portal",
    "distanceFactor",
    "sprite",
    "transform",
    "occlude",
    "onOcclude",
    "zIndexRange",
    "calculatePosition",
    "as",
    "wrapperClass",
    "pointerEvents"
  ]);
  var _portal$current;
  const gl = useThree(({
    gl: gl2
  }) => gl2);
  const camera = useThree(({
    camera: camera2
  }) => camera2);
  const scene = useThree(({
    scene: scene2
  }) => scene2);
  const size = useThree(({
    size: size2
  }) => size2);
  const raycaster = useThree(({
    raycaster: raycaster2
  }) => raycaster2);
  const [el] = React.useState(() => document.createElement(as));
  const root = React.useMemo(() => ReactDOM.createRoot(el), [el]);
  const group = React.useRef(null);
  const oldZoom = React.useRef(0);
  const oldPosition = React.useRef([0, 0]);
  const transformOuterRef = React.useRef(null);
  const transformInnerRef = React.useRef(null);
  const target2 = (_portal$current = portal == null ? void 0 : portal.current) !== null && _portal$current !== void 0 ? _portal$current : gl.domElement.parentNode;
  React.useEffect(() => {
    if (group.current) {
      scene.updateMatrixWorld();
      if (transform) {
        el.style.cssText = `position:absolute;top:0;left:0;pointer-events:none;overflow:hidden;`;
      } else {
        const vec2 = calculatePosition(group.current, camera, size);
        el.style.cssText = `position:absolute;top:0;left:0;transform:translate3d(${vec2[0]}px,${vec2[1]}px,0);transform-origin:0 0;`;
      }
      if (target2) {
        if (prepend)
          target2.prepend(el);
        else
          target2.appendChild(el);
      }
      return () => {
        if (target2)
          target2.removeChild(el);
        root.unmount();
      };
    }
  }, [target2, transform]);
  React.useLayoutEffect(() => {
    if (wrapperClass)
      el.className = wrapperClass;
  }, [wrapperClass]);
  const styles2 = React.useMemo(() => {
    if (transform) {
      return {
        position: "absolute",
        top: 0,
        left: 0,
        width: size.width,
        height: size.height,
        transformStyle: "preserve-3d",
        pointerEvents: "none"
      };
    } else {
      return __spreadValues(__spreadValues({
        position: "absolute",
        transform: center ? "translate3d(-50%,-50%,0)" : "none"
      }, fullscreen && {
        top: -size.height / 2,
        left: -size.width / 2,
        width: size.width,
        height: size.height
      }), style);
    }
  }, [style, center, fullscreen, size, transform]);
  const transformInnerStyles = React.useMemo(() => ({
    position: "absolute",
    pointerEvents
  }), [pointerEvents]);
  React.useLayoutEffect(() => {
    if (transform) {
      root.render(React.createElement("div", {
        ref: transformOuterRef,
        style: styles2
      }, React.createElement("div", {
        ref: transformInnerRef,
        style: transformInnerStyles
      }, React.createElement("div", {
        ref,
        className,
        style,
        children
      }))));
    } else {
      root.render(React.createElement("div", {
        ref,
        style: styles2,
        className,
        children
      }));
    }
  });
  const visible = React.useRef(true);
  useFrame(() => {
    if (group.current) {
      camera.updateMatrixWorld();
      group.current.updateWorldMatrix(true, false);
      const vec2 = transform ? oldPosition.current : calculatePosition(group.current, camera, size);
      if (transform || Math.abs(oldZoom.current - camera.zoom) > eps2 || Math.abs(oldPosition.current[0] - vec2[0]) > eps2 || Math.abs(oldPosition.current[1] - vec2[1]) > eps2) {
        const isBehindCamera = isObjectBehindCamera(group.current, camera);
        let raytraceTarget = false;
        if (typeof occlude === "boolean") {
          if (occlude === true) {
            raytraceTarget = [scene];
          }
        } else if (Array.isArray(occlude)) {
          raytraceTarget = occlude.map((item) => item.current);
        }
        const previouslyVisible = visible.current;
        if (raytraceTarget) {
          const isvisible = isObjectVisible(group.current, camera, raycaster, raytraceTarget);
          visible.current = isvisible && !isBehindCamera;
        } else {
          visible.current = !isBehindCamera;
        }
        if (previouslyVisible !== visible.current) {
          if (onOcclude)
            onOcclude(!visible.current);
          else
            el.style.display = visible.current ? "block" : "none";
        }
        el.style.zIndex = `${objectZIndex(group.current, camera, zIndexRange)}`;
        if (transform) {
          const [widthHalf, heightHalf] = [size.width / 2, size.height / 2];
          const fov = camera.projectionMatrix.elements[5] * heightHalf;
          const {
            isOrthographicCamera: isOrthographicCamera2,
            top,
            left,
            bottom,
            right
          } = camera;
          const cameraMatrix = getCameraCSSMatrix(camera.matrixWorldInverse);
          const cameraTransform = isOrthographicCamera2 ? `scale(${fov})translate(${epsilon(-(right + left) / 2)}px,${epsilon((top + bottom) / 2)}px)` : `translateZ(${fov}px)`;
          let matrix2 = group.current.matrixWorld;
          if (sprite) {
            matrix2 = camera.matrixWorldInverse.clone().transpose().copyPosition(matrix2).scale(group.current.scale);
            matrix2.elements[3] = matrix2.elements[7] = matrix2.elements[11] = 0;
            matrix2.elements[15] = 1;
          }
          el.style.width = size.width + "px";
          el.style.height = size.height + "px";
          el.style.perspective = isOrthographicCamera2 ? "" : `${fov}px`;
          if (transformOuterRef.current && transformInnerRef.current) {
            transformOuterRef.current.style.transform = `${cameraTransform}${cameraMatrix}translate(${widthHalf}px,${heightHalf}px)`;
            transformInnerRef.current.style.transform = getObjectCSSMatrix(matrix2, 1 / ((distanceFactor || 10) / 400));
          }
        } else {
          const scale2 = distanceFactor === void 0 ? 1 : objectScale(group.current, camera) * distanceFactor;
          el.style.transform = `translate3d(${vec2[0]}px,${vec2[1]}px,0) scale(${scale2})`;
        }
        oldPosition.current = vec2;
        oldZoom.current = camera.zoom;
      }
    }
  });
  return React.createElement("group", _extends({}, props, {
    ref: group
  }));
});

// node_modules/@react-three/drei/web/CycleRaycast.js
var React2 = __toESM(require_react());
init_react_three_fiber_esm();
function CycleRaycast({
  onChanged,
  portal,
  preventDefault = true,
  scroll = true,
  keyCode = 9
}) {
  const cycle = React2.useRef(0);
  const setEvents = useThree((state) => state.setEvents);
  const get = useThree((state) => state.get);
  const gl = useThree((state) => state.gl);
  React2.useEffect(() => {
    var _portal$current;
    let hits = [];
    let lastEvent = void 0;
    const prev = get().events.filter;
    const target2 = (_portal$current = portal == null ? void 0 : portal.current) !== null && _portal$current !== void 0 ? _portal$current : gl.domElement.parentNode;
    const renderStatus = () => target2 && onChanged && onChanged(hits, Math.round(cycle.current) % hits.length);
    setEvents({
      filter: (intersections, state) => {
        let clone = [...intersections];
        if (clone.length !== hits.length || !hits.every((hit) => clone.map((e3) => e3.object.uuid).includes(hit.object.uuid))) {
          cycle.current = 0;
          hits = clone;
          renderStatus();
        }
        if (prev)
          clone = prev(clone, state);
        for (let i5 = 0; i5 < Math.round(cycle.current) % clone.length; i5++) {
          const first = clone.shift();
          clone = [...clone, first];
        }
        return clone;
      }
    });
    const refresh = (fn) => {
      var _get$events$handlers, _get$events$handlers2;
      cycle.current = fn(cycle.current);
      (_get$events$handlers = get().events.handlers) == null ? void 0 : _get$events$handlers.onPointerCancel(void 0);
      (_get$events$handlers2 = get().events.handlers) == null ? void 0 : _get$events$handlers2.onPointerMove(lastEvent);
      renderStatus();
    };
    const tabEvent = (event) => {
      if (event.keyCode || event.which === keyCode) {
        if (preventDefault)
          event.preventDefault();
        if (hits.length > 1)
          refresh((current) => current + 1);
      }
    };
    const wheelEvent = (event) => {
      if (preventDefault)
        event.preventDefault();
      let delta = 0;
      if (!event)
        event = window.event;
      if (event.wheelDelta)
        delta = event.wheelDelta / 120;
      else if (event.detail)
        delta = -event.detail / 3;
      if (hits.length > 1)
        refresh((current) => Math.abs(current - delta));
    };
    const moveEvent = (event) => lastEvent = event;
    document.addEventListener("pointermove", moveEvent, {
      passive: true
    });
    if (scroll)
      document.addEventListener("wheel", wheelEvent);
    if (keyCode !== void 0)
      document.addEventListener("keydown", tabEvent);
    return () => {
      setEvents({
        filter: prev
      });
      if (keyCode !== void 0)
        document.removeEventListener("keydown", tabEvent);
      if (scroll)
        document.removeEventListener("wheel", wheelEvent);
      document.removeEventListener("pointermove", moveEvent);
    };
  }, [gl, get, setEvents, preventDefault, scroll, keyCode]);
  return null;
}

// node_modules/@react-three/drei/web/useCursor.js
var React3 = __toESM(require_react());
function useCursor(hovered, onPointerOver = "pointer", onPointerOut = "auto") {
  React3.useEffect(() => {
    if (hovered) {
      document.body.style.cursor = onPointerOver;
      return () => void (document.body.style.cursor = onPointerOut);
    }
  }, [hovered]);
}

// node_modules/@react-three/drei/web/Loader.js
var React4 = __toESM(require_react());

// node_modules/@react-three/drei/core/useProgress.js
init_three_module();
init_esm();
var saveLastTotalLoaded = 0;
var useProgress = create((set) => {
  DefaultLoadingManager.onStart = (item, loaded, total) => {
    set({
      active: true,
      item,
      loaded,
      total,
      progress: (loaded - saveLastTotalLoaded) / (total - saveLastTotalLoaded) * 100
    });
  };
  DefaultLoadingManager.onLoad = () => {
    set({
      active: false
    });
  };
  DefaultLoadingManager.onError = (item) => set((state) => ({
    errors: [...state.errors, item]
  }));
  DefaultLoadingManager.onProgress = (item, loaded, total) => {
    if (loaded === total) {
      saveLastTotalLoaded = total;
    }
    set({
      active: true,
      item,
      loaded,
      total,
      progress: (loaded - saveLastTotalLoaded) / (total - saveLastTotalLoaded) * 100 || 100
    });
  };
  return {
    errors: [],
    active: false,
    progress: 0,
    item: "",
    loaded: 0,
    total: 0
  };
});

// node_modules/@react-three/drei/web/Loader.js
var defaultDataInterpolation = (p) => `Loading ${p.toFixed(2)}%`;
function Loader({
  containerStyles,
  innerStyles,
  barStyles,
  dataStyles,
  dataInterpolation = defaultDataInterpolation,
  initialState = (active) => active
}) {
  const {
    active,
    progress
  } = useProgress();
  const progressRef = React4.useRef(0);
  const rafRef = React4.useRef(0);
  const progressSpanRef = React4.useRef(null);
  const [shown, setShown] = React4.useState(initialState(active));
  React4.useEffect(() => {
    let t2;
    if (active !== shown)
      t2 = setTimeout(() => setShown(active), 300);
    return () => clearTimeout(t2);
  }, [shown, active]);
  const updateProgress = React4.useCallback(() => {
    if (!progressSpanRef.current)
      return;
    progressRef.current += (progress - progressRef.current) / 2;
    if (progressRef.current > 0.95 * progress || progress === 100)
      progressRef.current = progress;
    progressSpanRef.current.innerText = dataInterpolation(progressRef.current);
    if (progressRef.current < progress)
      rafRef.current = requestAnimationFrame(updateProgress);
  }, [dataInterpolation, progress]);
  React4.useEffect(() => {
    updateProgress();
    return () => cancelAnimationFrame(rafRef.current);
  }, [updateProgress]);
  return shown ? React4.createElement("div", {
    style: __spreadValues(__spreadProps(__spreadValues({}, styles.container), {
      opacity: active ? 1 : 0
    }), containerStyles)
  }, React4.createElement("div", null, React4.createElement("div", {
    style: __spreadValues(__spreadValues({}, styles.inner), innerStyles)
  }, React4.createElement("div", {
    style: __spreadValues(__spreadProps(__spreadValues({}, styles.bar), {
      transform: `scaleX(${progress / 100})`
    }), barStyles)
  }), React4.createElement("span", {
    ref: progressSpanRef,
    style: __spreadValues(__spreadValues({}, styles.data), dataStyles)
  })))) : null;
}
var styles = {
  container: {
    position: "absolute",
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    background: "#171717",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    transition: "opacity 300ms ease",
    zIndex: 1e3
  },
  inner: {
    width: 100,
    height: 3,
    background: "#272727",
    textAlign: "center"
  },
  bar: {
    height: 3,
    width: "100%",
    background: "white",
    transition: "transform 200ms",
    transformOrigin: "left center"
  },
  data: {
    display: "inline-block",
    position: "relative",
    fontVariantNumeric: "tabular-nums",
    marginTop: "0.8em",
    color: "#f0f0f0",
    fontSize: "0.6em",
    fontFamily: `-apple-system, BlinkMacSystemFont, "Inter", "Segoe UI", "Helvetica Neue", Helvetica, Arial, Roboto, Ubuntu, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"`,
    whiteSpace: "nowrap"
  }
};

// node_modules/@react-three/drei/web/ScrollControls.js
init_extends();
init_three_module();
var React5 = __toESM(require_react());
var ReactDOM2 = __toESM(require_client());
init_react_three_fiber_esm();
var context2 = React5.createContext(null);
function useScroll() {
  return React5.useContext(context2);
}
function ScrollControls({
  eps: eps2 = 1e-5,
  enabled = true,
  infinite,
  horizontal,
  pages = 1,
  distance = 1,
  damping = 4,
  style = {},
  children
}) {
  const {
    get,
    setEvents,
    gl,
    size,
    invalidate,
    events
  } = useThree();
  const [el] = React5.useState(() => document.createElement("div"));
  const [fill] = React5.useState(() => document.createElement("div"));
  const [fixed] = React5.useState(() => document.createElement("div"));
  const target2 = gl.domElement.parentNode;
  const scroll = React5.useRef(0);
  const state = React5.useMemo(() => {
    const state2 = {
      el,
      eps: eps2,
      fill,
      fixed,
      horizontal,
      damping,
      offset: 0,
      delta: 0,
      scroll,
      pages,
      range(from, distance2, margin = 0) {
        const start = from - margin;
        const end = start + distance2 + margin * 2;
        return this.offset < start ? 0 : this.offset > end ? 1 : (this.offset - start) / (end - start);
      },
      curve(from, distance2, margin = 0) {
        return Math.sin(this.range(from, distance2, margin) * Math.PI);
      },
      visible(from, distance2, margin = 0) {
        const start = from - margin;
        const end = start + distance2 + margin * 2;
        return this.offset >= start && this.offset <= end;
      }
    };
    return state2;
  }, [eps2, damping, horizontal, pages]);
  React5.useEffect(() => {
    el.style.position = "absolute";
    el.style.width = "100%";
    el.style.height = "100%";
    el.style[horizontal ? "overflowX" : "overflowY"] = "auto";
    el.style[horizontal ? "overflowY" : "overflowX"] = "hidden";
    el.style.top = "0px";
    el.style.left = "0px";
    for (const key in style) {
      el.style[key] = style[key];
    }
    fixed.style.position = "sticky";
    fixed.style.top = "0px";
    fixed.style.left = "0px";
    fixed.style.width = "100%";
    fixed.style.height = "100%";
    fixed.style.overflow = "hidden";
    el.appendChild(fixed);
    fill.style.height = horizontal ? "100%" : `${pages * distance * 100}%`;
    fill.style.width = horizontal ? `${pages * distance * 100}%` : "100%";
    fill.style.pointerEvents = "none";
    el.appendChild(fill);
    target2.appendChild(el);
    el[horizontal ? "scrollLeft" : "scrollTop"] = 1;
    const oldTarget = events.connected || gl.domElement;
    requestAnimationFrame(() => events.connect == null ? void 0 : events.connect(el));
    const oldCompute = get().events.compute;
    setEvents({
      compute(event, state2) {
        const offsetX = event.clientX - target2.offsetLeft;
        const offsetY = event.clientY - target2.offsetTop;
        state2.pointer.set(offsetX / state2.size.width * 2 - 1, -(offsetY / state2.size.height) * 2 + 1);
        state2.raycaster.setFromCamera(state2.pointer, state2.camera);
      }
    });
    return () => {
      target2.removeChild(el);
      setEvents({
        compute: oldCompute
      });
      events.connect == null ? void 0 : events.connect(oldTarget);
    };
  }, [pages, distance, horizontal, el, fill, fixed, target2]);
  React5.useEffect(() => {
    if (events.connected === el) {
      const containerLength = size[horizontal ? "width" : "height"];
      const scrollLength = el[horizontal ? "scrollWidth" : "scrollHeight"];
      const scrollThreshold = scrollLength - containerLength;
      let current = 0;
      let disableScroll = true;
      let firstRun = true;
      const onScroll = () => {
        if (!enabled || firstRun)
          return;
        invalidate();
        current = el[horizontal ? "scrollLeft" : "scrollTop"];
        scroll.current = current / scrollThreshold;
        if (infinite) {
          if (!disableScroll) {
            if (current >= scrollThreshold) {
              const damp = 1 - state.offset;
              el[horizontal ? "scrollLeft" : "scrollTop"] = 1;
              scroll.current = state.offset = -damp;
              disableScroll = true;
            } else if (current <= 0) {
              const damp = 1 + state.offset;
              el[horizontal ? "scrollLeft" : "scrollTop"] = scrollLength;
              scroll.current = state.offset = damp;
              disableScroll = true;
            }
          }
          if (disableScroll)
            setTimeout(() => disableScroll = false, 40);
        }
      };
      el.addEventListener("scroll", onScroll, {
        passive: true
      });
      requestAnimationFrame(() => firstRun = false);
      const onWheel = (e3) => el.scrollLeft += e3.deltaY / 2;
      if (horizontal)
        el.addEventListener("wheel", onWheel, {
          passive: true
        });
      return () => {
        el.removeEventListener("scroll", onScroll);
        if (horizontal)
          el.removeEventListener("wheel", onWheel);
      };
    }
  }, [el, events, size, infinite, state, invalidate, horizontal, enabled]);
  let last = 0;
  useFrame((_, delta) => {
    state.offset = MathUtils.damp(last = state.offset, scroll.current, damping, delta);
    state.delta = MathUtils.damp(state.delta, Math.abs(last - state.offset), damping, delta);
    if (state.delta > eps2)
      invalidate();
  });
  return React5.createElement(context2.Provider, {
    value: state
  }, children);
}
var ScrollCanvas = React5.forwardRef(({
  children
}, ref) => {
  const group = React5.useRef(null);
  const state = useScroll();
  const {
    width,
    height
  } = useThree((state2) => state2.viewport);
  useFrame(() => {
    group.current.position.x = state.horizontal ? -width * (state.pages - 1) * state.offset : 0;
    group.current.position.y = state.horizontal ? 0 : height * (state.pages - 1) * state.offset;
  });
  return React5.createElement("group", {
    ref: react_merge_refs_esm_default([ref, group])
  }, children);
});
var ScrollHtml = React5.forwardRef((_a, ref) => {
  var _b = _a, {
    children,
    style
  } = _b, props = __objRest(_b, [
    "children",
    "style"
  ]);
  const state = useScroll();
  const group = React5.useRef(null);
  const {
    width,
    height
  } = useThree((state2) => state2.size);
  const fiberState = React5.useContext(context);
  const root = React5.useMemo(() => ReactDOM2.createRoot(state.fixed), [state.fixed]);
  useFrame(() => {
    if (state.delta > state.eps) {
      group.current.style.transform = `translate3d(${state.horizontal ? -width * (state.pages - 1) * state.offset : 0}px,${state.horizontal ? 0 : height * (state.pages - 1) * -state.offset}px,0)`;
    }
  });
  root.render(React5.createElement("div", _extends({
    ref: react_merge_refs_esm_default([ref, group]),
    style: __spreadProps(__spreadValues({}, style), {
      position: "absolute",
      top: 0,
      left: 0,
      willChange: "transform"
    })
  }, props), React5.createElement(context2.Provider, {
    value: state
  }, React5.createElement(context.Provider, {
    value: fiberState
  }, children))));
  return null;
});
var Scroll = React5.forwardRef((_a, ref) => {
  var _b = _a, {
    html
  } = _b, props = __objRest(_b, [
    "html"
  ]);
  const El = html ? ScrollHtml : ScrollCanvas;
  return React5.createElement(El, _extends({
    ref
  }, props));
});

// node_modules/@react-three/drei/web/PresentationControls.js
init_extends();
var React7 = __toESM(require_react());
init_three_module();
init_react_three_fiber_esm();

// node_modules/@use-gesture/core/dist/maths-b2a210f4.esm.js
function clamp(v4, min, max) {
  return Math.max(min, Math.min(v4, max));
}
var V = {
  toVector(v4, fallback) {
    if (v4 === void 0)
      v4 = fallback;
    return Array.isArray(v4) ? v4 : [v4, v4];
  },
  add(v12, v22) {
    return [v12[0] + v22[0], v12[1] + v22[1]];
  },
  sub(v12, v22) {
    return [v12[0] - v22[0], v12[1] - v22[1]];
  },
  addTo(v12, v22) {
    v12[0] += v22[0];
    v12[1] += v22[1];
  },
  subTo(v12, v22) {
    v12[0] -= v22[0];
    v12[1] -= v22[1];
  }
};
function rubberband(distance, dimension, constant) {
  if (dimension === 0 || Math.abs(dimension) === Infinity)
    return Math.pow(distance, constant * 5);
  return distance * dimension * constant / (dimension + constant * distance);
}
function rubberbandIfOutOfBounds(position2, min, max, constant = 0.15) {
  if (constant === 0)
    return clamp(position2, min, max);
  if (position2 < min)
    return -rubberband(min - position2, max - min, constant) + min;
  if (position2 > max)
    return +rubberband(position2 - max, max - min, constant) + max;
  return position2;
}
function computeRubberband(bounds, [Vx, Vy], [Rx, Ry]) {
  const [[X0, X1], [Y0, Y1]] = bounds;
  return [rubberbandIfOutOfBounds(Vx, X0, X1, Rx), rubberbandIfOutOfBounds(Vy, Y0, Y1, Ry)];
}

// node_modules/@use-gesture/core/dist/actions-1416bf77.esm.js
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target2) {
  for (var i5 = 1; i5 < arguments.length; i5++) {
    var source = arguments[i5] != null ? arguments[i5] : {};
    i5 % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target2, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target2, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target2, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target2;
}
var EVENT_TYPE_MAP = {
  pointer: {
    start: "down",
    change: "move",
    end: "up"
  },
  mouse: {
    start: "down",
    change: "move",
    end: "up"
  },
  touch: {
    start: "start",
    change: "move",
    end: "end"
  },
  gesture: {
    start: "start",
    change: "change",
    end: "end"
  }
};
function capitalize(string) {
  if (!string)
    return "";
  return string[0].toUpperCase() + string.slice(1);
}
var actionsWithoutCaptureSupported = ["enter", "leave"];
function hasCapture(capture = false, actionKey) {
  return capture && !actionsWithoutCaptureSupported.includes(actionKey);
}
function toHandlerProp(device, action = "", capture = false) {
  const deviceProps = EVENT_TYPE_MAP[device];
  const actionKey = deviceProps ? deviceProps[action] || action : action;
  return "on" + capitalize(device) + capitalize(actionKey) + (hasCapture(capture, actionKey) ? "Capture" : "");
}
var pointerCaptureEvents = ["gotpointercapture", "lostpointercapture"];
function parseProp(prop) {
  let eventKey = prop.substring(2).toLowerCase();
  const passive = !!~eventKey.indexOf("passive");
  if (passive)
    eventKey = eventKey.replace("passive", "");
  const captureKey = pointerCaptureEvents.includes(eventKey) ? "capturecapture" : "capture";
  const capture = !!~eventKey.indexOf(captureKey);
  if (capture)
    eventKey = eventKey.replace("capture", "");
  return {
    device: eventKey,
    capture,
    passive
  };
}
function toDomEventType(device, action = "") {
  const deviceProps = EVENT_TYPE_MAP[device];
  const actionKey = deviceProps ? deviceProps[action] || action : action;
  return device + actionKey;
}
function isTouch(event) {
  return "touches" in event;
}
function getPointerType(event) {
  if (isTouch(event))
    return "touch";
  if ("pointerType" in event)
    return event.pointerType;
  return "mouse";
}
function getCurrentTargetTouchList(event) {
  return Array.from(event.touches).filter((e3) => {
    var _event$currentTarget, _event$currentTarget$;
    return e3.target === event.currentTarget || ((_event$currentTarget = event.currentTarget) === null || _event$currentTarget === void 0 ? void 0 : (_event$currentTarget$ = _event$currentTarget.contains) === null || _event$currentTarget$ === void 0 ? void 0 : _event$currentTarget$.call(_event$currentTarget, e3.target));
  });
}
function getTouchList(event) {
  return event.type === "touchend" || event.type === "touchcancel" ? event.changedTouches : event.targetTouches;
}
function getValueEvent(event) {
  return isTouch(event) ? getTouchList(event)[0] : event;
}
function distanceAngle(P1, P2) {
  const dx = P2.clientX - P1.clientX;
  const dy = P2.clientY - P1.clientY;
  const cx = (P2.clientX + P1.clientX) / 2;
  const cy = (P2.clientY + P1.clientY) / 2;
  const distance = Math.hypot(dx, dy);
  const angle = -(Math.atan2(dx, dy) * 180) / Math.PI;
  const origin = [cx, cy];
  return {
    angle,
    distance,
    origin
  };
}
function touchIds(event) {
  return getCurrentTargetTouchList(event).map((touch) => touch.identifier);
}
function touchDistanceAngle(event, ids) {
  const [P1, P2] = Array.from(event.touches).filter((touch) => ids.includes(touch.identifier));
  return distanceAngle(P1, P2);
}
function pointerId(event) {
  const valueEvent = getValueEvent(event);
  return isTouch(event) ? valueEvent.identifier : valueEvent.pointerId;
}
function pointerValues(event) {
  const valueEvent = getValueEvent(event);
  return [valueEvent.clientX, valueEvent.clientY];
}
var LINE_HEIGHT = 40;
var PAGE_HEIGHT = 800;
function wheelValues(event) {
  let {
    deltaX,
    deltaY,
    deltaMode
  } = event;
  if (deltaMode === 1) {
    deltaX *= LINE_HEIGHT;
    deltaY *= LINE_HEIGHT;
  } else if (deltaMode === 2) {
    deltaX *= PAGE_HEIGHT;
    deltaY *= PAGE_HEIGHT;
  }
  return [deltaX, deltaY];
}
function scrollValues(event) {
  var _ref, _ref2;
  const {
    scrollX,
    scrollY,
    scrollLeft,
    scrollTop
  } = event.currentTarget;
  return [(_ref = scrollX !== null && scrollX !== void 0 ? scrollX : scrollLeft) !== null && _ref !== void 0 ? _ref : 0, (_ref2 = scrollY !== null && scrollY !== void 0 ? scrollY : scrollTop) !== null && _ref2 !== void 0 ? _ref2 : 0];
}
function getEventDetails(event) {
  const payload = {};
  if ("buttons" in event)
    payload.buttons = event.buttons;
  if ("shiftKey" in event) {
    const {
      shiftKey,
      altKey,
      metaKey,
      ctrlKey
    } = event;
    Object.assign(payload, {
      shiftKey,
      altKey,
      metaKey,
      ctrlKey
    });
  }
  return payload;
}
function call(v4, ...args) {
  if (typeof v4 === "function") {
    return v4(...args);
  } else {
    return v4;
  }
}
function noop() {
}
function chain(...fns) {
  if (fns.length === 0)
    return noop;
  if (fns.length === 1)
    return fns[0];
  return function() {
    let result;
    for (const fn of fns) {
      result = fn.apply(this, arguments) || result;
    }
    return result;
  };
}
function assignDefault(value, fallback) {
  return Object.assign({}, fallback, value || {});
}
var BEFORE_LAST_KINEMATICS_DELAY = 32;
var Engine = class {
  constructor(ctrl, args, key) {
    this.ctrl = ctrl;
    this.args = args;
    this.key = key;
    if (!this.state) {
      this.state = {};
      this.computeValues([0, 0]);
      this.computeInitial();
      if (this.init)
        this.init();
      this.reset();
    }
  }
  get state() {
    return this.ctrl.state[this.key];
  }
  set state(state) {
    this.ctrl.state[this.key] = state;
  }
  get shared() {
    return this.ctrl.state.shared;
  }
  get eventStore() {
    return this.ctrl.gestureEventStores[this.key];
  }
  get timeoutStore() {
    return this.ctrl.gestureTimeoutStores[this.key];
  }
  get config() {
    return this.ctrl.config[this.key];
  }
  get sharedConfig() {
    return this.ctrl.config.shared;
  }
  get handler() {
    return this.ctrl.handlers[this.key];
  }
  reset() {
    const {
      state,
      shared,
      ingKey,
      args
    } = this;
    shared[ingKey] = state._active = state.active = state._blocked = state._force = false;
    state._step = [false, false];
    state.intentional = false;
    state._movement = [0, 0];
    state._distance = [0, 0];
    state._direction = [0, 0];
    state._delta = [0, 0];
    state._bounds = [[-Infinity, Infinity], [-Infinity, Infinity]];
    state.args = args;
    state.axis = void 0;
    state.memo = void 0;
    state.elapsedTime = 0;
    state.direction = [0, 0];
    state.distance = [0, 0];
    state.overflow = [0, 0];
    state._movementBound = [false, false];
    state.velocity = [0, 0];
    state.movement = [0, 0];
    state.delta = [0, 0];
    state.timeStamp = 0;
  }
  start(event) {
    const state = this.state;
    const config = this.config;
    if (!state._active) {
      this.reset();
      this.computeInitial();
      state._active = true;
      state.target = event.target;
      state.currentTarget = event.currentTarget;
      state.lastOffset = config.from ? call(config.from, state) : state.offset;
      state.offset = state.lastOffset;
    }
    state.startTime = state.timeStamp = event.timeStamp;
  }
  computeValues(values) {
    const state = this.state;
    state._values = values;
    state.values = this.config.transform(values);
  }
  computeInitial() {
    const state = this.state;
    state._initial = state._values;
    state.initial = state.values;
  }
  compute(event) {
    const {
      state,
      config,
      shared
    } = this;
    state.args = this.args;
    let dt = 0;
    if (event) {
      state.event = event;
      if (config.preventDefault && event.cancelable)
        state.event.preventDefault();
      state.type = event.type;
      shared.touches = this.ctrl.pointerIds.size || this.ctrl.touchIds.size;
      shared.locked = !!document.pointerLockElement;
      Object.assign(shared, getEventDetails(event));
      shared.down = shared.pressed = shared.buttons % 2 === 1 || shared.touches > 0;
      dt = event.timeStamp - state.timeStamp;
      state.timeStamp = event.timeStamp;
      state.elapsedTime = state.timeStamp - state.startTime;
    }
    if (state._active) {
      const _absoluteDelta = state._delta.map(Math.abs);
      V.addTo(state._distance, _absoluteDelta);
    }
    if (this.axisIntent)
      this.axisIntent(event);
    const [_m0, _m1] = state._movement;
    const [t0, t1] = config.threshold;
    const {
      _step,
      values
    } = state;
    if (config.hasCustomTransform) {
      if (_step[0] === false)
        _step[0] = Math.abs(_m0) >= t0 && values[0];
      if (_step[1] === false)
        _step[1] = Math.abs(_m1) >= t1 && values[1];
    } else {
      if (_step[0] === false)
        _step[0] = Math.abs(_m0) >= t0 && Math.sign(_m0) * t0;
      if (_step[1] === false)
        _step[1] = Math.abs(_m1) >= t1 && Math.sign(_m1) * t1;
    }
    state.intentional = _step[0] !== false || _step[1] !== false;
    if (!state.intentional)
      return;
    const movement = [0, 0];
    if (config.hasCustomTransform) {
      const [v0, v12] = values;
      movement[0] = _step[0] !== false ? v0 - _step[0] : 0;
      movement[1] = _step[1] !== false ? v12 - _step[1] : 0;
    } else {
      movement[0] = _step[0] !== false ? _m0 - _step[0] : 0;
      movement[1] = _step[1] !== false ? _m1 - _step[1] : 0;
    }
    if (this.restrictToAxis && !state._blocked)
      this.restrictToAxis(movement);
    const previousOffset = state.offset;
    const gestureIsActive = state._active && !state._blocked || state.active;
    if (gestureIsActive) {
      state.first = state._active && !state.active;
      state.last = !state._active && state.active;
      state.active = shared[this.ingKey] = state._active;
      if (event) {
        if (state.first) {
          if ("bounds" in config)
            state._bounds = call(config.bounds, state);
          if (this.setup)
            this.setup();
        }
        state.movement = movement;
        this.computeOffset();
      }
    }
    const [ox, oy] = state.offset;
    const [[x0, x1], [y0, y1]] = state._bounds;
    state.overflow = [ox < x0 ? -1 : ox > x1 ? 1 : 0, oy < y0 ? -1 : oy > y1 ? 1 : 0];
    state._movementBound[0] = state.overflow[0] ? state._movementBound[0] === false ? state._movement[0] : state._movementBound[0] : false;
    state._movementBound[1] = state.overflow[1] ? state._movementBound[1] === false ? state._movement[1] : state._movementBound[1] : false;
    const rubberband2 = state._active ? config.rubberband || [0, 0] : [0, 0];
    state.offset = computeRubberband(state._bounds, state.offset, rubberband2);
    state.delta = V.sub(state.offset, previousOffset);
    this.computeMovement();
    if (gestureIsActive && (!state.last || dt > BEFORE_LAST_KINEMATICS_DELAY)) {
      state.delta = V.sub(state.offset, previousOffset);
      const absoluteDelta = state.delta.map(Math.abs);
      V.addTo(state.distance, absoluteDelta);
      state.direction = state.delta.map(Math.sign);
      state._direction = state._delta.map(Math.sign);
      if (!state.first && dt > 0) {
        state.velocity = [absoluteDelta[0] / dt, absoluteDelta[1] / dt];
      }
    }
  }
  emit() {
    const state = this.state;
    const shared = this.shared;
    const config = this.config;
    if (!state._active)
      this.clean();
    if ((state._blocked || !state.intentional) && !state._force && !config.triggerAllEvents)
      return;
    const memo = this.handler(_objectSpread2(_objectSpread2(_objectSpread2({}, shared), state), {}, {
      [this.aliasKey]: state.values
    }));
    if (memo !== void 0)
      state.memo = memo;
  }
  clean() {
    this.eventStore.clean();
    this.timeoutStore.clean();
  }
};
function selectAxis([dx, dy], threshold) {
  const absDx = Math.abs(dx);
  const absDy = Math.abs(dy);
  if (absDx > absDy && absDx > threshold) {
    return "x";
  }
  if (absDy > absDx && absDy > threshold) {
    return "y";
  }
  return void 0;
}
var CoordinatesEngine = class extends Engine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "aliasKey", "xy");
  }
  reset() {
    super.reset();
    this.state.axis = void 0;
  }
  init() {
    this.state.offset = [0, 0];
    this.state.lastOffset = [0, 0];
  }
  computeOffset() {
    this.state.offset = V.add(this.state.lastOffset, this.state.movement);
  }
  computeMovement() {
    this.state.movement = V.sub(this.state.offset, this.state.lastOffset);
  }
  axisIntent(event) {
    const state = this.state;
    const config = this.config;
    if (!state.axis && event) {
      const threshold = typeof config.axisThreshold === "object" ? config.axisThreshold[getPointerType(event)] : config.axisThreshold;
      state.axis = selectAxis(state._movement, threshold);
    }
    state._blocked = (config.lockDirection || !!config.axis) && !state.axis || !!config.axis && config.axis !== state.axis;
  }
  restrictToAxis(v4) {
    if (this.config.axis || this.config.lockDirection) {
      switch (this.state.axis) {
        case "x":
          v4[1] = 0;
          break;
        case "y":
          v4[0] = 0;
          break;
      }
    }
  }
};
var identity = (v4) => v4;
var DEFAULT_RUBBERBAND = 0.15;
var commonConfigResolver = {
  enabled(value = true) {
    return value;
  },
  eventOptions(value, _k, config) {
    return _objectSpread2(_objectSpread2({}, config.shared.eventOptions), value);
  },
  preventDefault(value = false) {
    return value;
  },
  triggerAllEvents(value = false) {
    return value;
  },
  rubberband(value = 0) {
    switch (value) {
      case true:
        return [DEFAULT_RUBBERBAND, DEFAULT_RUBBERBAND];
      case false:
        return [0, 0];
      default:
        return V.toVector(value);
    }
  },
  from(value) {
    if (typeof value === "function")
      return value;
    if (value != null)
      return V.toVector(value);
  },
  transform(value, _k, config) {
    const transform = value || config.shared.transform;
    this.hasCustomTransform = !!transform;
    if (true) {
      const originalTransform = transform || identity;
      return (v4) => {
        const r3 = originalTransform(v4);
        if (!isFinite(r3[0]) || !isFinite(r3[1])) {
          console.warn(`[@use-gesture]: config.transform() must produce a valid result, but it was: [${r3[0]},${[1]}]`);
        }
        return r3;
      };
    }
    return transform || identity;
  },
  threshold(value) {
    return V.toVector(value, 0);
  }
};
if (true) {
  Object.assign(commonConfigResolver, {
    domTarget(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`domTarget\` option has been renamed to \`target\`.`);
      }
      return NaN;
    },
    lockDirection(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`lockDirection\` option has been merged with \`axis\`. Use it as in \`{ axis: 'lock' }\``);
      }
      return NaN;
    },
    initial(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`initial\` option has been renamed to \`from\`.`);
      }
      return NaN;
    }
  });
}
var DEFAULT_AXIS_THRESHOLD = 0;
var coordinatesConfigResolver = _objectSpread2(_objectSpread2({}, commonConfigResolver), {}, {
  axis(_v, _k, {
    axis
  }) {
    this.lockDirection = axis === "lock";
    if (!this.lockDirection)
      return axis;
  },
  axisThreshold(value = DEFAULT_AXIS_THRESHOLD) {
    return value;
  },
  bounds(value = {}) {
    if (typeof value === "function") {
      return (state) => coordinatesConfigResolver.bounds(value(state));
    }
    if ("current" in value) {
      return () => value.current;
    }
    if (typeof HTMLElement === "function" && value instanceof HTMLElement) {
      return value;
    }
    const {
      left = -Infinity,
      right = Infinity,
      top = -Infinity,
      bottom = Infinity
    } = value;
    return [[left, right], [top, bottom]];
  }
});
var DISPLACEMENT = 10;
var KEYS_DELTA_MAP = {
  ArrowRight: (factor = 1) => [DISPLACEMENT * factor, 0],
  ArrowLeft: (factor = 1) => [-DISPLACEMENT * factor, 0],
  ArrowUp: (factor = 1) => [0, -DISPLACEMENT * factor],
  ArrowDown: (factor = 1) => [0, DISPLACEMENT * factor]
};
var DragEngine = class extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", "dragging");
  }
  reset() {
    super.reset();
    const state = this.state;
    state._pointerId = void 0;
    state._pointerActive = false;
    state._keyboardActive = false;
    state._preventScroll = false;
    state._delayed = false;
    state.swipe = [0, 0];
    state.tap = false;
    state.canceled = false;
    state.cancel = this.cancel.bind(this);
  }
  setup() {
    const state = this.state;
    if (state._bounds instanceof HTMLElement) {
      const boundRect = state._bounds.getBoundingClientRect();
      const targetRect = state.currentTarget.getBoundingClientRect();
      const _bounds = {
        left: boundRect.left - targetRect.left + state.offset[0],
        right: boundRect.right - targetRect.right + state.offset[0],
        top: boundRect.top - targetRect.top + state.offset[1],
        bottom: boundRect.bottom - targetRect.bottom + state.offset[1]
      };
      state._bounds = coordinatesConfigResolver.bounds(_bounds);
    }
  }
  cancel() {
    const state = this.state;
    if (state.canceled)
      return;
    state.canceled = true;
    state._active = false;
    setTimeout(() => {
      this.compute();
      this.emit();
    }, 0);
  }
  setActive() {
    this.state._active = this.state._pointerActive || this.state._keyboardActive;
  }
  clean() {
    this.pointerClean();
    this.state._pointerActive = false;
    this.state._keyboardActive = false;
    super.clean();
  }
  pointerDown(event) {
    const config = this.config;
    const state = this.state;
    if (event.buttons != null && (Array.isArray(config.pointerButtons) ? !config.pointerButtons.includes(event.buttons) : config.pointerButtons !== -1 && config.pointerButtons !== event.buttons))
      return;
    const ctrlIds = this.ctrl.setEventIds(event);
    if (config.pointerCapture) {
      event.target.setPointerCapture(event.pointerId);
    }
    if (ctrlIds && ctrlIds.size > 1 && state._pointerActive)
      return;
    this.start(event);
    this.setupPointer(event);
    state._pointerId = pointerId(event);
    state._pointerActive = true;
    this.computeValues(pointerValues(event));
    this.computeInitial();
    if (config.preventScrollAxis && getPointerType(event) !== "mouse") {
      state._active = false;
      this.setupScrollPrevention(event);
    } else if (config.delay > 0) {
      this.setupDelayTrigger(event);
      if (config.triggerAllEvents) {
        this.compute(event);
        this.emit();
      }
    } else {
      this.startPointerDrag(event);
    }
  }
  startPointerDrag(event) {
    const state = this.state;
    state._active = true;
    state._preventScroll = true;
    state._delayed = false;
    this.compute(event);
    this.emit();
  }
  pointerMove(event) {
    const state = this.state;
    const config = this.config;
    if (!state._pointerActive)
      return;
    if (state.type === event.type && event.timeStamp === state.timeStamp)
      return;
    const id = pointerId(event);
    if (state._pointerId !== void 0 && id !== state._pointerId)
      return;
    const _values = pointerValues(event);
    if (document.pointerLockElement === event.target) {
      state._delta = [event.movementX, event.movementY];
    } else {
      state._delta = V.sub(_values, state._values);
      this.computeValues(_values);
    }
    V.addTo(state._movement, state._delta);
    this.compute(event);
    if (state._delayed && state.intentional) {
      this.timeoutStore.remove("dragDelay");
      state.active = false;
      this.startPointerDrag(event);
      return;
    }
    if (config.preventScrollAxis && !state._preventScroll) {
      if (state.axis) {
        if (state.axis === config.preventScrollAxis || config.preventScrollAxis === "xy") {
          state._active = false;
          this.clean();
          return;
        } else {
          this.timeoutStore.remove("startPointerDrag");
          this.startPointerDrag(event);
          return;
        }
      } else {
        return;
      }
    }
    this.emit();
  }
  pointerUp(event) {
    this.ctrl.setEventIds(event);
    try {
      if (this.config.pointerCapture && event.target.hasPointerCapture(event.pointerId)) {
        ;
        event.target.releasePointerCapture(event.pointerId);
      }
    } catch (_unused) {
      if (true) {
        console.warn(`[@use-gesture]: If you see this message, it's likely that you're using an outdated version of \`@react-three/fiber\`. 

Please upgrade to the latest version.`);
      }
    }
    const state = this.state;
    const config = this.config;
    if (!state._active || !state._pointerActive)
      return;
    const id = pointerId(event);
    if (state._pointerId !== void 0 && id !== state._pointerId)
      return;
    this.state._pointerActive = false;
    this.setActive();
    this.compute(event);
    const [dx, dy] = state._distance;
    state.tap = dx <= config.tapsThreshold && dy <= config.tapsThreshold;
    if (state.tap && config.filterTaps) {
      state._force = true;
    } else {
      const [dirx, diry] = state.direction;
      const [vx, vy] = state.velocity;
      const [mx, my] = state.movement;
      const [svx, svy] = config.swipe.velocity;
      const [sx, sy] = config.swipe.distance;
      const sdt = config.swipe.duration;
      if (state.elapsedTime < sdt) {
        if (Math.abs(vx) > svx && Math.abs(mx) > sx)
          state.swipe[0] = dirx;
        if (Math.abs(vy) > svy && Math.abs(my) > sy)
          state.swipe[1] = diry;
      }
    }
    this.emit();
  }
  pointerClick(event) {
    if (!this.state.tap) {
      event.preventDefault();
      event.stopPropagation();
    }
  }
  setupPointer(event) {
    const config = this.config;
    const device = config.device;
    if (true) {
      try {
        if (device === "pointer" && config.preventScrollDelay === void 0) {
          const currentTarget = "uv" in event ? event.sourceEvent.currentTarget : event.currentTarget;
          const style = window.getComputedStyle(currentTarget);
          if (style.touchAction === "auto") {
            console.warn(`[@use-gesture]: The drag target has its \`touch-action\` style property set to \`auto\`. It is recommended to add \`touch-action: 'none'\` so that the drag gesture behaves correctly on touch-enabled devices. For more information read this: https://use-gesture.netlify.app/docs/extras/#touch-action.

This message will only show in development mode. It won't appear in production. If this is intended, you can ignore it.`, currentTarget);
          }
        }
      } catch (_unused2) {
      }
    }
    if (config.pointerLock) {
      event.currentTarget.requestPointerLock();
    }
    if (!config.pointerCapture) {
      this.eventStore.add(this.sharedConfig.window, device, "change", this.pointerMove.bind(this));
      this.eventStore.add(this.sharedConfig.window, device, "end", this.pointerUp.bind(this));
      this.eventStore.add(this.sharedConfig.window, device, "cancel", this.pointerUp.bind(this));
    }
  }
  pointerClean() {
    if (this.config.pointerLock && document.pointerLockElement === this.state.currentTarget) {
      document.exitPointerLock();
    }
  }
  preventScroll(event) {
    if (this.state._preventScroll && event.cancelable) {
      event.preventDefault();
    }
  }
  setupScrollPrevention(event) {
    this.state._preventScroll = false;
    persistEvent(event);
    const remove = this.eventStore.add(this.sharedConfig.window, "touch", "change", this.preventScroll.bind(this), {
      passive: false
    });
    this.eventStore.add(this.sharedConfig.window, "touch", "end", remove);
    this.eventStore.add(this.sharedConfig.window, "touch", "cancel", remove);
    this.timeoutStore.add("startPointerDrag", this.startPointerDrag.bind(this), this.config.preventScrollDelay, event);
  }
  setupDelayTrigger(event) {
    this.state._delayed = true;
    this.timeoutStore.add("dragDelay", () => {
      this.state._step = [0, 0];
      this.startPointerDrag(event);
    }, this.config.delay);
  }
  keyDown(event) {
    const deltaFn = KEYS_DELTA_MAP[event.key];
    if (deltaFn) {
      const state = this.state;
      const factor = event.shiftKey ? 10 : event.altKey ? 0.1 : 1;
      this.start(event);
      state._delta = deltaFn(factor);
      state._keyboardActive = true;
      V.addTo(state._movement, state._delta);
      this.compute(event);
      this.emit();
    }
  }
  keyUp(event) {
    if (!(event.key in KEYS_DELTA_MAP))
      return;
    this.state._keyboardActive = false;
    this.setActive();
    this.compute(event);
    this.emit();
  }
  bind(bindFunction) {
    const device = this.config.device;
    bindFunction(device, "start", this.pointerDown.bind(this));
    if (this.config.pointerCapture) {
      bindFunction(device, "change", this.pointerMove.bind(this));
      bindFunction(device, "end", this.pointerUp.bind(this));
      bindFunction(device, "cancel", this.pointerUp.bind(this));
      bindFunction("lostPointerCapture", "", this.pointerUp.bind(this));
    }
    bindFunction("key", "down", this.keyDown.bind(this));
    bindFunction("key", "up", this.keyUp.bind(this));
    if (this.config.filterTaps) {
      bindFunction("click", "", this.pointerClick.bind(this), {
        capture: true,
        passive: false
      });
    }
  }
};
function persistEvent(event) {
  "persist" in event && typeof event.persist === "function" && event.persist();
}
var isBrowser = typeof window !== "undefined" && window.document && window.document.createElement;
function supportsTouchEvents() {
  return isBrowser && "ontouchstart" in window;
}
function isTouchScreen() {
  return supportsTouchEvents() || isBrowser && window.navigator.maxTouchPoints > 1;
}
function supportsPointerEvents() {
  return isBrowser && "onpointerdown" in window;
}
function supportsPointerLock() {
  return isBrowser && "exitPointerLock" in window.document;
}
function supportsGestureEvents() {
  try {
    return "constructor" in GestureEvent;
  } catch (e3) {
    return false;
  }
}
var SUPPORT = {
  isBrowser,
  gesture: supportsGestureEvents(),
  touch: isTouchScreen(),
  touchscreen: isTouchScreen(),
  pointer: supportsPointerEvents(),
  pointerLock: supportsPointerLock()
};
var DEFAULT_PREVENT_SCROLL_DELAY = 250;
var DEFAULT_DRAG_DELAY = 180;
var DEFAULT_SWIPE_VELOCITY = 0.5;
var DEFAULT_SWIPE_DISTANCE = 50;
var DEFAULT_SWIPE_DURATION = 250;
var DEFAULT_DRAG_AXIS_THRESHOLD = {
  mouse: 0,
  touch: 0,
  pen: 8
};
var dragConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {
  device(_v, _k, {
    pointer: {
      touch = false,
      lock = false,
      mouse = false
    } = {}
  }) {
    this.pointerLock = lock && SUPPORT.pointerLock;
    if (SUPPORT.touch && touch)
      return "touch";
    if (this.pointerLock)
      return "mouse";
    if (SUPPORT.pointer && !mouse)
      return "pointer";
    if (SUPPORT.touch)
      return "touch";
    return "mouse";
  },
  preventScrollAxis(value, _k, {
    preventScroll
  }) {
    this.preventScrollDelay = typeof preventScroll === "number" ? preventScroll : preventScroll || preventScroll === void 0 && value ? DEFAULT_PREVENT_SCROLL_DELAY : void 0;
    if (!SUPPORT.touchscreen || preventScroll === false)
      return void 0;
    return value ? value : preventScroll !== void 0 ? "y" : void 0;
  },
  pointerCapture(_v, _k, {
    pointer: {
      capture = true,
      buttons = 1
    } = {}
  }) {
    this.pointerButtons = buttons;
    return !this.pointerLock && this.device === "pointer" && capture;
  },
  threshold(value, _k, {
    filterTaps = false,
    tapsThreshold = 3,
    axis = void 0
  }) {
    const threshold = V.toVector(value, filterTaps ? tapsThreshold : axis ? 1 : 0);
    this.filterTaps = filterTaps;
    this.tapsThreshold = tapsThreshold;
    return threshold;
  },
  swipe({
    velocity = DEFAULT_SWIPE_VELOCITY,
    distance = DEFAULT_SWIPE_DISTANCE,
    duration = DEFAULT_SWIPE_DURATION
  } = {}) {
    return {
      velocity: this.transform(V.toVector(velocity)),
      distance: this.transform(V.toVector(distance)),
      duration
    };
  },
  delay(value = 0) {
    switch (value) {
      case true:
        return DEFAULT_DRAG_DELAY;
      case false:
        return 0;
      default:
        return value;
    }
  },
  axisThreshold(value) {
    if (!value)
      return DEFAULT_DRAG_AXIS_THRESHOLD;
    return _objectSpread2(_objectSpread2({}, DEFAULT_DRAG_AXIS_THRESHOLD), value);
  }
});
if (true) {
  Object.assign(dragConfigResolver, {
    useTouch(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`useTouch\` option has been renamed to \`pointer.touch\`. Use it as in \`{ pointer: { touch: true } }\`.`);
      }
      return NaN;
    },
    experimental_preventWindowScrollY(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`experimental_preventWindowScrollY\` option has been renamed to \`preventScroll\`.`);
      }
      return NaN;
    },
    swipeVelocity(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`swipeVelocity\` option has been renamed to \`swipe.velocity\`. Use it as in \`{ swipe: { velocity: 0.5 } }\`.`);
      }
      return NaN;
    },
    swipeDistance(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`swipeDistance\` option has been renamed to \`swipe.distance\`. Use it as in \`{ swipe: { distance: 50 } }\`.`);
      }
      return NaN;
    },
    swipeDuration(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`swipeDuration\` option has been renamed to \`swipe.duration\`. Use it as in \`{ swipe: { duration: 250 } }\`.`);
      }
      return NaN;
    }
  });
}
var SCALE_ANGLE_RATIO_INTENT_DEG = 30;
var PINCH_WHEEL_RATIO = 100;
var PinchEngine = class extends Engine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", "pinching");
    _defineProperty(this, "aliasKey", "da");
  }
  init() {
    this.state.offset = [1, 0];
    this.state.lastOffset = [1, 0];
    this.state._pointerEvents = /* @__PURE__ */ new Map();
  }
  reset() {
    super.reset();
    const state = this.state;
    state._touchIds = [];
    state.canceled = false;
    state.cancel = this.cancel.bind(this);
    state.turns = 0;
  }
  computeOffset() {
    const {
      type,
      movement,
      lastOffset
    } = this.state;
    if (type === "wheel") {
      this.state.offset = V.add(movement, lastOffset);
    } else {
      this.state.offset = [(1 + movement[0]) * lastOffset[0], movement[1] + lastOffset[1]];
    }
  }
  computeMovement() {
    const {
      offset,
      lastOffset
    } = this.state;
    this.state.movement = [offset[0] / lastOffset[0], offset[1] - lastOffset[1]];
  }
  axisIntent() {
    const state = this.state;
    const [_m0, _m1] = state._movement;
    if (!state.axis) {
      const axisMovementDifference = Math.abs(_m0) * SCALE_ANGLE_RATIO_INTENT_DEG - Math.abs(_m1);
      if (axisMovementDifference < 0)
        state.axis = "angle";
      else if (axisMovementDifference > 0)
        state.axis = "scale";
    }
  }
  restrictToAxis(v4) {
    if (this.config.lockDirection) {
      if (this.state.axis === "scale")
        v4[1] = 0;
      else if (this.state.axis === "angle")
        v4[0] = 0;
    }
  }
  cancel() {
    const state = this.state;
    if (state.canceled)
      return;
    setTimeout(() => {
      state.canceled = true;
      state._active = false;
      this.compute();
      this.emit();
    }, 0);
  }
  touchStart(event) {
    this.ctrl.setEventIds(event);
    const state = this.state;
    const ctrlTouchIds = this.ctrl.touchIds;
    if (state._active) {
      if (state._touchIds.every((id) => ctrlTouchIds.has(id)))
        return;
    }
    if (ctrlTouchIds.size < 2)
      return;
    this.start(event);
    state._touchIds = Array.from(ctrlTouchIds).slice(0, 2);
    const payload = touchDistanceAngle(event, state._touchIds);
    this.pinchStart(event, payload);
  }
  pointerStart(event) {
    if (event.buttons != null && event.buttons % 2 !== 1)
      return;
    this.ctrl.setEventIds(event);
    event.target.setPointerCapture(event.pointerId);
    const state = this.state;
    const _pointerEvents = state._pointerEvents;
    const ctrlPointerIds = this.ctrl.pointerIds;
    if (state._active) {
      if (Array.from(_pointerEvents.keys()).every((id) => ctrlPointerIds.has(id)))
        return;
    }
    if (_pointerEvents.size < 2) {
      _pointerEvents.set(event.pointerId, event);
    }
    if (state._pointerEvents.size < 2)
      return;
    this.start(event);
    const payload = distanceAngle(...Array.from(_pointerEvents.values()));
    this.pinchStart(event, payload);
  }
  pinchStart(event, payload) {
    const state = this.state;
    state.origin = payload.origin;
    this.computeValues([payload.distance, payload.angle]);
    this.computeInitial();
    this.compute(event);
    this.emit();
  }
  touchMove(event) {
    if (!this.state._active)
      return;
    const payload = touchDistanceAngle(event, this.state._touchIds);
    this.pinchMove(event, payload);
  }
  pointerMove(event) {
    const _pointerEvents = this.state._pointerEvents;
    if (_pointerEvents.has(event.pointerId)) {
      _pointerEvents.set(event.pointerId, event);
    }
    if (!this.state._active)
      return;
    const payload = distanceAngle(...Array.from(_pointerEvents.values()));
    this.pinchMove(event, payload);
  }
  pinchMove(event, payload) {
    const state = this.state;
    const prev_a = state._values[1];
    const delta_a = payload.angle - prev_a;
    let delta_turns = 0;
    if (Math.abs(delta_a) > 270)
      delta_turns += Math.sign(delta_a);
    this.computeValues([payload.distance, payload.angle - 360 * delta_turns]);
    state.origin = payload.origin;
    state.turns = delta_turns;
    state._movement = [state._values[0] / state._initial[0] - 1, state._values[1] - state._initial[1]];
    this.compute(event);
    this.emit();
  }
  touchEnd(event) {
    this.ctrl.setEventIds(event);
    if (!this.state._active)
      return;
    if (this.state._touchIds.some((id) => !this.ctrl.touchIds.has(id))) {
      this.state._active = false;
      this.compute(event);
      this.emit();
    }
  }
  pointerEnd(event) {
    const state = this.state;
    this.ctrl.setEventIds(event);
    try {
      event.target.releasePointerCapture(event.pointerId);
    } catch (_unused) {
    }
    if (state._pointerEvents.has(event.pointerId)) {
      state._pointerEvents.delete(event.pointerId);
    }
    if (!state._active)
      return;
    if (state._pointerEvents.size < 2) {
      state._active = false;
      this.compute(event);
      this.emit();
    }
  }
  gestureStart(event) {
    if (event.cancelable)
      event.preventDefault();
    const state = this.state;
    if (state._active)
      return;
    this.start(event);
    this.computeValues([event.scale, event.rotation]);
    state.origin = [event.clientX, event.clientY];
    this.compute(event);
    this.emit();
  }
  gestureMove(event) {
    if (event.cancelable)
      event.preventDefault();
    if (!this.state._active)
      return;
    const state = this.state;
    this.computeValues([event.scale, event.rotation]);
    state.origin = [event.clientX, event.clientY];
    const _previousMovement = state._movement;
    state._movement = [event.scale - 1, event.rotation];
    state._delta = V.sub(state._movement, _previousMovement);
    this.compute(event);
    this.emit();
  }
  gestureEnd(event) {
    if (!this.state._active)
      return;
    this.state._active = false;
    this.compute(event);
    this.emit();
  }
  wheel(event) {
    const modifierKey = this.config.modifierKey;
    if (modifierKey && !event[modifierKey])
      return;
    if (!this.state._active)
      this.wheelStart(event);
    else
      this.wheelChange(event);
    this.timeoutStore.add("wheelEnd", this.wheelEnd.bind(this));
  }
  wheelStart(event) {
    this.start(event);
    this.wheelChange(event);
  }
  wheelChange(event) {
    const isR3f = "uv" in event;
    if (!isR3f) {
      if (event.cancelable) {
        event.preventDefault();
      }
      if (!event.defaultPrevented) {
        console.warn(`[@use-gesture]: To properly support zoom on trackpads, try using the \`target\` option.

This message will only appear in development mode.`);
      }
    }
    const state = this.state;
    state._delta = [-wheelValues(event)[1] / PINCH_WHEEL_RATIO * state.offset[0], 0];
    V.addTo(state._movement, state._delta);
    this.state.origin = [event.clientX, event.clientY];
    this.compute(event);
    this.emit();
  }
  wheelEnd() {
    if (!this.state._active)
      return;
    this.state._active = false;
    this.compute();
    this.emit();
  }
  bind(bindFunction) {
    const device = this.config.device;
    if (!!device) {
      bindFunction(device, "start", this[device + "Start"].bind(this));
      bindFunction(device, "change", this[device + "Move"].bind(this));
      bindFunction(device, "end", this[device + "End"].bind(this));
      bindFunction(device, "cancel", this[device + "End"].bind(this));
    } else {
      bindFunction("wheel", "", this.wheel.bind(this), {
        passive: false
      });
    }
  }
};
var pinchConfigResolver = _objectSpread2(_objectSpread2({}, commonConfigResolver), {}, {
  device(_v, _k, {
    shared,
    pointer: {
      touch = false
    } = {}
  }) {
    const sharedConfig = shared;
    if (sharedConfig.target && !SUPPORT.touch && SUPPORT.gesture)
      return "gesture";
    if (SUPPORT.touch && touch)
      return "touch";
    if (SUPPORT.touchscreen) {
      if (SUPPORT.pointer)
        return "pointer";
      if (SUPPORT.touch)
        return "touch";
    }
  },
  bounds(_v, _k, {
    scaleBounds = {},
    angleBounds = {}
  }) {
    const _scaleBounds = (state) => {
      const D = assignDefault(call(scaleBounds, state), {
        min: -Infinity,
        max: Infinity
      });
      return [D.min, D.max];
    };
    const _angleBounds = (state) => {
      const A = assignDefault(call(angleBounds, state), {
        min: -Infinity,
        max: Infinity
      });
      return [A.min, A.max];
    };
    if (typeof scaleBounds !== "function" && typeof angleBounds !== "function")
      return [_scaleBounds(), _angleBounds()];
    return (state) => [_scaleBounds(state), _angleBounds(state)];
  },
  threshold(value, _k, config) {
    this.lockDirection = config.axis === "lock";
    const threshold = V.toVector(value, this.lockDirection ? [0.1, 3] : 0);
    return threshold;
  },
  modifierKey(value) {
    if (value === void 0)
      return "ctrlKey";
    return value;
  }
});
var MoveEngine = class extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", "moving");
  }
  move(event) {
    if (this.config.mouseOnly && event.pointerType !== "mouse")
      return;
    if (!this.state._active)
      this.moveStart(event);
    else
      this.moveChange(event);
    this.timeoutStore.add("moveEnd", this.moveEnd.bind(this));
  }
  moveStart(event) {
    this.start(event);
    this.computeValues(pointerValues(event));
    this.compute(event);
    this.computeInitial();
    this.emit();
  }
  moveChange(event) {
    if (!this.state._active)
      return;
    const values = pointerValues(event);
    const state = this.state;
    state._delta = V.sub(values, state._values);
    V.addTo(state._movement, state._delta);
    this.computeValues(values);
    this.compute(event);
    this.emit();
  }
  moveEnd(event) {
    if (!this.state._active)
      return;
    this.state._active = false;
    this.compute(event);
    this.emit();
  }
  bind(bindFunction) {
    bindFunction("pointer", "change", this.move.bind(this));
    bindFunction("pointer", "leave", this.moveEnd.bind(this));
  }
};
var moveConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {
  mouseOnly: (value = true) => value
});
var ScrollEngine = class extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", "scrolling");
  }
  scroll(event) {
    if (!this.state._active)
      this.start(event);
    this.scrollChange(event);
    this.timeoutStore.add("scrollEnd", this.scrollEnd.bind(this));
  }
  scrollChange(event) {
    if (event.cancelable)
      event.preventDefault();
    const state = this.state;
    const values = scrollValues(event);
    state._delta = V.sub(values, state._values);
    V.addTo(state._movement, state._delta);
    this.computeValues(values);
    this.compute(event);
    this.emit();
  }
  scrollEnd() {
    if (!this.state._active)
      return;
    this.state._active = false;
    this.compute();
    this.emit();
  }
  bind(bindFunction) {
    bindFunction("scroll", "", this.scroll.bind(this));
  }
};
var scrollConfigResolver = coordinatesConfigResolver;
var WheelEngine = class extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", "wheeling");
  }
  wheel(event) {
    if (!this.state._active)
      this.start(event);
    this.wheelChange(event);
    this.timeoutStore.add("wheelEnd", this.wheelEnd.bind(this));
  }
  wheelChange(event) {
    const state = this.state;
    state._delta = wheelValues(event);
    V.addTo(state._movement, state._delta);
    const [ox, oy] = state.overflow;
    const [dx, dy] = state._delta;
    const [dirx, diry] = state._direction;
    if (ox < 0 && dx > 0 && dirx < 0 || ox > 0 && dx < 0 && dirx > 0) {
      state._movement[0] = state._movementBound[0];
    }
    if (oy < 0 && dy > 0 && diry < 0 || oy > 0 && dy < 0 && diry > 0) {
      state._movement[1] = state._movementBound[1];
    }
    this.compute(event);
    this.emit();
  }
  wheelEnd() {
    if (!this.state._active)
      return;
    this.state._active = false;
    this.compute();
    this.emit();
  }
  bind(bindFunction) {
    bindFunction("wheel", "", this.wheel.bind(this));
  }
};
var wheelConfigResolver = coordinatesConfigResolver;
var HoverEngine = class extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", "hovering");
  }
  enter(event) {
    if (this.config.mouseOnly && event.pointerType !== "mouse")
      return;
    this.start(event);
    this.computeValues(pointerValues(event));
    this.compute(event);
    this.emit();
  }
  leave(event) {
    if (this.config.mouseOnly && event.pointerType !== "mouse")
      return;
    const state = this.state;
    if (!state._active)
      return;
    state._active = false;
    const values = pointerValues(event);
    state._movement = state._delta = V.sub(values, state._values);
    this.computeValues(values);
    this.compute(event);
    state.delta = state.movement;
    this.emit();
  }
  bind(bindFunction) {
    bindFunction("pointer", "enter", this.enter.bind(this));
    bindFunction("pointer", "leave", this.leave.bind(this));
  }
};
var hoverConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {
  mouseOnly: (value = true) => value
});
var EngineMap = /* @__PURE__ */ new Map();
var ConfigResolverMap = /* @__PURE__ */ new Map();
function registerAction(action) {
  EngineMap.set(action.key, action.engine);
  ConfigResolverMap.set(action.key, action.resolver);
}
var dragAction = {
  key: "drag",
  engine: DragEngine,
  resolver: dragConfigResolver
};
var hoverAction = {
  key: "hover",
  engine: HoverEngine,
  resolver: hoverConfigResolver
};
var moveAction = {
  key: "move",
  engine: MoveEngine,
  resolver: moveConfigResolver
};
var pinchAction = {
  key: "pinch",
  engine: PinchEngine,
  resolver: pinchConfigResolver
};
var scrollAction = {
  key: "scroll",
  engine: ScrollEngine,
  resolver: scrollConfigResolver
};
var wheelAction = {
  key: "wheel",
  engine: WheelEngine,
  resolver: wheelConfigResolver
};

// node_modules/@use-gesture/react/dist/use-gesture-react.esm.js
var import_react = __toESM(require_react());

// node_modules/@use-gesture/core/dist/use-gesture-core.esm.js
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target2 = {};
  var sourceKeys = Object.keys(source);
  var key, i5;
  for (i5 = 0; i5 < sourceKeys.length; i5++) {
    key = sourceKeys[i5];
    if (excluded.indexOf(key) >= 0)
      continue;
    target2[key] = source[key];
  }
  return target2;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target2 = _objectWithoutPropertiesLoose(source, excluded);
  var key, i5;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i5 = 0; i5 < sourceSymbolKeys.length; i5++) {
      key = sourceSymbolKeys[i5];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target2[key] = source[key];
    }
  }
  return target2;
}
var sharedConfigResolver = {
  target(value) {
    if (value) {
      return () => "current" in value ? value.current : value;
    }
    return void 0;
  },
  enabled(value = true) {
    return value;
  },
  window(value = SUPPORT.isBrowser ? window : void 0) {
    return value;
  },
  eventOptions({
    passive = true,
    capture = false
  } = {}) {
    return {
      passive,
      capture
    };
  },
  transform(value) {
    return value;
  }
};
var _excluded = ["target", "eventOptions", "window", "enabled", "transform"];
function resolveWith(config = {}, resolvers) {
  const result = {};
  for (const [key, resolver] of Object.entries(resolvers)) {
    switch (typeof resolver) {
      case "function":
        if (true) {
          const r3 = resolver.call(result, config[key], key, config);
          if (!Number.isNaN(r3))
            result[key] = r3;
        } else {
          result[key] = resolver.call(result, config[key], key, config);
        }
        break;
      case "object":
        result[key] = resolveWith(config[key], resolver);
        break;
      case "boolean":
        if (resolver)
          result[key] = config[key];
        break;
    }
  }
  return result;
}
function parse(config, gestureKey) {
  const _ref = config, {
    target: target2,
    eventOptions,
    window: window2,
    enabled,
    transform
  } = _ref, rest = _objectWithoutProperties(_ref, _excluded);
  const _config = {
    shared: resolveWith({
      target: target2,
      eventOptions,
      window: window2,
      enabled,
      transform
    }, sharedConfigResolver)
  };
  if (gestureKey) {
    const resolver = ConfigResolverMap.get(gestureKey);
    _config[gestureKey] = resolveWith(_objectSpread2({
      shared: _config.shared
    }, rest), resolver);
  } else {
    for (const key in rest) {
      const resolver = ConfigResolverMap.get(key);
      if (resolver) {
        _config[key] = resolveWith(_objectSpread2({
          shared: _config.shared
        }, rest[key]), resolver);
      } else if (true) {
        if (!["drag", "pinch", "scroll", "wheel", "move", "hover"].includes(key)) {
          if (key === "domTarget") {
            throw Error(`[@use-gesture]: \`domTarget\` option has been renamed to \`target\`.`);
          }
          console.warn(`[@use-gesture]: Unknown config key \`${key}\` was used. Please read the documentation for further information.`);
        }
      }
    }
  }
  return _config;
}
var EventStore = class {
  constructor(ctrl, gestureKey) {
    _defineProperty(this, "_listeners", /* @__PURE__ */ new Set());
    this._ctrl = ctrl;
    this._gestureKey = gestureKey;
  }
  add(element, device, action, handler, options) {
    const listeners = this._listeners;
    const type = toDomEventType(device, action);
    const _options = this._gestureKey ? this._ctrl.config[this._gestureKey].eventOptions : {};
    const eventOptions = _objectSpread2(_objectSpread2({}, _options), options);
    element.addEventListener(type, handler, eventOptions);
    const remove = () => {
      element.removeEventListener(type, handler, eventOptions);
      listeners.delete(remove);
    };
    listeners.add(remove);
    return remove;
  }
  clean() {
    this._listeners.forEach((remove) => remove());
    this._listeners.clear();
  }
};
var TimeoutStore = class {
  constructor() {
    _defineProperty(this, "_timeouts", /* @__PURE__ */ new Map());
  }
  add(key, callback, ms = 140, ...args) {
    this.remove(key);
    this._timeouts.set(key, window.setTimeout(callback, ms, ...args));
  }
  remove(key) {
    const timeout = this._timeouts.get(key);
    if (timeout)
      window.clearTimeout(timeout);
  }
  clean() {
    this._timeouts.forEach((timeout) => void window.clearTimeout(timeout));
    this._timeouts.clear();
  }
};
var Controller = class {
  constructor(handlers) {
    _defineProperty(this, "gestures", /* @__PURE__ */ new Set());
    _defineProperty(this, "_targetEventStore", new EventStore(this));
    _defineProperty(this, "gestureEventStores", {});
    _defineProperty(this, "gestureTimeoutStores", {});
    _defineProperty(this, "handlers", {});
    _defineProperty(this, "config", {});
    _defineProperty(this, "pointerIds", /* @__PURE__ */ new Set());
    _defineProperty(this, "touchIds", /* @__PURE__ */ new Set());
    _defineProperty(this, "state", {
      shared: {
        shiftKey: false,
        metaKey: false,
        ctrlKey: false,
        altKey: false
      }
    });
    resolveGestures(this, handlers);
  }
  setEventIds(event) {
    if (isTouch(event)) {
      this.touchIds = new Set(touchIds(event));
      return this.touchIds;
    } else if ("pointerId" in event) {
      if (event.type === "pointerup" || event.type === "pointercancel")
        this.pointerIds.delete(event.pointerId);
      else if (event.type === "pointerdown")
        this.pointerIds.add(event.pointerId);
      return this.pointerIds;
    }
  }
  applyHandlers(handlers, nativeHandlers) {
    this.handlers = handlers;
    this.nativeHandlers = nativeHandlers;
  }
  applyConfig(config, gestureKey) {
    this.config = parse(config, gestureKey);
  }
  clean() {
    this._targetEventStore.clean();
    for (const key of this.gestures) {
      this.gestureEventStores[key].clean();
      this.gestureTimeoutStores[key].clean();
    }
  }
  effect() {
    if (this.config.shared.target)
      this.bind();
    return () => this._targetEventStore.clean();
  }
  bind(...args) {
    const sharedConfig = this.config.shared;
    const props = {};
    let target2;
    if (sharedConfig.target) {
      target2 = sharedConfig.target();
      if (!target2)
        return;
    }
    if (sharedConfig.enabled) {
      for (const gestureKey of this.gestures) {
        const gestureConfig = this.config[gestureKey];
        const bindFunction = bindToProps(props, gestureConfig.eventOptions, !!target2);
        if (gestureConfig.enabled) {
          const Engine2 = EngineMap.get(gestureKey);
          new Engine2(this, args, gestureKey).bind(bindFunction);
        }
      }
      const nativeBindFunction = bindToProps(props, sharedConfig.eventOptions, !!target2);
      for (const eventKey in this.nativeHandlers) {
        nativeBindFunction(eventKey, "", (event) => this.nativeHandlers[eventKey](_objectSpread2(_objectSpread2({}, this.state.shared), {}, {
          event,
          args
        })), void 0, true);
      }
    }
    for (const handlerProp in props) {
      props[handlerProp] = chain(...props[handlerProp]);
    }
    if (!target2)
      return props;
    for (const handlerProp in props) {
      const {
        device,
        capture,
        passive
      } = parseProp(handlerProp);
      this._targetEventStore.add(target2, device, "", props[handlerProp], {
        capture,
        passive
      });
    }
  }
};
function setupGesture(ctrl, gestureKey) {
  ctrl.gestures.add(gestureKey);
  ctrl.gestureEventStores[gestureKey] = new EventStore(ctrl, gestureKey);
  ctrl.gestureTimeoutStores[gestureKey] = new TimeoutStore();
}
function resolveGestures(ctrl, internalHandlers) {
  if (internalHandlers.drag)
    setupGesture(ctrl, "drag");
  if (internalHandlers.wheel)
    setupGesture(ctrl, "wheel");
  if (internalHandlers.scroll)
    setupGesture(ctrl, "scroll");
  if (internalHandlers.move)
    setupGesture(ctrl, "move");
  if (internalHandlers.pinch)
    setupGesture(ctrl, "pinch");
  if (internalHandlers.hover)
    setupGesture(ctrl, "hover");
}
var bindToProps = (props, eventOptions, withPassiveOption) => (device, action, handler, options = {}, isNative = false) => {
  var _options$capture, _options$passive;
  const capture = (_options$capture = options.capture) !== null && _options$capture !== void 0 ? _options$capture : eventOptions.capture;
  const passive = (_options$passive = options.passive) !== null && _options$passive !== void 0 ? _options$passive : eventOptions.passive;
  let handlerProp = isNative ? device : toHandlerProp(device, action, capture);
  if (withPassiveOption && passive)
    handlerProp += "Passive";
  props[handlerProp] = props[handlerProp] || [];
  props[handlerProp].push(handler);
};
var RE_NOT_NATIVE = /^on(Drag|Wheel|Scroll|Move|Pinch|Hover)/;
function sortHandlers(_handlers) {
  const native = {};
  const handlers = {};
  const actions = /* @__PURE__ */ new Set();
  for (let key in _handlers) {
    if (RE_NOT_NATIVE.test(key)) {
      actions.add(RegExp.lastMatch);
      handlers[key] = _handlers[key];
    } else {
      native[key] = _handlers[key];
    }
  }
  return [handlers, native, actions];
}
function registerGesture(actions, handlers, handlerKey, key, internalHandlers, config) {
  if (!actions.has(handlerKey))
    return;
  if (!EngineMap.has(key)) {
    if (true) {
      console.warn(`[@use-gesture]: You've created a custom handler that that uses the \`${key}\` gesture but isn't properly configured.

Please add \`${key}Action\` when creating your handler.`);
    }
    return;
  }
  const startKey = handlerKey + "Start";
  const endKey = handlerKey + "End";
  const fn = (state) => {
    let memo = void 0;
    if (state.first && startKey in handlers)
      handlers[startKey](state);
    if (handlerKey in handlers)
      memo = handlers[handlerKey](state);
    if (state.last && endKey in handlers)
      handlers[endKey](state);
    return memo;
  };
  internalHandlers[key] = fn;
  config[key] = config[key] || {};
}
function parseMergedHandlers(mergedHandlers, mergedConfig) {
  const [handlers, nativeHandlers, actions] = sortHandlers(mergedHandlers);
  const internalHandlers = {};
  registerGesture(actions, handlers, "onDrag", "drag", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onWheel", "wheel", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onScroll", "scroll", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onPinch", "pinch", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onMove", "move", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onHover", "hover", internalHandlers, mergedConfig);
  return {
    handlers: internalHandlers,
    config: mergedConfig,
    nativeHandlers
  };
}

// node_modules/@use-gesture/react/dist/use-gesture-react.esm.js
function useRecognizers(handlers, config = {}, gestureKey, nativeHandlers) {
  const ctrl = import_react.default.useMemo(() => new Controller(handlers), []);
  ctrl.applyHandlers(handlers, nativeHandlers);
  ctrl.applyConfig(config, gestureKey);
  import_react.default.useEffect(ctrl.effect.bind(ctrl));
  import_react.default.useEffect(() => {
    return ctrl.clean.bind(ctrl);
  }, []);
  if (config.target === void 0) {
    return ctrl.bind.bind(ctrl);
  }
  return void 0;
}
function createUseGesture(actions) {
  actions.forEach(registerAction);
  return function useGesture2(_handlers, _config) {
    const {
      handlers,
      nativeHandlers,
      config
    } = parseMergedHandlers(_handlers, _config || {});
    return useRecognizers(handlers, config, void 0, nativeHandlers);
  };
}
function useGesture(handlers, config) {
  const hook = createUseGesture([dragAction, pinchAction, scrollAction, wheelAction, moveAction, hoverAction]);
  return hook(handlers, config || {});
}

// node_modules/@react-three/drei/web/PresentationControls.js
function PresentationControls({
  snap,
  global: global2,
  cursor = true,
  children,
  speed = 1,
  rotation: rotation2 = [0, 0, 0],
  zoom = 1,
  polar = [0, Math.PI / 2],
  azimuth = [-Infinity, Infinity],
  config = {
    mass: 1,
    tension: 170,
    friction: 26
  }
}) {
  const {
    size,
    gl
  } = useThree();
  const rPolar = React7.useMemo(() => [rotation2[0] + polar[0], rotation2[0] + polar[1]], [rotation2[0], polar[0], polar[1]]);
  const rAzimuth = React7.useMemo(() => [rotation2[1] + azimuth[0], rotation2[1] + azimuth[1]], [rotation2[1], azimuth[0], azimuth[1]]);
  const rInitial = React7.useMemo(() => [MathUtils.clamp(rotation2[0], ...rPolar), MathUtils.clamp(rotation2[1], ...rAzimuth), rotation2[2]], [rotation2[0], rotation2[1], rotation2[2], rPolar, rAzimuth]);
  const [spring, api] = useSpring(() => ({
    scale: 1,
    rotation: rInitial,
    config
  }));
  React7.useEffect(() => void api.start({
    scale: 1,
    rotation: rInitial,
    config
  }), [rInitial]);
  React7.useEffect(() => {
    if (global2 && cursor)
      gl.domElement.style.cursor = "grab";
  }, [global2, cursor, gl.domElement]);
  const bind = useGesture({
    onHover: ({
      last
    }) => {
      if (cursor && !global2)
        gl.domElement.style.cursor = last ? "auto" : "grab";
    },
    onDrag: ({
      down,
      delta: [x, y],
      memo: [oldY, oldX] = spring.rotation.animation.to || rInitial
    }) => {
      if (cursor)
        gl.domElement.style.cursor = down ? "grabbing" : "grab";
      x = MathUtils.clamp(oldX + x / size.width * Math.PI * speed, ...rAzimuth);
      y = MathUtils.clamp(oldY + y / size.height * Math.PI * speed, ...rPolar);
      const sConfig = snap && !down && typeof snap !== "boolean" ? snap : config;
      api.start({
        scale: down && y > rPolar[1] / 2 ? zoom : 1,
        rotation: snap && !down ? rInitial : [y, x, 0],
        config: (n2) => n2 === "scale" ? __spreadProps(__spreadValues({}, sConfig), {
          friction: sConfig.friction * 3
        }) : sConfig
      });
      return [y, x];
    }
  }, {
    target: global2 ? gl.domElement : void 0
  });
  return React7.createElement(animated.group, _extends({}, bind == null ? void 0 : bind(), spring), children);
}

// node_modules/@react-three/drei/web/Select.js
init_extends();
var React8 = __toESM(require_react());
init_three_module();
init_react_three_fiber_esm();

// node_modules/zustand/esm/shallow.js
function shallow(objA, objB) {
  if (Object.is(objA, objB)) {
    return true;
  }
  if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
    return false;
  }
  const keysA = Object.keys(objA);
  if (keysA.length !== Object.keys(objB).length) {
    return false;
  }
  for (let i5 = 0; i5 < keysA.length; i5++) {
    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i5]) || !Object.is(objA[keysA[i5]], objB[keysA[i5]])) {
      return false;
    }
  }
  return true;
}

// node_modules/@react-three/drei/web/Select.js
var context3 = React8.createContext([]);
function Select(_a) {
  var _b = _a, {
    box,
    multiple,
    children,
    onChange,
    border = "1px solid #55aaff",
    backgroundColor = "rgba(75, 160, 255, 0.1)",
    filter: customFilter = (item) => item
  } = _b, props = __objRest(_b, [
    "box",
    "multiple",
    "children",
    "onChange",
    "border",
    "backgroundColor",
    "filter"
  ]);
  const {
    setEvents,
    camera,
    raycaster,
    gl,
    controls,
    size,
    get
  } = useThree();
  const [hovered, hover] = React8.useState(false);
  const [active, dispatch] = React8.useReducer((state, {
    object,
    shift
  }) => {
    if (object === void 0)
      return [];
    else if (Array.isArray(object))
      return object;
    else if (!shift)
      return state[0] === object ? [] : [object];
    else if (state.includes(object))
      return state.filter((o2) => o2 !== object);
    else
      return [object, ...state];
  }, []);
  React8.useEffect(() => void (onChange == null ? void 0 : onChange(active)), [active]);
  const onClick = React8.useCallback((e3) => {
    e3.stopPropagation();
    dispatch({
      object: customFilter([e3.object])[0],
      shift: multiple && e3.shiftKey
    });
  }, []);
  const onPointerMissed = React8.useCallback((e3) => !hovered && dispatch({}), [hovered]);
  const ref = React8.useRef(null);
  React8.useEffect(() => {
    if (!box || !multiple)
      return;
    const selBox = new SelectionBox(camera, ref.current);
    const element = document.createElement("div");
    element.style.pointerEvents = "none";
    element.style.border = border;
    element.style.backgroundColor = backgroundColor;
    element.style.position = "fixed";
    const startPoint = new Vector2();
    const pointTopLeft = new Vector2();
    const pointBottomRight = new Vector2();
    const oldRaycasterEnabled = get().events.enabled;
    const oldControlsEnabled = controls == null ? void 0 : controls.enabled;
    let isDown = false;
    function prepareRay(event, vec2) {
      const {
        offsetX,
        offsetY
      } = event;
      const {
        width,
        height
      } = size;
      vec2.set(offsetX / width * 2 - 1, -(offsetY / height) * 2 + 1);
    }
    function onSelectStart(event) {
      var _gl$domElement$parent;
      if (controls)
        controls.enabled = false;
      setEvents({
        enabled: false
      });
      isDown = true;
      (_gl$domElement$parent = gl.domElement.parentElement) == null ? void 0 : _gl$domElement$parent.appendChild(element);
      element.style.left = `${event.clientX}px`;
      element.style.top = `${event.clientY}px`;
      element.style.width = "0px";
      element.style.height = "0px";
      startPoint.x = event.clientX;
      startPoint.y = event.clientY;
    }
    function onSelectMove(event) {
      pointBottomRight.x = Math.max(startPoint.x, event.clientX);
      pointBottomRight.y = Math.max(startPoint.y, event.clientY);
      pointTopLeft.x = Math.min(startPoint.x, event.clientX);
      pointTopLeft.y = Math.min(startPoint.y, event.clientY);
      element.style.left = `${pointTopLeft.x}px`;
      element.style.top = `${pointTopLeft.y}px`;
      element.style.width = `${pointBottomRight.x - pointTopLeft.x}px`;
      element.style.height = `${pointBottomRight.y - pointTopLeft.y}px`;
    }
    function onSelectOver() {
      if (isDown) {
        var _element$parentElemen;
        if (controls)
          controls.enabled = oldControlsEnabled;
        setEvents({
          enabled: oldRaycasterEnabled
        });
        isDown = false;
        (_element$parentElemen = element.parentElement) == null ? void 0 : _element$parentElemen.removeChild(element);
      }
    }
    function pointerDown(event) {
      if (event.shiftKey) {
        onSelectStart(event);
        prepareRay(event, selBox.startPoint);
      }
    }
    let previous = [];
    function pointerMove(event) {
      if (isDown) {
        onSelectMove(event);
        prepareRay(event, selBox.endPoint);
        const allSelected = selBox.select().sort((o2) => o2.uuid).filter((o2) => o2.isMesh);
        if (!shallow(allSelected, previous)) {
          previous = allSelected;
          dispatch({
            object: customFilter(allSelected)
          });
        }
      }
    }
    function pointerUp(event) {
      if (isDown)
        onSelectOver();
    }
    document.addEventListener("pointerdown", pointerDown, {
      passive: true
    });
    document.addEventListener("pointermove", pointerMove, {
      passive: true,
      capture: true
    });
    document.addEventListener("pointerup", pointerUp, {
      passive: true
    });
    return () => {
      document.removeEventListener("pointerdown", pointerDown);
      document.removeEventListener("pointermove", pointerMove);
      document.removeEventListener("pointerup", pointerUp);
    };
  }, [size, raycaster, camera, controls, gl]);
  return React8.createElement("group", _extends({
    ref,
    onClick,
    onPointerOver: () => hover(true),
    onPointerOut: () => hover(false),
    onPointerMissed
  }, props), React8.createElement(context3.Provider, {
    value: active
  }, children));
}
function useSelect() {
  return React8.useContext(context3);
}

// node_modules/@react-three/drei/core/Billboard.js
init_extends();
var React9 = __toESM(require_react());
init_react_three_fiber_esm();
var Billboard = React9.forwardRef(function Billboard2(_a, ref) {
  var _b = _a, {
    follow = true,
    lockX = false,
    lockY = false,
    lockZ = false
  } = _b, props = __objRest(_b, [
    "follow",
    "lockX",
    "lockY",
    "lockZ"
  ]);
  const localRef = React9.useRef();
  useFrame(({
    camera
  }) => {
    if (!follow || !localRef.current)
      return;
    const prevRotation = localRef.current.rotation.clone();
    localRef.current.quaternion.copy(camera.quaternion);
    if (lockX)
      localRef.current.rotation.x = prevRotation.x;
    if (lockY)
      localRef.current.rotation.y = prevRotation.y;
    if (lockZ)
      localRef.current.rotation.z = prevRotation.z;
  });
  return React9.createElement("group", _extends({
    ref: react_merge_refs_esm_default([localRef, ref])
  }, props));
});

// node_modules/@react-three/drei/core/QuadraticBezierLine.js
init_extends();
var React11 = __toESM(require_react());
init_three_module();

// node_modules/@react-three/drei/core/Line.js
init_extends();
var React10 = __toESM(require_react());
init_three_module();
var Line = React10.forwardRef(function Line4(_a, ref) {
  var _b = _a, {
    points,
    color = "black",
    vertexColors,
    lineWidth,
    dashed
  } = _b, rest = __objRest(_b, [
    "points",
    "color",
    "vertexColors",
    "lineWidth",
    "dashed"
  ]);
  const [line2] = React10.useState(() => new Line2());
  const [lineMaterial] = React10.useState(() => new LineMaterial());
  const [resolution] = React10.useState(() => new Vector2(512, 512));
  const lineGeom = React10.useMemo(() => {
    const geom = new LineGeometry();
    const pValues = points.map((p) => p instanceof Vector3 ? p.toArray() : p);
    geom.setPositions(pValues.flat());
    if (vertexColors) {
      const cValues = vertexColors.map((c2) => c2 instanceof Color ? c2.toArray() : c2);
      geom.setColors(cValues.flat());
    }
    return geom;
  }, [points, vertexColors]);
  React10.useLayoutEffect(() => {
    line2.computeLineDistances();
  }, [points, line2]);
  React10.useLayoutEffect(() => {
    if (dashed) {
      lineMaterial.defines.USE_DASH = "";
    } else {
      delete lineMaterial.defines.USE_DASH;
    }
    lineMaterial.needsUpdate = true;
  }, [dashed, lineMaterial]);
  React10.useEffect(() => {
    return () => lineGeom.dispose();
  }, [lineGeom]);
  return React10.createElement("primitive", _extends({
    object: line2,
    ref
  }, rest), React10.createElement("primitive", {
    object: lineGeom,
    attach: "geometry"
  }), React10.createElement("primitive", _extends({
    object: lineMaterial,
    attach: "material",
    color,
    vertexColors: Boolean(vertexColors),
    resolution,
    linewidth: lineWidth,
    dashed
  }, rest)));
});

// node_modules/@react-three/drei/core/QuadraticBezierLine.js
var v = new Vector3();
var QuadraticBezierLine = React11.forwardRef(function QuadraticBezierLine2(_a, forwardref) {
  var _b = _a, {
    start = [0, 0, 0],
    end = [0, 0, 0],
    mid,
    segments = 20
  } = _b, rest = __objRest(_b, [
    "start",
    "end",
    "mid",
    "segments"
  ]);
  const ref = React11.useRef(null);
  const [curve] = React11.useState(() => new QuadraticBezierCurve3(void 0, void 0, void 0));
  const getPoints = React11.useCallback((start2, end2, mid2, segments2 = 20) => {
    if (start2 instanceof Vector3)
      curve.v0.copy(start2);
    else
      curve.v0.set(...start2);
    if (end2 instanceof Vector3)
      curve.v2.copy(end2);
    else
      curve.v2.set(...end2);
    if (mid2 instanceof Vector3) {
      curve.v1.copy(mid2);
    } else {
      curve.v1.copy(curve.v0.clone().add(curve.v2.clone().sub(curve.v0)).add(v.set(0, curve.v0.y - curve.v2.y, 0)));
    }
    return curve.getPoints(segments2);
  }, []);
  React11.useLayoutEffect(() => {
    ref.current.setPoints = (start2, end2, mid2) => {
      const points2 = getPoints(start2, end2, mid2);
      if (ref.current.geometry)
        ref.current.geometry.setPositions(points2.map((p) => p.toArray()).flat());
    };
  }, []);
  const points = React11.useMemo(() => getPoints(start, end, mid, segments), [start, end, mid, segments]);
  return React11.createElement(Line, _extends({
    ref: react_merge_refs_esm_default([ref, forwardref]),
    points
  }, rest));
});

// node_modules/@react-three/drei/core/CubicBezierLine.js
init_extends();
var React12 = __toESM(require_react());
init_three_module();
var CubicBezierLine = React12.forwardRef(function CubicBezierLine2(_a, ref) {
  var _b = _a, {
    start,
    end,
    midA,
    midB,
    segments = 20
  } = _b, rest = __objRest(_b, [
    "start",
    "end",
    "midA",
    "midB",
    "segments"
  ]);
  const points = React12.useMemo(() => {
    const startV = start instanceof Vector3 ? start : new Vector3(...start);
    const endV = end instanceof Vector3 ? end : new Vector3(...end);
    const midAV = midA instanceof Vector3 ? midA : new Vector3(...midA);
    const midBV = midB instanceof Vector3 ? midB : new Vector3(...midB);
    const interpolatedV = new CubicBezierCurve3(startV, midAV, midBV, endV).getPoints(segments);
    return interpolatedV;
  }, [start, end, midA, midB, segments]);
  return React12.createElement(Line, _extends({
    ref,
    points
  }, rest));
});

// node_modules/@react-three/drei/core/PositionalAudio.js
init_extends();
var React13 = __toESM(require_react());
init_three_module();
init_react_three_fiber_esm();
var PositionalAudio = React13.forwardRef((_a, ref) => {
  var _b = _a, {
    url,
    distance = 1,
    loop = true,
    autoplay
  } = _b, props = __objRest(_b, [
    "url",
    "distance",
    "loop",
    "autoplay"
  ]);
  const sound = React13.useRef();
  const camera = useThree(({
    camera: camera2
  }) => camera2);
  const [listener] = React13.useState(() => new AudioListener());
  const buffer = useLoader(AudioLoader, url);
  React13.useEffect(() => {
    const _sound = sound.current;
    if (_sound) {
      _sound.setBuffer(buffer);
      _sound.setRefDistance(distance);
      _sound.setLoop(loop);
      if (autoplay && !_sound.isPlaying)
        _sound.play();
    }
  }, [buffer, camera, distance, loop]);
  React13.useEffect(() => {
    const _sound = sound.current;
    camera.add(listener);
    return () => {
      camera.remove(listener);
      if (_sound) {
        if (_sound.isPlaying)
          _sound.stop();
        if (_sound.source && _sound.source._connected)
          _sound.disconnect();
      }
    };
  }, []);
  return React13.createElement("positionalAudio", _extends({
    ref: react_merge_refs_esm_default([sound, ref]),
    args: [listener]
  }, props));
});

// node_modules/@react-three/drei/core/Text.js
init_extends();
var React14 = __toESM(require_react());

// node_modules/troika-three-text/dist/troika-three-text.esm.js
init_three_module();

// node_modules/troika-worker-utils/dist/troika-worker-utils.esm.js
function BespokeThenable() {
  var state = 0;
  var queue = [];
  var value;
  var scheduled = 0;
  var completeCalled = 0;
  function then(onResolve, onReject) {
    var nextThenable = BespokeThenable();
    function handleNext() {
      var cb = state > 0 ? onResolve : onReject;
      if (isFn(cb)) {
        try {
          var result = cb(value);
          if (result === nextThenable) {
            recursiveError();
          }
          var resultThen = getThenableThen(result);
          if (resultThen) {
            resultThen.call(result, nextThenable.resolve, nextThenable.reject);
          } else {
            nextThenable.resolve(result);
          }
        } catch (err) {
          nextThenable.reject(err);
        }
      } else {
        nextThenable[state > 0 ? "resolve" : "reject"](value);
      }
    }
    queue.push(handleNext);
    if (state) {
      scheduleQueueFlush();
    }
    return nextThenable;
  }
  var resolve = oneTime(function(val) {
    if (!completeCalled) {
      complete(1, val);
    }
  });
  var reject = oneTime(function(reason) {
    if (!completeCalled) {
      complete(-1, reason);
    }
  });
  function complete(st, val) {
    completeCalled++;
    var ignoreThrow = 0;
    try {
      if (val === thenableObj) {
        recursiveError();
      }
      var valThen = st > 0 && getThenableThen(val);
      if (valThen) {
        valThen.call(val, oneTime(function(v4) {
          ignoreThrow++;
          complete(1, v4);
        }), oneTime(function(v4) {
          ignoreThrow++;
          complete(-1, v4);
        }));
      } else {
        state = st;
        value = val;
        scheduleQueueFlush();
      }
    } catch (e3) {
      if (!state && !ignoreThrow) {
        complete(-1, e3);
      }
    }
  }
  function scheduleQueueFlush() {
    if (!scheduled) {
      setTimeout(flushQueue, 0);
      scheduled = 1;
    }
  }
  function flushQueue() {
    var q = queue;
    scheduled = 0;
    queue = [];
    q.forEach(callIt);
  }
  function callIt(fn) {
    fn();
  }
  function getThenableThen(val) {
    var valThen = val && (isFn(val) || typeof val === "object") && val.then;
    return isFn(valThen) && valThen;
  }
  function oneTime(fn) {
    var called = 0;
    return function() {
      var args = [], len = arguments.length;
      while (len--)
        args[len] = arguments[len];
      if (!called++) {
        fn.apply(this, args);
      }
    };
  }
  function recursiveError() {
    throw new TypeError("Chaining cycle detected");
  }
  var isFn = function(v4) {
    return typeof v4 === "function";
  };
  var thenableObj = {
    then,
    resolve,
    reject
  };
  return thenableObj;
}
function NativePromiseThenable() {
  var resolve, reject;
  var promise = new Promise(function(res, rej) {
    resolve = res;
    reject = rej;
  });
  return {
    then: promise.then.bind(promise),
    resolve,
    reject
  };
}
BespokeThenable.all = NativePromiseThenable.all = function(items) {
  var resultCount = 0;
  var results = [];
  var out = DefaultThenable();
  if (items.length === 0) {
    out.resolve([]);
  } else {
    items.forEach(function(item, i5) {
      var itemThenable = DefaultThenable();
      itemThenable.resolve(item);
      itemThenable.then(function(res) {
        resultCount++;
        results[i5] = res;
        if (resultCount === items.length) {
          out.resolve(results);
        }
      }, out.reject);
    });
  }
  return out;
};
var DefaultThenable = typeof Promise === "function" ? NativePromiseThenable : BespokeThenable;
function workerBootstrap() {
  var modules = /* @__PURE__ */ Object.create(null);
  function registerModule(ref, callback) {
    var id = ref.id;
    var name = ref.name;
    var dependencies = ref.dependencies;
    if (dependencies === void 0)
      dependencies = [];
    var init = ref.init;
    if (init === void 0)
      init = function() {
      };
    var getTransferables = ref.getTransferables;
    if (getTransferables === void 0)
      getTransferables = null;
    if (modules[id]) {
      return;
    }
    try {
      dependencies = dependencies.map(function(dep) {
        if (dep && dep.isWorkerModule) {
          registerModule(dep, function(depResult) {
            if (depResult instanceof Error) {
              throw depResult;
            }
          });
          dep = modules[dep.id].value;
        }
        return dep;
      });
      init = rehydrate("<" + name + ">.init", init);
      if (getTransferables) {
        getTransferables = rehydrate("<" + name + ">.getTransferables", getTransferables);
      }
      var value = null;
      if (typeof init === "function") {
        value = init.apply(void 0, dependencies);
      } else {
        console.error("worker module init function failed to rehydrate");
      }
      modules[id] = {
        id,
        value,
        getTransferables
      };
      callback(value);
    } catch (err) {
      if (!(err && err.noLog)) {
        console.error(err);
      }
      callback(err);
    }
  }
  function callModule(ref, callback) {
    var ref$1;
    var id = ref.id;
    var args = ref.args;
    if (!modules[id] || typeof modules[id].value !== "function") {
      callback(new Error("Worker module " + id + ": not found or its 'init' did not return a function"));
    }
    try {
      var result = (ref$1 = modules[id]).value.apply(ref$1, args);
      if (result && typeof result.then === "function") {
        result.then(handleResult, function(rej) {
          return callback(rej instanceof Error ? rej : new Error("" + rej));
        });
      } else {
        handleResult(result);
      }
    } catch (err) {
      callback(err);
    }
    function handleResult(result2) {
      try {
        var tx = modules[id].getTransferables && modules[id].getTransferables(result2);
        if (!tx || !Array.isArray(tx) || !tx.length) {
          tx = void 0;
        }
        callback(result2, tx);
      } catch (err) {
        console.error(err);
        callback(err);
      }
    }
  }
  function rehydrate(name, str) {
    var result = void 0;
    self.troikaDefine = function(r3) {
      return result = r3;
    };
    var url = URL.createObjectURL(new Blob(["/** " + name.replace(/\*/g, "") + " **/\n\ntroikaDefine(\n" + str + "\n)"], { type: "application/javascript" }));
    try {
      importScripts(url);
    } catch (err) {
      console.error(err);
    }
    URL.revokeObjectURL(url);
    delete self.troikaDefine;
    return result;
  }
  self.addEventListener("message", function(e3) {
    var ref = e3.data;
    var messageId = ref.messageId;
    var action = ref.action;
    var data = ref.data;
    try {
      if (action === "registerModule") {
        registerModule(data, function(result) {
          if (result instanceof Error) {
            postMessage({
              messageId,
              success: false,
              error: result.message
            });
          } else {
            postMessage({
              messageId,
              success: true,
              result: { isCallable: typeof result === "function" }
            });
          }
        });
      }
      if (action === "callModule") {
        callModule(data, function(result, transferables) {
          if (result instanceof Error) {
            postMessage({
              messageId,
              success: false,
              error: result.message
            });
          } else {
            postMessage({
              messageId,
              success: true,
              result
            }, transferables || void 0);
          }
        });
      }
    } catch (err) {
      postMessage({
        messageId,
        success: false,
        error: err.stack
      });
    }
  });
}
function defineMainThreadModule(options) {
  var moduleFunc = function() {
    var args = [], len = arguments.length;
    while (len--)
      args[len] = arguments[len];
    return moduleFunc._getInitResult().then(function(initResult) {
      if (typeof initResult === "function") {
        return initResult.apply(void 0, args);
      } else {
        throw new Error("Worker module function was called but `init` did not return a callable function");
      }
    });
  };
  moduleFunc._getInitResult = function() {
    var dependencies = options.dependencies;
    var init = options.init;
    dependencies = Array.isArray(dependencies) ? dependencies.map(function(dep) {
      return dep && dep._getInitResult ? dep._getInitResult() : dep;
    }) : [];
    var initThenable = DefaultThenable.all(dependencies).then(function(deps) {
      return init.apply(null, deps);
    });
    moduleFunc._getInitResult = function() {
      return initThenable;
    };
    return initThenable;
  };
  return moduleFunc;
}
var supportsWorkers = function() {
  var supported = false;
  if (typeof window !== "undefined" && typeof window.document !== "undefined") {
    try {
      var worker = new Worker(URL.createObjectURL(new Blob([""], { type: "application/javascript" })));
      worker.terminate();
      supported = true;
    } catch (err) {
      if (typeof process !== "undefined" && false)
        ;
      else {
        console.log("Troika createWorkerModule: web workers not allowed; falling back to main thread execution. Cause: [" + err.message + "]");
      }
    }
  }
  supportsWorkers = function() {
    return supported;
  };
  return supported;
};
var _workerModuleId = 0;
var _messageId = 0;
var _allowInitAsString = false;
var workers = /* @__PURE__ */ Object.create(null);
var registeredModules = /* @__PURE__ */ Object.create(null);
var openRequests = /* @__PURE__ */ Object.create(null);
function defineWorkerModule(options) {
  if ((!options || typeof options.init !== "function") && !_allowInitAsString) {
    throw new Error("requires `options.init` function");
  }
  var dependencies = options.dependencies;
  var init = options.init;
  var getTransferables = options.getTransferables;
  var workerId = options.workerId;
  if (!supportsWorkers()) {
    return defineMainThreadModule(options);
  }
  if (workerId == null) {
    workerId = "#default";
  }
  var id = "workerModule" + ++_workerModuleId;
  var name = options.name || id;
  var registrationThenable = null;
  dependencies = dependencies && dependencies.map(function(dep) {
    if (typeof dep === "function" && !dep.workerModuleData) {
      _allowInitAsString = true;
      dep = defineWorkerModule({
        workerId,
        name: "<" + name + "> function dependency: " + dep.name,
        init: "function(){return (\n" + stringifyFunction(dep) + "\n)}"
      });
      _allowInitAsString = false;
    }
    if (dep && dep.workerModuleData) {
      dep = dep.workerModuleData;
    }
    return dep;
  });
  function moduleFunc() {
    var args = [], len = arguments.length;
    while (len--)
      args[len] = arguments[len];
    if (!registrationThenable) {
      registrationThenable = callWorker(workerId, "registerModule", moduleFunc.workerModuleData);
      var unregister = function() {
        registrationThenable = null;
        registeredModules[workerId].delete(unregister);
      };
      (registeredModules[workerId] || (registeredModules[workerId] = /* @__PURE__ */ new Set())).add(unregister);
    }
    return registrationThenable.then(function(ref) {
      var isCallable = ref.isCallable;
      if (isCallable) {
        return callWorker(workerId, "callModule", { id, args });
      } else {
        throw new Error("Worker module function was called but `init` did not return a callable function");
      }
    });
  }
  moduleFunc.workerModuleData = {
    isWorkerModule: true,
    id,
    name,
    dependencies,
    init: stringifyFunction(init),
    getTransferables: getTransferables && stringifyFunction(getTransferables)
  };
  return moduleFunc;
}
function terminateWorker(workerId) {
  if (registeredModules[workerId]) {
    registeredModules[workerId].forEach(function(unregister) {
      unregister();
    });
  }
  if (workers[workerId]) {
    workers[workerId].terminate();
    delete workers[workerId];
  }
}
function stringifyFunction(fn) {
  var str = fn.toString();
  if (!/^function/.test(str) && /^\w+\s*\(/.test(str)) {
    str = "function " + str;
  }
  return str;
}
function getWorker(workerId) {
  var worker = workers[workerId];
  if (!worker) {
    var bootstrap = stringifyFunction(workerBootstrap);
    worker = workers[workerId] = new Worker(URL.createObjectURL(new Blob(["/** Worker Module Bootstrap: " + workerId.replace(/\*/g, "") + " **/\n\n;(" + bootstrap + ")()"], { type: "application/javascript" })));
    worker.onmessage = function(e3) {
      var response = e3.data;
      var msgId = response.messageId;
      var callback = openRequests[msgId];
      if (!callback) {
        throw new Error("WorkerModule response with empty or unknown messageId");
      }
      delete openRequests[msgId];
      callback(response);
    };
  }
  return worker;
}
function callWorker(workerId, action, data) {
  var thenable = DefaultThenable();
  var messageId = ++_messageId;
  openRequests[messageId] = function(response) {
    if (response.success) {
      thenable.resolve(response.result);
    } else {
      thenable.reject(new Error("Error in worker " + action + " call: " + response.error));
    }
  };
  getWorker(workerId).postMessage({
    messageId,
    action,
    data
  });
  return thenable;
}
var ThenableWorkerModule = defineWorkerModule({
  name: "Thenable",
  dependencies: [DefaultThenable],
  init: function(Thenable) {
    return Thenable;
  }
});

// node_modules/webgl-sdf-generator/dist/webgl-sdf-generator.mjs
function SDFGenerator() {
  var exports = function(exports2) {
    function pointOnQuadraticBezier(x0, y0, x1, y1, x2, y2, t2, pointOut) {
      var t22 = 1 - t2;
      pointOut.x = t22 * t22 * x0 + 2 * t22 * t2 * x1 + t2 * t2 * x2;
      pointOut.y = t22 * t22 * y0 + 2 * t22 * t2 * y1 + t2 * t2 * y2;
    }
    function pointOnCubicBezier(x0, y0, x1, y1, x2, y2, x3, y3, t2, pointOut) {
      var t22 = 1 - t2;
      pointOut.x = t22 * t22 * t22 * x0 + 3 * t22 * t22 * t2 * x1 + 3 * t22 * t2 * t2 * x2 + t2 * t2 * t2 * x3;
      pointOut.y = t22 * t22 * t22 * y0 + 3 * t22 * t22 * t2 * y1 + 3 * t22 * t2 * t2 * y2 + t2 * t2 * t2 * y3;
    }
    function forEachPathCommand(pathString, commandCallback) {
      var segmentRE = /([MLQCZ])([^MLQCZ]*)/g;
      var match, firstX, firstY, prevX, prevY;
      while (match = segmentRE.exec(pathString)) {
        var args = match[2].replace(/^\s*|\s*$/g, "").split(/[,\s]+/).map(function(v4) {
          return parseFloat(v4);
        });
        switch (match[1]) {
          case "M":
            prevX = firstX = args[0];
            prevY = firstY = args[1];
            break;
          case "L":
            if (args[0] !== prevX || args[1] !== prevY) {
              commandCallback("L", prevX, prevY, prevX = args[0], prevY = args[1]);
            }
            break;
          case "Q": {
            commandCallback("Q", prevX, prevY, prevX = args[2], prevY = args[3], args[0], args[1]);
            break;
          }
          case "C": {
            commandCallback("C", prevX, prevY, prevX = args[4], prevY = args[5], args[0], args[1], args[2], args[3]);
            break;
          }
          case "Z":
            if (prevX !== firstX || prevY !== firstY) {
              commandCallback("L", prevX, prevY, firstX, firstY);
            }
            break;
        }
      }
    }
    function pathToLineSegments(pathString, segmentCallback, curvePoints) {
      if (curvePoints === void 0)
        curvePoints = 16;
      var tempPoint = { x: 0, y: 0 };
      forEachPathCommand(pathString, function(command, startX, startY, endX, endY, ctrl1X, ctrl1Y, ctrl2X, ctrl2Y) {
        switch (command) {
          case "L":
            segmentCallback(startX, startY, endX, endY);
            break;
          case "Q": {
            var prevCurveX = startX;
            var prevCurveY = startY;
            for (var i5 = 1; i5 < curvePoints; i5++) {
              pointOnQuadraticBezier(startX, startY, ctrl1X, ctrl1Y, endX, endY, i5 / (curvePoints - 1), tempPoint);
              segmentCallback(prevCurveX, prevCurveY, tempPoint.x, tempPoint.y);
              prevCurveX = tempPoint.x;
              prevCurveY = tempPoint.y;
            }
            break;
          }
          case "C": {
            var prevCurveX$1 = startX;
            var prevCurveY$1 = startY;
            for (var i$1 = 1; i$1 < curvePoints; i$1++) {
              pointOnCubicBezier(startX, startY, ctrl1X, ctrl1Y, ctrl2X, ctrl2Y, endX, endY, i$1 / (curvePoints - 1), tempPoint);
              segmentCallback(prevCurveX$1, prevCurveY$1, tempPoint.x, tempPoint.y);
              prevCurveX$1 = tempPoint.x;
              prevCurveY$1 = tempPoint.y;
            }
            break;
          }
        }
      });
    }
    var viewportQuadVertex = "precision highp float;attribute vec2 aUV;varying vec2 vUV;void main(){vUV=aUV;gl_Position=vec4(mix(vec2(-1.0),vec2(1.0),aUV),0.0,1.0);}";
    var copyTexFragment = "precision highp float;uniform sampler2D tex;varying vec2 vUV;void main(){gl_FragColor=texture2D(tex,vUV);}";
    var cache = /* @__PURE__ */ new WeakMap();
    var glContextParams = {
      premultipliedAlpha: false,
      preserveDrawingBuffer: true,
      antialias: false,
      depth: false
    };
    function withWebGLContext(glOrCanvas, callback) {
      var gl = glOrCanvas.getContext ? glOrCanvas.getContext("webgl", glContextParams) : glOrCanvas;
      var wrapper = cache.get(gl);
      if (!wrapper) {
        let getExtension = function(name) {
          var ext = extensions2[name];
          if (!ext) {
            ext = extensions2[name] = gl.getExtension(name);
            if (!ext) {
              throw new Error(name + " not supported");
            }
          }
          return ext;
        }, compileShader = function(src, type) {
          var shader = gl.createShader(type);
          gl.shaderSource(shader, src);
          gl.compileShader(shader);
          return shader;
        }, withProgram = function(name, vert, frag, func) {
          if (!programs[name]) {
            var attributes = {};
            var uniforms = {};
            var program = gl.createProgram();
            gl.attachShader(program, compileShader(vert, gl.VERTEX_SHADER));
            gl.attachShader(program, compileShader(frag, gl.FRAGMENT_SHADER));
            gl.linkProgram(program);
            programs[name] = {
              program,
              transaction: function transaction(func2) {
                gl.useProgram(program);
                func2({
                  setUniform: function setUniform(type, name2) {
                    var values = [], len = arguments.length - 2;
                    while (len-- > 0)
                      values[len] = arguments[len + 2];
                    var uniformLoc = uniforms[name2] || (uniforms[name2] = gl.getUniformLocation(program, name2));
                    gl["uniform" + type].apply(gl, [uniformLoc].concat(values));
                  },
                  setAttribute: function setAttribute(name2, size, usage, instancingDivisor, data) {
                    var attr = attributes[name2];
                    if (!attr) {
                      attr = attributes[name2] = {
                        buf: gl.createBuffer(),
                        loc: gl.getAttribLocation(program, name2),
                        data: null
                      };
                    }
                    gl.bindBuffer(gl.ARRAY_BUFFER, attr.buf);
                    gl.vertexAttribPointer(attr.loc, size, gl.FLOAT, false, 0, 0);
                    gl.enableVertexAttribArray(attr.loc);
                    if (isWebGL2) {
                      gl.vertexAttribDivisor(attr.loc, instancingDivisor);
                    } else {
                      getExtension("ANGLE_instanced_arrays").vertexAttribDivisorANGLE(attr.loc, instancingDivisor);
                    }
                    if (data !== attr.data) {
                      gl.bufferData(gl.ARRAY_BUFFER, data, usage);
                      attr.data = data;
                    }
                  }
                });
              }
            };
          }
          programs[name].transaction(func);
        }, withTexture = function(name, func) {
          textureUnit++;
          try {
            gl.activeTexture(gl.TEXTURE0 + textureUnit);
            var texture = textures[name];
            if (!texture) {
              texture = textures[name] = gl.createTexture();
              gl.bindTexture(gl.TEXTURE_2D, texture);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
              gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
            }
            gl.bindTexture(gl.TEXTURE_2D, texture);
            func(texture, textureUnit);
          } finally {
            textureUnit--;
          }
        }, withTextureFramebuffer = function(texture, textureUnit2, func) {
          var framebuffer = gl.createFramebuffer();
          framebufferStack.push(framebuffer);
          gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
          gl.activeTexture(gl.TEXTURE0 + textureUnit2);
          gl.bindTexture(gl.TEXTURE_2D, texture);
          gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
          try {
            func(framebuffer);
          } finally {
            gl.deleteFramebuffer(framebuffer);
            gl.bindFramebuffer(gl.FRAMEBUFFER, framebufferStack[--framebufferStack.length - 1] || null);
          }
        }, handleContextLoss = function() {
          extensions2 = {};
          programs = {};
          textures = {};
          textureUnit = -1;
          framebufferStack.length = 0;
        };
        var isWebGL2 = typeof WebGL2RenderingContext !== "undefined" && gl instanceof WebGL2RenderingContext;
        var extensions2 = {};
        var programs = {};
        var textures = {};
        var textureUnit = -1;
        var framebufferStack = [];
        gl.canvas.addEventListener("webglcontextlost", function(e3) {
          handleContextLoss();
          e3.preventDefault();
        }, false);
        cache.set(gl, wrapper = {
          gl,
          isWebGL2,
          getExtension,
          withProgram,
          withTexture,
          withTextureFramebuffer,
          handleContextLoss
        });
      }
      callback(wrapper);
    }
    function renderImageData(glOrCanvas, imageData, x, y, width, height, channels, framebuffer) {
      if (channels === void 0)
        channels = 15;
      if (framebuffer === void 0)
        framebuffer = null;
      withWebGLContext(glOrCanvas, function(ref) {
        var gl = ref.gl;
        var withProgram = ref.withProgram;
        var withTexture = ref.withTexture;
        withTexture("copy", function(tex, texUnit) {
          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, imageData);
          withProgram("copy", viewportQuadVertex, copyTexFragment, function(ref2) {
            var setUniform = ref2.setUniform;
            var setAttribute = ref2.setAttribute;
            setAttribute("aUV", 2, gl.STATIC_DRAW, 0, new Float32Array([0, 0, 2, 0, 0, 2]));
            setUniform("1i", "image", texUnit);
            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer || null);
            gl.disable(gl.BLEND);
            gl.colorMask(channels & 8, channels & 4, channels & 2, channels & 1);
            gl.viewport(x, y, width, height);
            gl.scissor(x, y, width, height);
            gl.drawArrays(gl.TRIANGLES, 0, 3);
          });
        });
      });
    }
    function resizeWebGLCanvasWithoutClearing2(canvas, newWidth, newHeight) {
      var width = canvas.width;
      var height = canvas.height;
      withWebGLContext(canvas, function(ref) {
        var gl = ref.gl;
        var data = new Uint8Array(width * height * 4);
        gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, data);
        canvas.width = newWidth;
        canvas.height = newHeight;
        renderImageData(gl, data, 0, 0, width, height);
      });
    }
    var webglUtils = Object.freeze({
      __proto__: null,
      withWebGLContext,
      renderImageData,
      resizeWebGLCanvasWithoutClearing: resizeWebGLCanvasWithoutClearing2
    });
    function generate$2(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent) {
      if (sdfExponent === void 0)
        sdfExponent = 1;
      var textureData = new Uint8Array(sdfWidth * sdfHeight);
      var viewBoxWidth = viewBox[2] - viewBox[0];
      var viewBoxHeight = viewBox[3] - viewBox[1];
      var segments = [];
      pathToLineSegments(path, function(x1, y1, x2, y2) {
        segments.push({
          x1,
          y1,
          x2,
          y2,
          minX: Math.min(x1, x2),
          minY: Math.min(y1, y2),
          maxX: Math.max(x1, x2),
          maxY: Math.max(y1, y2)
        });
      });
      segments.sort(function(a2, b) {
        return a2.maxX - b.maxX;
      });
      for (var sdfX = 0; sdfX < sdfWidth; sdfX++) {
        for (var sdfY = 0; sdfY < sdfHeight; sdfY++) {
          var signedDist = findNearestSignedDistance(viewBox[0] + viewBoxWidth * (sdfX + 0.5) / sdfWidth, viewBox[1] + viewBoxHeight * (sdfY + 0.5) / sdfHeight);
          var alpha = Math.pow(1 - Math.abs(signedDist) / maxDistance, sdfExponent) / 2;
          if (signedDist < 0) {
            alpha = 1 - alpha;
          }
          alpha = Math.max(0, Math.min(255, Math.round(alpha * 255)));
          textureData[sdfY * sdfWidth + sdfX] = alpha;
        }
      }
      return textureData;
      function findNearestSignedDistance(x, y) {
        var closestDistSq = Infinity;
        var closestDist = Infinity;
        for (var i5 = segments.length; i5--; ) {
          var seg = segments[i5];
          if (seg.maxX + closestDist <= x) {
            break;
          }
          if (x + closestDist > seg.minX && y - closestDist < seg.maxY && y + closestDist > seg.minY) {
            var distSq = absSquareDistanceToLineSegment(x, y, seg.x1, seg.y1, seg.x2, seg.y2);
            if (distSq < closestDistSq) {
              closestDistSq = distSq;
              closestDist = Math.sqrt(closestDistSq);
            }
          }
        }
        if (isPointInPoly(x, y)) {
          closestDist = -closestDist;
        }
        return closestDist;
      }
      function isPointInPoly(x, y) {
        var winding = 0;
        for (var i5 = segments.length; i5--; ) {
          var seg = segments[i5];
          if (seg.maxX <= x) {
            break;
          }
          var intersects = seg.y1 > y !== seg.y2 > y && x < (seg.x2 - seg.x1) * (y - seg.y1) / (seg.y2 - seg.y1) + seg.x1;
          if (intersects) {
            winding += seg.y1 < seg.y2 ? 1 : -1;
          }
        }
        return winding !== 0;
      }
    }
    function generateIntoCanvas$2(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, canvas, x, y, channel) {
      if (sdfExponent === void 0)
        sdfExponent = 1;
      if (x === void 0)
        x = 0;
      if (y === void 0)
        y = 0;
      if (channel === void 0)
        channel = 0;
      generateIntoFramebuffer$1(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, canvas, null, x, y, channel);
    }
    function generateIntoFramebuffer$1(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, glOrCanvas, framebuffer, x, y, channel) {
      if (sdfExponent === void 0)
        sdfExponent = 1;
      if (x === void 0)
        x = 0;
      if (y === void 0)
        y = 0;
      if (channel === void 0)
        channel = 0;
      var data = generate$2(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent);
      var rgbaData = new Uint8Array(data.length * 4);
      for (var i5 = 0; i5 < data.length; i5++) {
        rgbaData[i5 * 4 + channel] = data[i5];
      }
      renderImageData(glOrCanvas, rgbaData, x, y, sdfWidth, sdfHeight, 1 << 3 - channel, framebuffer);
    }
    function absSquareDistanceToLineSegment(x, y, lineX0, lineY0, lineX1, lineY1) {
      var ldx = lineX1 - lineX0;
      var ldy = lineY1 - lineY0;
      var lengthSq = ldx * ldx + ldy * ldy;
      var t2 = lengthSq ? Math.max(0, Math.min(1, ((x - lineX0) * ldx + (y - lineY0) * ldy) / lengthSq)) : 0;
      var dx = x - (lineX0 + t2 * ldx);
      var dy = y - (lineY0 + t2 * ldy);
      return dx * dx + dy * dy;
    }
    var javascript = Object.freeze({
      __proto__: null,
      generate: generate$2,
      generateIntoCanvas: generateIntoCanvas$2,
      generateIntoFramebuffer: generateIntoFramebuffer$1
    });
    var mainVertex = "precision highp float;uniform vec4 uGlyphBounds;attribute vec2 aUV;attribute vec4 aLineSegment;varying vec4 vLineSegment;varying vec2 vGlyphXY;void main(){vLineSegment=aLineSegment;vGlyphXY=mix(uGlyphBounds.xy,uGlyphBounds.zw,aUV);gl_Position=vec4(mix(vec2(-1.0),vec2(1.0),aUV),0.0,1.0);}";
    var mainFragment = "precision highp float;uniform vec4 uGlyphBounds;uniform float uMaxDistance;uniform float uExponent;varying vec4 vLineSegment;varying vec2 vGlyphXY;float absDistToSegment(vec2 point,vec2 lineA,vec2 lineB){vec2 lineDir=lineB-lineA;float lenSq=dot(lineDir,lineDir);float t=lenSq==0.0 ? 0.0 : clamp(dot(point-lineA,lineDir)/lenSq,0.0,1.0);vec2 linePt=lineA+t*lineDir;return distance(point,linePt);}void main(){vec4 seg=vLineSegment;vec2 p=vGlyphXY;float dist=absDistToSegment(p,seg.xy,seg.zw);float val=pow(1.0-clamp(dist/uMaxDistance,0.0,1.0),uExponent)*0.5;bool crossing=(seg.y>p.y!=seg.w>p.y)&&(p.x<(seg.z-seg.x)*(p.y-seg.y)/(seg.w-seg.y)+seg.x);bool crossingUp=crossing&&vLineSegment.y<vLineSegment.w;gl_FragColor=vec4(crossingUp ? 1.0/255.0 : 0.0,crossing&&!crossingUp ? 1.0/255.0 : 0.0,0.0,val);}";
    var postFragment = "precision highp float;uniform sampler2D tex;varying vec2 vUV;void main(){vec4 color=texture2D(tex,vUV);bool inside=color.r!=color.g;float val=inside ? 1.0-color.a : color.a;gl_FragColor=vec4(val);}";
    var viewportUVs = new Float32Array([0, 0, 2, 0, 0, 2]);
    var implicitContext = null;
    var isTestingSupport = false;
    var NULL_OBJECT = {};
    var supportByCanvas = /* @__PURE__ */ new WeakMap();
    function validateSupport(glOrCanvas) {
      if (!isTestingSupport && !isSupported(glOrCanvas)) {
        throw new Error("WebGL generation not supported");
      }
    }
    function generate$1(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, glOrCanvas) {
      if (sdfExponent === void 0)
        sdfExponent = 1;
      if (glOrCanvas === void 0)
        glOrCanvas = null;
      if (!glOrCanvas) {
        glOrCanvas = implicitContext;
        if (!glOrCanvas) {
          var canvas = typeof OffscreenCanvas === "function" ? new OffscreenCanvas(1, 1) : typeof document !== "undefined" ? document.createElement("canvas") : null;
          if (!canvas) {
            throw new Error("OffscreenCanvas or DOM canvas not supported");
          }
          glOrCanvas = implicitContext = canvas.getContext("webgl", { depth: false });
        }
      }
      validateSupport(glOrCanvas);
      var rgbaData = new Uint8Array(sdfWidth * sdfHeight * 4);
      withWebGLContext(glOrCanvas, function(ref) {
        var gl = ref.gl;
        var withTexture = ref.withTexture;
        var withTextureFramebuffer = ref.withTextureFramebuffer;
        withTexture("readable", function(texture, textureUnit) {
          gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, sdfWidth, sdfHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
          withTextureFramebuffer(texture, textureUnit, function(framebuffer) {
            generateIntoFramebuffer(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, gl, framebuffer, 0, 0, 0);
            gl.readPixels(0, 0, sdfWidth, sdfHeight, gl.RGBA, gl.UNSIGNED_BYTE, rgbaData);
          });
        });
      });
      var data = new Uint8Array(sdfWidth * sdfHeight);
      for (var i5 = 0, j = 0; i5 < rgbaData.length; i5 += 4) {
        data[j++] = rgbaData[i5];
      }
      return data;
    }
    function generateIntoCanvas$1(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, canvas, x, y, channel) {
      if (sdfExponent === void 0)
        sdfExponent = 1;
      if (x === void 0)
        x = 0;
      if (y === void 0)
        y = 0;
      if (channel === void 0)
        channel = 0;
      generateIntoFramebuffer(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, canvas, null, x, y, channel);
    }
    function generateIntoFramebuffer(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, glOrCanvas, framebuffer, x, y, channel) {
      if (sdfExponent === void 0)
        sdfExponent = 1;
      if (x === void 0)
        x = 0;
      if (y === void 0)
        y = 0;
      if (channel === void 0)
        channel = 0;
      validateSupport(glOrCanvas);
      var lineSegmentCoords = [];
      pathToLineSegments(path, function(x1, y1, x2, y2) {
        lineSegmentCoords.push(x1, y1, x2, y2);
      });
      lineSegmentCoords = new Float32Array(lineSegmentCoords);
      withWebGLContext(glOrCanvas, function(ref) {
        var gl = ref.gl;
        var isWebGL2 = ref.isWebGL2;
        var getExtension = ref.getExtension;
        var withProgram = ref.withProgram;
        var withTexture = ref.withTexture;
        var withTextureFramebuffer = ref.withTextureFramebuffer;
        var handleContextLoss = ref.handleContextLoss;
        withTexture("rawDistances", function(intermediateTexture, intermediateTextureUnit) {
          if (sdfWidth !== intermediateTexture._lastWidth || sdfHeight !== intermediateTexture._lastHeight) {
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, intermediateTexture._lastWidth = sdfWidth, intermediateTexture._lastHeight = sdfHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);
          }
          withProgram("main", mainVertex, mainFragment, function(ref2) {
            var setAttribute = ref2.setAttribute;
            var setUniform = ref2.setUniform;
            var instancingExtension = !isWebGL2 && getExtension("ANGLE_instanced_arrays");
            var blendMinMaxExtension = !isWebGL2 && getExtension("EXT_blend_minmax");
            setAttribute("aUV", 2, gl.STATIC_DRAW, 0, viewportUVs);
            setAttribute("aLineSegment", 4, gl.DYNAMIC_DRAW, 1, lineSegmentCoords);
            setUniform.apply(void 0, ["4f", "uGlyphBounds"].concat(viewBox));
            setUniform("1f", "uMaxDistance", maxDistance);
            setUniform("1f", "uExponent", sdfExponent);
            withTextureFramebuffer(intermediateTexture, intermediateTextureUnit, function(framebuffer2) {
              gl.enable(gl.BLEND);
              gl.colorMask(true, true, true, true);
              gl.viewport(0, 0, sdfWidth, sdfHeight);
              gl.scissor(0, 0, sdfWidth, sdfHeight);
              gl.blendFunc(gl.ONE, gl.ONE);
              gl.blendEquationSeparate(gl.FUNC_ADD, isWebGL2 ? gl.MAX : blendMinMaxExtension.MAX_EXT);
              gl.clear(gl.COLOR_BUFFER_BIT);
              if (isWebGL2) {
                gl.drawArraysInstanced(gl.TRIANGLES, 0, 3, lineSegmentCoords.length / 4);
              } else {
                instancingExtension.drawArraysInstancedANGLE(gl.TRIANGLES, 0, 3, lineSegmentCoords.length / 4);
              }
            });
          });
          withProgram("post", viewportQuadVertex, postFragment, function(program) {
            program.setAttribute("aUV", 2, gl.STATIC_DRAW, 0, viewportUVs);
            program.setUniform("1i", "tex", intermediateTextureUnit);
            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
            gl.disable(gl.BLEND);
            gl.colorMask(channel === 0, channel === 1, channel === 2, channel === 3);
            gl.viewport(x, y, sdfWidth, sdfHeight);
            gl.scissor(x, y, sdfWidth, sdfHeight);
            gl.drawArrays(gl.TRIANGLES, 0, 3);
          });
        });
        if (gl.isContextLost()) {
          handleContextLoss();
          throw new Error("webgl context lost");
        }
      });
    }
    function isSupported(glOrCanvas) {
      var key = !glOrCanvas || glOrCanvas === implicitContext ? NULL_OBJECT : glOrCanvas.canvas || glOrCanvas;
      var supported = supportByCanvas.get(key);
      if (supported === void 0) {
        isTestingSupport = true;
        var failReason = null;
        try {
          var expectedResult = [
            97,
            106,
            97,
            61,
            99,
            137,
            118,
            80,
            80,
            118,
            137,
            99,
            61,
            97,
            106,
            97
          ];
          var testResult = generate$1(4, 4, "M8,8L16,8L24,24L16,24Z", [0, 0, 32, 32], 24, 1, glOrCanvas);
          supported = testResult && expectedResult.length === testResult.length && testResult.every(function(val, i5) {
            return val === expectedResult[i5];
          });
          if (!supported) {
            failReason = "bad trial run results";
            console.info(expectedResult, testResult);
          }
        } catch (err) {
          supported = false;
          failReason = err.message;
        }
        if (failReason) {
          console.warn("WebGL SDF generation not supported:", failReason);
        }
        isTestingSupport = false;
        supportByCanvas.set(key, supported);
      }
      return supported;
    }
    var webgl = Object.freeze({
      __proto__: null,
      generate: generate$1,
      generateIntoCanvas: generateIntoCanvas$1,
      generateIntoFramebuffer,
      isSupported
    });
    function generate(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent) {
      if (maxDistance === void 0)
        maxDistance = Math.max(viewBox[2] - viewBox[0], viewBox[3] - viewBox[1]) / 2;
      if (sdfExponent === void 0)
        sdfExponent = 1;
      try {
        return generate$1.apply(webgl, arguments);
      } catch (e3) {
        console.info("WebGL SDF generation failed, falling back to JS", e3);
        return generate$2.apply(javascript, arguments);
      }
    }
    function generateIntoCanvas(sdfWidth, sdfHeight, path, viewBox, maxDistance, sdfExponent, canvas, x, y, channel) {
      if (maxDistance === void 0)
        maxDistance = Math.max(viewBox[2] - viewBox[0], viewBox[3] - viewBox[1]) / 2;
      if (sdfExponent === void 0)
        sdfExponent = 1;
      if (x === void 0)
        x = 0;
      if (y === void 0)
        y = 0;
      if (channel === void 0)
        channel = 0;
      try {
        return generateIntoCanvas$1.apply(webgl, arguments);
      } catch (e3) {
        console.info("WebGL SDF generation failed, falling back to JS", e3);
        return generateIntoCanvas$2.apply(javascript, arguments);
      }
    }
    exports2.forEachPathCommand = forEachPathCommand;
    exports2.generate = generate;
    exports2.generateIntoCanvas = generateIntoCanvas;
    exports2.javascript = javascript;
    exports2.pathToLineSegments = pathToLineSegments;
    exports2.webgl = webgl;
    exports2.webglUtils = webglUtils;
    Object.defineProperty(exports2, "__esModule", { value: true });
    return exports2;
  }({});
  return exports;
}

// node_modules/bidi-js/dist/bidi.mjs
function bidiFactory() {
  var bidi = function(exports) {
    var DATA = {
      "R": "13k,1a,2,3,3,2+1j,ch+16,a+1,5+2,2+n,5,a,4,6+16,4+3,h+1b,4mo,179q,2+9,2+11,2i9+7y,2+68,4,3+4,5+13,4+3,2+4k,3+29,8+cf,1t+7z,w+17,3+3m,1t+3z,16o1+5r,8+30,8+mc,29+1r,29+4v,75+73",
      "EN": "1c+9,3d+1,6,187+9,513,4+5,7+9,sf+j,175h+9,qw+q,161f+1d,4xt+a,25i+9",
      "ES": "17,2,6dp+1,f+1,av,16vr,mx+1,4o,2",
      "ET": "z+2,3h+3,b+1,ym,3e+1,2o,p4+1,8,6u,7c,g6,1wc,1n9+4,30+1b,2n,6d,qhx+1,h0m,a+1,49+2,63+1,4+1,6bb+3,12jj",
      "AN": "16o+5,2j+9,2+1,35,ed,1ff2+9,87+u",
      "CS": "18,2+1,b,2u,12k,55v,l,17v0,2,3,53,2+1,b",
      "B": "a,3,f+2,2v,690",
      "S": "9,2,k",
      "WS": "c,k,4f4,1vk+a,u,1j,335",
      "ON": "x+1,4+4,h+5,r+5,r+3,z,5+3,2+1,2+1,5,2+2,3+4,o,w,ci+1,8+d,3+d,6+8,2+g,39+1,9,6+1,2,33,b8,3+1,3c+1,7+1,5r,b,7h+3,sa+5,2,3i+6,jg+3,ur+9,2v,ij+1,9g+9,7+a,8m,4+1,49+x,14u,2+2,c+2,e+2,e+2,e+1,i+n,e+e,2+p,u+2,e+2,36+1,2+3,2+1,b,2+2,6+5,2,2,2,h+1,5+4,6+3,3+f,16+2,5+3l,3+81,1y+p,2+40,q+a,m+13,2r+ch,2+9e,75+hf,3+v,2+2w,6e+5,f+6,75+2a,1a+p,2+2g,d+5x,r+b,6+3,4+o,g,6+1,6+2,2k+1,4,2j,5h+z,1m+1,1e+f,t+2,1f+e,d+3,4o+3,2s+1,w,535+1r,h3l+1i,93+2,2s,b+1,3l+x,2v,4g+3,21+3,kz+1,g5v+1,5a,j+9,n+v,2,3,2+8,2+1,3+2,2,3,46+1,4+4,h+5,r+5,r+a,3h+2,4+6,b+4,78,1r+24,4+c,4,1hb,ey+6,103+j,16j+c,1ux+7,5+g,fsh,jdq+1t,4,57+2e,p1,1m,1m,1m,1m,4kt+1,7j+17,5+2r,d+e,3+e,2+e,2+10,m+4,w,1n+5,1q,4z+5,4b+rb,9+c,4+c,4+37,d+2g,8+b,l+b,5+1j,9+9,7+13,9+t,3+1,27+3c,2+29,2+3q,d+d,3+4,4+2,6+6,a+o,8+6,a+2,e+6,16+42,2+1i",
      "BN": "0+8,6+d,2s+5,2+p,e,4m9,1kt+2,2b+5,5+5,17q9+v,7k,6p+8,6+1,119d+3,440+7,96s+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+1,1ekf+75,6p+2rz,1ben+1,1ekf+1,1ekf+1",
      "NSM": "lc+33,7o+6,7c+18,2,2+1,2+1,2,21+a,1d+k,h,2u+6,3+5,3+1,2+3,10,v+q,2k+a,1n+8,a,p+3,2+8,2+2,2+4,18+2,3c+e,2+v,1k,2,5+7,5,4+6,b+1,u,1n,5+3,9,l+1,r,3+1,1m,5+1,5+1,3+2,4,v+1,4,c+1,1m,5+4,2+1,5,l+1,n+5,2,1n,3,2+3,9,8+1,c+1,v,1q,d,1f,4,1m+2,6+2,2+3,8+1,c+1,u,1n,g+1,l+1,t+1,1m+1,5+3,9,l+1,u,21,8+2,2,2j,3+6,d+7,2r,3+8,c+5,23+1,s,2,2,1k+d,2+4,2+1,6+a,2+z,a,2v+3,2+5,2+1,3+1,q+1,5+2,h+3,e,3+1,7,g,jk+2,qb+2,u+2,u+1,v+1,1t+1,2+6,9,3+a,a,1a+2,3c+1,z,3b+2,5+1,a,7+2,64+1,3,1n,2+6,2,2,3+7,7+9,3,1d+g,1s+3,1d,2+4,2,6,15+8,d+1,x+3,3+1,2+2,1l,2+1,4,2+2,1n+7,3+1,49+2,2+c,2+6,5,7,4+1,5j+1l,2+4,k1+w,2db+2,3y,2p+v,ff+3,30+1,n9x+3,2+9,x+1,29+1,7l,4,5,q+1,6,48+1,r+h,e,13+7,q+a,1b+2,1d,3+3,3+1,14,1w+5,3+1,3+1,d,9,1c,1g,2+2,3+1,6+1,2,17+1,9,6n,3,5,fn5,ki+f,h+f,r2,6b,46+4,1af+2,2+1,6+3,15+2,5,4m+1,fy+3,as+1,4a+a,4x,1j+e,1l+2,1e+3,3+1,1y+2,11+4,2+7,1r,d+1,1h+8,b+3,3,2o+2,3,2+1,7,4h,4+7,m+1,1m+1,4,12+6,4+4,5g+7,3+2,2,o,2d+5,2,5+1,2+1,6n+3,7+1,2+1,s+1,2e+7,3,2+1,2z,2,3+5,2,2u+2,3+3,2+4,78+8,2+1,75+1,2,5,41+3,3+1,5,x+5,3+1,15+5,3+3,9,a+5,3+2,1b+c,2+1,bb+6,2+5,2d+l,3+6,2+1,2+1,3f+5,4,2+1,2+6,2,21+1,4,2,9o+1,f0c+4,1o+6,t5,1s+3,2a,f5l+1,43t+2,i+7,3+6,v+3,45+2,1j0+1i,5+1d,9,f,n+4,2+e,11t+6,2+g,3+6,2+1,2+4,7a+6,c6+3,15t+6,32+6,gzhy+6n",
      "AL": "16w,3,2,e+1b,z+2,2+2s,g+1,8+1,b+m,2+t,s+2i,c+e,4h+f,1d+1e,1bwe+dp,3+3z,x+c,2+1,35+3y,2rm+z,5+7,b+5,dt+l,c+u,17nl+27,1t+27,4x+6n,3+d",
      "LRO": "6ct",
      "RLO": "6cu",
      "LRE": "6cq",
      "RLE": "6cr",
      "PDF": "6cs",
      "LRI": "6ee",
      "RLI": "6ef",
      "FSI": "6eg",
      "PDI": "6eh"
    };
    var TYPES = {};
    var TYPES_TO_NAMES = {};
    TYPES.L = 1;
    TYPES_TO_NAMES[1] = "L";
    Object.keys(DATA).forEach(function(type, i5) {
      TYPES[type] = 1 << i5 + 1;
      TYPES_TO_NAMES[TYPES[type]] = type;
    });
    Object.freeze(TYPES);
    var ISOLATE_INIT_TYPES = TYPES.LRI | TYPES.RLI | TYPES.FSI;
    var STRONG_TYPES = TYPES.L | TYPES.R | TYPES.AL;
    var NEUTRAL_ISOLATE_TYPES = TYPES.B | TYPES.S | TYPES.WS | TYPES.ON | TYPES.FSI | TYPES.LRI | TYPES.RLI | TYPES.PDI;
    var BN_LIKE_TYPES = TYPES.BN | TYPES.RLE | TYPES.LRE | TYPES.RLO | TYPES.LRO | TYPES.PDF;
    var TRAILING_TYPES = TYPES.S | TYPES.WS | TYPES.B | ISOLATE_INIT_TYPES | TYPES.PDI | BN_LIKE_TYPES;
    var map = null;
    function parseData() {
      if (!map) {
        map = /* @__PURE__ */ new Map();
        var loop = function(type2) {
          if (DATA.hasOwnProperty(type2)) {
            var lastCode = 0;
            DATA[type2].split(",").forEach(function(range) {
              var ref = range.split("+");
              var skip = ref[0];
              var step = ref[1];
              skip = parseInt(skip, 36);
              step = step ? parseInt(step, 36) : 0;
              map.set(lastCode += skip, TYPES[type2]);
              for (var i5 = 0; i5 < step; i5++) {
                map.set(++lastCode, TYPES[type2]);
              }
            });
          }
        };
        for (var type in DATA)
          loop(type);
      }
    }
    function getBidiCharType(char) {
      parseData();
      return map.get(char.codePointAt(0)) || TYPES.L;
    }
    function getBidiCharTypeName(char) {
      return TYPES_TO_NAMES[getBidiCharType(char)];
    }
    var data$1 = {
      "pairs": "14>1,1e>2,u>2,2wt>1,1>1,1ge>1,1wp>1,1j>1,f>1,hm>1,1>1,u>1,u6>1,1>1,+5,28>1,w>1,1>1,+3,b8>1,1>1,+3,1>3,-1>-1,3>1,1>1,+2,1s>1,1>1,x>1,th>1,1>1,+2,db>1,1>1,+3,3>1,1>1,+2,14qm>1,1>1,+1,4q>1,1e>2,u>2,2>1,+1",
      "canonical": "6f1>-6dx,6dy>-6dx,6ec>-6ed,6ee>-6ed,6ww>2jj,-2ji>2jj,14r4>-1e7l,1e7m>-1e7l,1e7m>-1e5c,1e5d>-1e5b,1e5c>-14qx,14qy>-14qx,14vn>-1ecg,1ech>-1ecg,1edu>-1ecg,1eci>-1ecg,1eda>-1ecg,1eci>-1ecg,1eci>-168q,168r>-168q,168s>-14ye,14yf>-14ye"
    };
    function parseCharacterMap(encodedString, includeReverse) {
      var radix = 36;
      var lastCode = 0;
      var map2 = /* @__PURE__ */ new Map();
      var reverseMap = includeReverse && /* @__PURE__ */ new Map();
      var prevPair;
      encodedString.split(",").forEach(function visit(entry) {
        if (entry.indexOf("+") !== -1) {
          for (var i5 = +entry; i5--; ) {
            visit(prevPair);
          }
        } else {
          prevPair = entry;
          var ref = entry.split(">");
          var a2 = ref[0];
          var b = ref[1];
          a2 = String.fromCodePoint(lastCode += parseInt(a2, radix));
          b = String.fromCodePoint(lastCode += parseInt(b, radix));
          map2.set(a2, b);
          includeReverse && reverseMap.set(b, a2);
        }
      });
      return { map: map2, reverseMap };
    }
    var openToClose, closeToOpen, canonical;
    function parse$1() {
      if (!openToClose) {
        var ref = parseCharacterMap(data$1.pairs, true);
        var map2 = ref.map;
        var reverseMap = ref.reverseMap;
        openToClose = map2;
        closeToOpen = reverseMap;
        canonical = parseCharacterMap(data$1.canonical, false).map;
      }
    }
    function openingToClosingBracket(char) {
      parse$1();
      return openToClose.get(char) || null;
    }
    function closingToOpeningBracket(char) {
      parse$1();
      return closeToOpen.get(char) || null;
    }
    function getCanonicalBracket(char) {
      parse$1();
      return canonical.get(char) || null;
    }
    var TYPE_L = TYPES.L;
    var TYPE_R = TYPES.R;
    var TYPE_EN = TYPES.EN;
    var TYPE_ES = TYPES.ES;
    var TYPE_ET = TYPES.ET;
    var TYPE_AN = TYPES.AN;
    var TYPE_CS = TYPES.CS;
    var TYPE_B = TYPES.B;
    var TYPE_S = TYPES.S;
    var TYPE_ON = TYPES.ON;
    var TYPE_BN = TYPES.BN;
    var TYPE_NSM = TYPES.NSM;
    var TYPE_AL = TYPES.AL;
    var TYPE_LRO = TYPES.LRO;
    var TYPE_RLO = TYPES.RLO;
    var TYPE_LRE = TYPES.LRE;
    var TYPE_RLE = TYPES.RLE;
    var TYPE_PDF = TYPES.PDF;
    var TYPE_LRI = TYPES.LRI;
    var TYPE_RLI = TYPES.RLI;
    var TYPE_FSI = TYPES.FSI;
    var TYPE_PDI = TYPES.PDI;
    function getEmbeddingLevels(string, baseDirection) {
      var MAX_DEPTH = 125;
      var charTypes = new Uint32Array(string.length);
      for (var i5 = 0; i5 < string.length; i5++) {
        charTypes[i5] = getBidiCharType(string[i5]);
      }
      var charTypeCounts = /* @__PURE__ */ new Map();
      function changeCharType(i6, type2) {
        var oldType = charTypes[i6];
        charTypes[i6] = type2;
        charTypeCounts.set(oldType, charTypeCounts.get(oldType) - 1);
        if (oldType & NEUTRAL_ISOLATE_TYPES) {
          charTypeCounts.set(NEUTRAL_ISOLATE_TYPES, charTypeCounts.get(NEUTRAL_ISOLATE_TYPES) - 1);
        }
        charTypeCounts.set(type2, (charTypeCounts.get(type2) || 0) + 1);
        if (type2 & NEUTRAL_ISOLATE_TYPES) {
          charTypeCounts.set(NEUTRAL_ISOLATE_TYPES, (charTypeCounts.get(NEUTRAL_ISOLATE_TYPES) || 0) + 1);
        }
      }
      var embedLevels = new Uint8Array(string.length);
      var isolationPairs = /* @__PURE__ */ new Map();
      var paragraphs = [];
      var paragraph = null;
      for (var i$1 = 0; i$1 < string.length; i$1++) {
        if (!paragraph) {
          paragraphs.push(paragraph = {
            start: i$1,
            end: string.length - 1,
            level: baseDirection === "rtl" ? 1 : baseDirection === "ltr" ? 0 : determineAutoEmbedLevel(i$1, false)
          });
        }
        if (charTypes[i$1] & TYPE_B) {
          paragraph.end = i$1;
          paragraph = null;
        }
      }
      var FORMATTING_TYPES = TYPE_RLE | TYPE_LRE | TYPE_RLO | TYPE_LRO | ISOLATE_INIT_TYPES | TYPE_PDI | TYPE_PDF | TYPE_B;
      var nextEven = function(n2) {
        return n2 + (n2 & 1 ? 1 : 2);
      };
      var nextOdd = function(n2) {
        return n2 + (n2 & 1 ? 2 : 1);
      };
      for (var paraIdx = 0; paraIdx < paragraphs.length; paraIdx++) {
        paragraph = paragraphs[paraIdx];
        var statusStack = [{
          _level: paragraph.level,
          _override: 0,
          _isolate: 0
        }];
        var stackTop = void 0;
        var overflowIsolateCount = 0;
        var overflowEmbeddingCount = 0;
        var validIsolateCount = 0;
        charTypeCounts.clear();
        for (var i$2 = paragraph.start; i$2 <= paragraph.end; i$2++) {
          var charType = charTypes[i$2];
          stackTop = statusStack[statusStack.length - 1];
          charTypeCounts.set(charType, (charTypeCounts.get(charType) || 0) + 1);
          if (charType & NEUTRAL_ISOLATE_TYPES) {
            charTypeCounts.set(NEUTRAL_ISOLATE_TYPES, (charTypeCounts.get(NEUTRAL_ISOLATE_TYPES) || 0) + 1);
          }
          if (charType & FORMATTING_TYPES) {
            if (charType & (TYPE_RLE | TYPE_LRE)) {
              embedLevels[i$2] = stackTop._level;
              var level = (charType === TYPE_RLE ? nextOdd : nextEven)(stackTop._level);
              if (level <= MAX_DEPTH && !overflowIsolateCount && !overflowEmbeddingCount) {
                statusStack.push({
                  _level: level,
                  _override: 0,
                  _isolate: 0
                });
              } else if (!overflowIsolateCount) {
                overflowEmbeddingCount++;
              }
            } else if (charType & (TYPE_RLO | TYPE_LRO)) {
              embedLevels[i$2] = stackTop._level;
              var level$1 = (charType === TYPE_RLO ? nextOdd : nextEven)(stackTop._level);
              if (level$1 <= MAX_DEPTH && !overflowIsolateCount && !overflowEmbeddingCount) {
                statusStack.push({
                  _level: level$1,
                  _override: charType & TYPE_RLO ? TYPE_R : TYPE_L,
                  _isolate: 0
                });
              } else if (!overflowIsolateCount) {
                overflowEmbeddingCount++;
              }
            } else if (charType & ISOLATE_INIT_TYPES) {
              if (charType & TYPE_FSI) {
                charType = determineAutoEmbedLevel(i$2 + 1, true) === 1 ? TYPE_RLI : TYPE_LRI;
              }
              embedLevels[i$2] = stackTop._level;
              if (stackTop._override) {
                changeCharType(i$2, stackTop._override);
              }
              var level$2 = (charType === TYPE_RLI ? nextOdd : nextEven)(stackTop._level);
              if (level$2 <= MAX_DEPTH && overflowIsolateCount === 0 && overflowEmbeddingCount === 0) {
                validIsolateCount++;
                statusStack.push({
                  _level: level$2,
                  _override: 0,
                  _isolate: 1,
                  _isolInitIndex: i$2
                });
              } else {
                overflowIsolateCount++;
              }
            } else if (charType & TYPE_PDI) {
              if (overflowIsolateCount > 0) {
                overflowIsolateCount--;
              } else if (validIsolateCount > 0) {
                overflowEmbeddingCount = 0;
                while (!statusStack[statusStack.length - 1]._isolate) {
                  statusStack.pop();
                }
                var isolInitIndex = statusStack[statusStack.length - 1]._isolInitIndex;
                if (isolInitIndex != null) {
                  isolationPairs.set(isolInitIndex, i$2);
                  isolationPairs.set(i$2, isolInitIndex);
                }
                statusStack.pop();
                validIsolateCount--;
              }
              stackTop = statusStack[statusStack.length - 1];
              embedLevels[i$2] = stackTop._level;
              if (stackTop._override) {
                changeCharType(i$2, stackTop._override);
              }
            } else if (charType & TYPE_PDF) {
              if (overflowIsolateCount === 0) {
                if (overflowEmbeddingCount > 0) {
                  overflowEmbeddingCount--;
                } else if (!stackTop._isolate && statusStack.length > 1) {
                  statusStack.pop();
                  stackTop = statusStack[statusStack.length - 1];
                }
              }
              embedLevels[i$2] = stackTop._level;
            } else if (charType & TYPE_B) {
              embedLevels[i$2] = paragraph.level;
            }
          } else {
            embedLevels[i$2] = stackTop._level;
            if (stackTop._override && charType !== TYPE_BN) {
              changeCharType(i$2, stackTop._override);
            }
          }
        }
        var levelRuns = [];
        var currentRun = null;
        for (var i$3 = paragraph.start; i$3 <= paragraph.end; i$3++) {
          var charType$1 = charTypes[i$3];
          if (!(charType$1 & BN_LIKE_TYPES)) {
            var lvl = embedLevels[i$3];
            var isIsolInit = charType$1 & ISOLATE_INIT_TYPES;
            var isPDI = charType$1 === TYPE_PDI;
            if (currentRun && lvl === currentRun._level) {
              currentRun._end = i$3;
              currentRun._endsWithIsolInit = isIsolInit;
            } else {
              levelRuns.push(currentRun = {
                _start: i$3,
                _end: i$3,
                _level: lvl,
                _startsWithPDI: isPDI,
                _endsWithIsolInit: isIsolInit
              });
            }
          }
        }
        var isolatingRunSeqs = [];
        for (var runIdx = 0; runIdx < levelRuns.length; runIdx++) {
          var run = levelRuns[runIdx];
          if (!run._startsWithPDI || run._startsWithPDI && !isolationPairs.has(run._start)) {
            var seqRuns = [currentRun = run];
            for (var pdiIndex = void 0; currentRun && currentRun._endsWithIsolInit && (pdiIndex = isolationPairs.get(currentRun._end)) != null; ) {
              for (var i$4 = runIdx + 1; i$4 < levelRuns.length; i$4++) {
                if (levelRuns[i$4]._start === pdiIndex) {
                  seqRuns.push(currentRun = levelRuns[i$4]);
                  break;
                }
              }
            }
            var seqIndices = [];
            for (var i$5 = 0; i$5 < seqRuns.length; i$5++) {
              var run$1 = seqRuns[i$5];
              for (var j = run$1._start; j <= run$1._end; j++) {
                seqIndices.push(j);
              }
            }
            var firstLevel = embedLevels[seqIndices[0]];
            var prevLevel = paragraph.level;
            for (var i$6 = seqIndices[0] - 1; i$6 >= 0; i$6--) {
              if (!(charTypes[i$6] & BN_LIKE_TYPES)) {
                prevLevel = embedLevels[i$6];
                break;
              }
            }
            var lastIndex = seqIndices[seqIndices.length - 1];
            var lastLevel = embedLevels[lastIndex];
            var nextLevel = paragraph.level;
            if (!(charTypes[lastIndex] & ISOLATE_INIT_TYPES)) {
              for (var i$7 = lastIndex + 1; i$7 <= paragraph.end; i$7++) {
                if (!(charTypes[i$7] & BN_LIKE_TYPES)) {
                  nextLevel = embedLevels[i$7];
                  break;
                }
              }
            }
            isolatingRunSeqs.push({
              _seqIndices: seqIndices,
              _sosType: Math.max(prevLevel, firstLevel) % 2 ? TYPE_R : TYPE_L,
              _eosType: Math.max(nextLevel, lastLevel) % 2 ? TYPE_R : TYPE_L
            });
          }
        }
        for (var seqIdx = 0; seqIdx < isolatingRunSeqs.length; seqIdx++) {
          var ref = isolatingRunSeqs[seqIdx];
          var seqIndices$1 = ref._seqIndices;
          var sosType = ref._sosType;
          var eosType = ref._eosType;
          if (charTypeCounts.get(TYPE_NSM)) {
            for (var si = 0; si < seqIndices$1.length; si++) {
              var i$8 = seqIndices$1[si];
              if (charTypes[i$8] & TYPE_NSM) {
                var prevType = sosType;
                for (var sj = si - 1; sj >= 0; sj--) {
                  if (!(charTypes[seqIndices$1[sj]] & BN_LIKE_TYPES)) {
                    prevType = charTypes[seqIndices$1[sj]];
                    break;
                  }
                }
                changeCharType(i$8, prevType & (ISOLATE_INIT_TYPES | TYPE_PDI) ? TYPE_ON : prevType);
              }
            }
          }
          if (charTypeCounts.get(TYPE_EN)) {
            for (var si$1 = 0; si$1 < seqIndices$1.length; si$1++) {
              var i$9 = seqIndices$1[si$1];
              if (charTypes[i$9] & TYPE_EN) {
                for (var sj$1 = si$1 - 1; sj$1 >= -1; sj$1--) {
                  var prevCharType = sj$1 === -1 ? sosType : charTypes[seqIndices$1[sj$1]];
                  if (prevCharType & STRONG_TYPES) {
                    if (prevCharType === TYPE_AL) {
                      changeCharType(i$9, TYPE_AN);
                    }
                    break;
                  }
                }
              }
            }
          }
          if (charTypeCounts.get(TYPE_AL)) {
            for (var si$2 = 0; si$2 < seqIndices$1.length; si$2++) {
              var i$10 = seqIndices$1[si$2];
              if (charTypes[i$10] & TYPE_AL) {
                changeCharType(i$10, TYPE_R);
              }
            }
          }
          if (charTypeCounts.get(TYPE_ES) || charTypeCounts.get(TYPE_CS)) {
            for (var si$3 = 1; si$3 < seqIndices$1.length - 1; si$3++) {
              var i$11 = seqIndices$1[si$3];
              if (charTypes[i$11] & (TYPE_ES | TYPE_CS)) {
                var prevType$1 = 0, nextType = 0;
                for (var sj$2 = si$3 - 1; sj$2 >= 0; sj$2--) {
                  prevType$1 = charTypes[seqIndices$1[sj$2]];
                  if (!(prevType$1 & BN_LIKE_TYPES)) {
                    break;
                  }
                }
                for (var sj$3 = si$3 + 1; sj$3 < seqIndices$1.length; sj$3++) {
                  nextType = charTypes[seqIndices$1[sj$3]];
                  if (!(nextType & BN_LIKE_TYPES)) {
                    break;
                  }
                }
                if (prevType$1 === nextType && (charTypes[i$11] === TYPE_ES ? prevType$1 === TYPE_EN : prevType$1 & (TYPE_EN | TYPE_AN))) {
                  changeCharType(i$11, prevType$1);
                }
              }
            }
          }
          if (charTypeCounts.get(TYPE_EN)) {
            for (var si$4 = 0; si$4 < seqIndices$1.length; si$4++) {
              var i$12 = seqIndices$1[si$4];
              if (charTypes[i$12] & TYPE_EN) {
                for (var sj$4 = si$4 - 1; sj$4 >= 0 && charTypes[seqIndices$1[sj$4]] & (TYPE_ET | BN_LIKE_TYPES); sj$4--) {
                  changeCharType(seqIndices$1[sj$4], TYPE_EN);
                }
                for (var sj$5 = si$4 + 1; sj$5 < seqIndices$1.length && charTypes[seqIndices$1[sj$5]] & (TYPE_ET | BN_LIKE_TYPES); sj$5++) {
                  changeCharType(seqIndices$1[sj$5], TYPE_EN);
                }
              }
            }
          }
          if (charTypeCounts.get(TYPE_ET) || charTypeCounts.get(TYPE_ES) || charTypeCounts.get(TYPE_CS)) {
            for (var si$5 = 0; si$5 < seqIndices$1.length; si$5++) {
              var i$13 = seqIndices$1[si$5];
              if (charTypes[i$13] & (TYPE_ET | TYPE_ES | TYPE_CS)) {
                changeCharType(i$13, TYPE_ON);
                for (var sj$6 = si$5 - 1; sj$6 >= 0 && charTypes[seqIndices$1[sj$6]] & BN_LIKE_TYPES; sj$6--) {
                  changeCharType(seqIndices$1[sj$6], TYPE_ON);
                }
                for (var sj$7 = si$5 + 1; sj$7 < seqIndices$1.length && charTypes[seqIndices$1[sj$7]] & BN_LIKE_TYPES; sj$7++) {
                  changeCharType(seqIndices$1[sj$7], TYPE_ON);
                }
              }
            }
          }
          if (charTypeCounts.get(TYPE_EN)) {
            for (var si$6 = 0, prevStrongType = sosType; si$6 < seqIndices$1.length; si$6++) {
              var i$14 = seqIndices$1[si$6];
              var type = charTypes[i$14];
              if (type & TYPE_EN) {
                if (prevStrongType === TYPE_L) {
                  changeCharType(i$14, TYPE_L);
                }
              } else if (type & STRONG_TYPES) {
                prevStrongType = type;
              }
            }
          }
          if (charTypeCounts.get(NEUTRAL_ISOLATE_TYPES)) {
            var R_TYPES_FOR_N_STEPS = TYPE_R | TYPE_EN | TYPE_AN;
            var STRONG_TYPES_FOR_N_STEPS = R_TYPES_FOR_N_STEPS | TYPE_L;
            var bracketPairs = [];
            {
              var openerStack = [];
              for (var si$7 = 0; si$7 < seqIndices$1.length; si$7++) {
                if (charTypes[seqIndices$1[si$7]] & NEUTRAL_ISOLATE_TYPES) {
                  var char = string[seqIndices$1[si$7]];
                  var oppositeBracket = void 0;
                  if (openingToClosingBracket(char) !== null) {
                    if (openerStack.length < 63) {
                      openerStack.push({ char, seqIndex: si$7 });
                    } else {
                      break;
                    }
                  } else if ((oppositeBracket = closingToOpeningBracket(char)) !== null) {
                    for (var stackIdx = openerStack.length - 1; stackIdx >= 0; stackIdx--) {
                      var stackChar = openerStack[stackIdx].char;
                      if (stackChar === oppositeBracket || stackChar === closingToOpeningBracket(getCanonicalBracket(char)) || openingToClosingBracket(getCanonicalBracket(stackChar)) === char) {
                        bracketPairs.push([openerStack[stackIdx].seqIndex, si$7]);
                        openerStack.length = stackIdx;
                        break;
                      }
                    }
                  }
                }
              }
              bracketPairs.sort(function(a2, b) {
                return a2[0] - b[0];
              });
            }
            for (var pairIdx = 0; pairIdx < bracketPairs.length; pairIdx++) {
              var ref$1 = bracketPairs[pairIdx];
              var openSeqIdx = ref$1[0];
              var closeSeqIdx = ref$1[1];
              var foundStrongType = false;
              var useStrongType = 0;
              for (var si$8 = openSeqIdx + 1; si$8 < closeSeqIdx; si$8++) {
                var i$15 = seqIndices$1[si$8];
                if (charTypes[i$15] & STRONG_TYPES_FOR_N_STEPS) {
                  foundStrongType = true;
                  var lr = charTypes[i$15] & R_TYPES_FOR_N_STEPS ? TYPE_R : TYPE_L;
                  if (lr === getEmbedDirection(i$15)) {
                    useStrongType = lr;
                    break;
                  }
                }
              }
              if (foundStrongType && !useStrongType) {
                useStrongType = sosType;
                for (var si$9 = openSeqIdx - 1; si$9 >= 0; si$9--) {
                  var i$16 = seqIndices$1[si$9];
                  if (charTypes[i$16] & STRONG_TYPES_FOR_N_STEPS) {
                    var lr$1 = charTypes[i$16] & R_TYPES_FOR_N_STEPS ? TYPE_R : TYPE_L;
                    if (lr$1 !== getEmbedDirection(i$16)) {
                      useStrongType = lr$1;
                    } else {
                      useStrongType = getEmbedDirection(i$16);
                    }
                    break;
                  }
                }
              }
              if (useStrongType) {
                charTypes[seqIndices$1[openSeqIdx]] = charTypes[seqIndices$1[closeSeqIdx]] = useStrongType;
                if (useStrongType !== getEmbedDirection(seqIndices$1[openSeqIdx])) {
                  for (var si$10 = openSeqIdx + 1; si$10 < seqIndices$1.length; si$10++) {
                    if (!(charTypes[seqIndices$1[si$10]] & BN_LIKE_TYPES)) {
                      if (getBidiCharType(string[seqIndices$1[si$10]]) & TYPE_NSM) {
                        charTypes[seqIndices$1[si$10]] = useStrongType;
                      }
                      break;
                    }
                  }
                }
                if (useStrongType !== getEmbedDirection(seqIndices$1[closeSeqIdx])) {
                  for (var si$11 = closeSeqIdx + 1; si$11 < seqIndices$1.length; si$11++) {
                    if (!(charTypes[seqIndices$1[si$11]] & BN_LIKE_TYPES)) {
                      if (getBidiCharType(string[seqIndices$1[si$11]]) & TYPE_NSM) {
                        charTypes[seqIndices$1[si$11]] = useStrongType;
                      }
                      break;
                    }
                  }
                }
              }
            }
            for (var si$12 = 0; si$12 < seqIndices$1.length; si$12++) {
              if (charTypes[seqIndices$1[si$12]] & NEUTRAL_ISOLATE_TYPES) {
                var niRunStart = si$12, niRunEnd = si$12;
                var prevType$2 = sosType;
                for (var si2 = si$12 - 1; si2 >= 0; si2--) {
                  if (charTypes[seqIndices$1[si2]] & BN_LIKE_TYPES) {
                    niRunStart = si2;
                  } else {
                    prevType$2 = charTypes[seqIndices$1[si2]] & R_TYPES_FOR_N_STEPS ? TYPE_R : TYPE_L;
                    break;
                  }
                }
                var nextType$1 = eosType;
                for (var si2$1 = si$12 + 1; si2$1 < seqIndices$1.length; si2$1++) {
                  if (charTypes[seqIndices$1[si2$1]] & (NEUTRAL_ISOLATE_TYPES | BN_LIKE_TYPES)) {
                    niRunEnd = si2$1;
                  } else {
                    nextType$1 = charTypes[seqIndices$1[si2$1]] & R_TYPES_FOR_N_STEPS ? TYPE_R : TYPE_L;
                    break;
                  }
                }
                for (var sj$8 = niRunStart; sj$8 <= niRunEnd; sj$8++) {
                  charTypes[seqIndices$1[sj$8]] = prevType$2 === nextType$1 ? prevType$2 : getEmbedDirection(seqIndices$1[sj$8]);
                }
                si$12 = niRunEnd;
              }
            }
          }
        }
        for (var i$17 = paragraph.start; i$17 <= paragraph.end; i$17++) {
          var level$3 = embedLevels[i$17];
          var type$1 = charTypes[i$17];
          if (level$3 & 1) {
            if (type$1 & (TYPE_L | TYPE_EN | TYPE_AN)) {
              embedLevels[i$17]++;
            }
          } else {
            if (type$1 & TYPE_R) {
              embedLevels[i$17]++;
            } else if (type$1 & (TYPE_AN | TYPE_EN)) {
              embedLevels[i$17] += 2;
            }
          }
          if (type$1 & BN_LIKE_TYPES) {
            embedLevels[i$17] = i$17 === 0 ? paragraph.level : embedLevels[i$17 - 1];
          }
          if (i$17 === paragraph.end || getBidiCharType(string[i$17]) & (TYPE_S | TYPE_B)) {
            for (var j$1 = i$17; j$1 >= 0 && getBidiCharType(string[j$1]) & TRAILING_TYPES; j$1--) {
              embedLevels[j$1] = paragraph.level;
            }
          }
        }
      }
      return {
        levels: embedLevels,
        paragraphs
      };
      function determineAutoEmbedLevel(start, isFSI) {
        for (var i6 = start; i6 < string.length; i6++) {
          var charType2 = charTypes[i6];
          if (charType2 & (TYPE_R | TYPE_AL)) {
            return 1;
          }
          if (charType2 & (TYPE_B | TYPE_L) || isFSI && charType2 === TYPE_PDI) {
            return 0;
          }
          if (charType2 & ISOLATE_INIT_TYPES) {
            var pdi = indexOfMatchingPDI(i6);
            i6 = pdi === -1 ? string.length : pdi;
          }
        }
        return 0;
      }
      function indexOfMatchingPDI(isolateStart) {
        var isolationLevel = 1;
        for (var i6 = isolateStart + 1; i6 < string.length; i6++) {
          var charType2 = charTypes[i6];
          if (charType2 & TYPE_B) {
            break;
          }
          if (charType2 & TYPE_PDI) {
            if (--isolationLevel === 0) {
              return i6;
            }
          } else if (charType2 & ISOLATE_INIT_TYPES) {
            isolationLevel++;
          }
        }
        return -1;
      }
      function getEmbedDirection(i6) {
        return embedLevels[i6] & 1 ? TYPE_R : TYPE_L;
      }
    }
    var data = "14>1,j>2,t>2,u>2,1a>g,2v3>1,1>1,1ge>1,1wd>1,b>1,1j>1,f>1,ai>3,-2>3,+1,8>1k0,-1jq>1y7,-1y6>1hf,-1he>1h6,-1h5>1ha,-1h8>1qi,-1pu>1,6>3u,-3s>7,6>1,1>1,f>1,1>1,+2,3>1,1>1,+13,4>1,1>1,6>1eo,-1ee>1,3>1mg,-1me>1mk,-1mj>1mi,-1mg>1mi,-1md>1,1>1,+2,1>10k,-103>1,1>1,4>1,5>1,1>1,+10,3>1,1>8,-7>8,+1,-6>7,+1,a>1,1>1,u>1,u6>1,1>1,+5,26>1,1>1,2>1,2>2,8>1,7>1,4>1,1>1,+5,b8>1,1>1,+3,1>3,-2>1,2>1,1>1,+2,c>1,3>1,1>1,+2,h>1,3>1,a>1,1>1,2>1,3>1,1>1,d>1,f>1,3>1,1a>1,1>1,6>1,7>1,13>1,k>1,1>1,+19,4>1,1>1,+2,2>1,1>1,+18,m>1,a>1,1>1,lk>1,1>1,4>1,2>1,f>1,3>1,1>1,+3,db>1,1>1,+3,3>1,1>1,+2,14qm>1,1>1,+1,6>1,4j>1,j>2,t>2,u>2,2>1,+1";
    var mirrorMap;
    function parse2() {
      if (!mirrorMap) {
        var ref = parseCharacterMap(data, true);
        var map2 = ref.map;
        var reverseMap = ref.reverseMap;
        reverseMap.forEach(function(value, key) {
          map2.set(key, value);
        });
        mirrorMap = map2;
      }
    }
    function getMirroredCharacter(char) {
      parse2();
      return mirrorMap.get(char) || null;
    }
    function getMirroredCharactersMap(string, embeddingLevels, start, end) {
      var strLen = string.length;
      start = Math.max(0, start == null ? 0 : +start);
      end = Math.min(strLen - 1, end == null ? strLen - 1 : +end);
      var map2 = /* @__PURE__ */ new Map();
      for (var i5 = start; i5 <= end; i5++) {
        if (embeddingLevels[i5] & 1) {
          var mirror = getMirroredCharacter(string[i5]);
          if (mirror !== null) {
            map2.set(i5, mirror);
          }
        }
      }
      return map2;
    }
    function getReorderSegments(string, embeddingLevelsResult, start, end) {
      var strLen = string.length;
      start = Math.max(0, start == null ? 0 : +start);
      end = Math.min(strLen - 1, end == null ? strLen - 1 : +end);
      var segments = [];
      embeddingLevelsResult.paragraphs.forEach(function(paragraph) {
        var lineStart = Math.max(start, paragraph.start);
        var lineEnd = Math.min(end, paragraph.end);
        if (lineStart < lineEnd) {
          var lineLevels = embeddingLevelsResult.levels.slice(lineStart, lineEnd + 1);
          for (var i5 = lineEnd; i5 >= lineStart && getBidiCharType(string[i5]) & TRAILING_TYPES; i5--) {
            lineLevels[i5] = paragraph.level;
          }
          var maxLevel = paragraph.level;
          var minOddLevel = Infinity;
          for (var i$1 = 0; i$1 < lineLevels.length; i$1++) {
            var level = lineLevels[i$1];
            if (level > maxLevel) {
              maxLevel = level;
            }
            if (level < minOddLevel) {
              minOddLevel = level | 1;
            }
          }
          for (var lvl = maxLevel; lvl >= minOddLevel; lvl--) {
            for (var i$2 = 0; i$2 < lineLevels.length; i$2++) {
              if (lineLevels[i$2] >= lvl) {
                var segStart = i$2;
                while (i$2 + 1 < lineLevels.length && lineLevels[i$2 + 1] >= lvl) {
                  i$2++;
                }
                if (i$2 > segStart) {
                  segments.push([segStart + start, i$2 + start]);
                }
              }
            }
          }
        }
      });
      return segments;
    }
    function getReorderedString(string, embedLevelsResult, start, end) {
      var indices = getReorderedIndices(string, embedLevelsResult, start, end);
      var chars = [].concat(string);
      indices.forEach(function(charIndex, i5) {
        chars[i5] = (embedLevelsResult.levels[charIndex] & 1 ? getMirroredCharacter(string[charIndex]) : null) || string[charIndex];
      });
      return chars.join("");
    }
    function getReorderedIndices(string, embedLevelsResult, start, end) {
      var segments = getReorderSegments(string, embedLevelsResult, start, end);
      var indices = [];
      for (var i5 = 0; i5 < string.length; i5++) {
        indices[i5] = i5;
      }
      segments.forEach(function(ref) {
        var start2 = ref[0];
        var end2 = ref[1];
        var slice = indices.slice(start2, end2 + 1);
        for (var i6 = slice.length; i6--; ) {
          indices[end2 - i6] = slice[i6];
        }
      });
      return indices;
    }
    exports.closingToOpeningBracket = closingToOpeningBracket;
    exports.getBidiCharType = getBidiCharType;
    exports.getBidiCharTypeName = getBidiCharTypeName;
    exports.getCanonicalBracket = getCanonicalBracket;
    exports.getEmbeddingLevels = getEmbeddingLevels;
    exports.getMirroredCharacter = getMirroredCharacter;
    exports.getMirroredCharactersMap = getMirroredCharactersMap;
    exports.getReorderSegments = getReorderSegments;
    exports.getReorderedIndices = getReorderedIndices;
    exports.getReorderedString = getReorderedString;
    exports.openingToClosingBracket = openingToClosingBracket;
    Object.defineProperty(exports, "__esModule", { value: true });
    return exports;
  }({});
  return bidi;
}
var bidi_default = bidiFactory;

// node_modules/troika-three-utils/dist/troika-three-utils.esm.js
init_three_module();
var voidMainRegExp = /\bvoid\s+main\s*\(\s*\)\s*{/g;
function expandShaderIncludes(source) {
  const pattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
  function replace(match, include) {
    let chunk = ShaderChunk[include];
    return chunk ? expandShaderIncludes(chunk) : match;
  }
  return source.replace(pattern, replace);
}
var _lut = [];
for (let i5 = 0; i5 < 256; i5++) {
  _lut[i5] = (i5 < 16 ? "0" : "") + i5.toString(16);
}
function generateUUID() {
  const d0 = Math.random() * 4294967295 | 0;
  const d1 = Math.random() * 4294967295 | 0;
  const d2 = Math.random() * 4294967295 | 0;
  const d3 = Math.random() * 4294967295 | 0;
  const uuid = _lut[d0 & 255] + _lut[d0 >> 8 & 255] + _lut[d0 >> 16 & 255] + _lut[d0 >> 24 & 255] + "-" + _lut[d1 & 255] + _lut[d1 >> 8 & 255] + "-" + _lut[d1 >> 16 & 15 | 64] + _lut[d1 >> 24 & 255] + "-" + _lut[d2 & 63 | 128] + _lut[d2 >> 8 & 255] + "-" + _lut[d2 >> 16 & 255] + _lut[d2 >> 24 & 255] + _lut[d3 & 255] + _lut[d3 >> 8 & 255] + _lut[d3 >> 16 & 255] + _lut[d3 >> 24 & 255];
  return uuid.toUpperCase();
}
var assign = Object.assign || function() {
  let target2 = arguments[0];
  for (let i5 = 1, len = arguments.length; i5 < len; i5++) {
    let source = arguments[i5];
    if (source) {
      for (let prop in source) {
        if (source.hasOwnProperty(prop)) {
          target2[prop] = source[prop];
        }
      }
    }
  }
  return target2;
};
var epoch = Date.now();
var CONSTRUCTOR_CACHE = /* @__PURE__ */ new WeakMap();
var SHADER_UPGRADE_CACHE = /* @__PURE__ */ new Map();
var materialInstanceId = 1e10;
function createDerivedMaterial(baseMaterial, options) {
  const optionsKey = getKeyForOptions(options);
  let ctorsByDerivation = CONSTRUCTOR_CACHE.get(baseMaterial);
  if (!ctorsByDerivation) {
    CONSTRUCTOR_CACHE.set(baseMaterial, ctorsByDerivation = /* @__PURE__ */ Object.create(null));
  }
  if (ctorsByDerivation[optionsKey]) {
    return new ctorsByDerivation[optionsKey]();
  }
  const privateBeforeCompileProp = `_onBeforeCompile${optionsKey}`;
  const onBeforeCompile = function(shaderInfo) {
    baseMaterial.onBeforeCompile.call(this, shaderInfo);
    const cacheKey = this.customProgramCacheKey() + "|" + shaderInfo.vertexShader + "|" + shaderInfo.fragmentShader;
    let upgradedShaders = SHADER_UPGRADE_CACHE[cacheKey];
    if (!upgradedShaders) {
      const upgraded = upgradeShaders(shaderInfo, options, optionsKey);
      upgradedShaders = SHADER_UPGRADE_CACHE[cacheKey] = upgraded;
    }
    shaderInfo.vertexShader = upgradedShaders.vertexShader;
    shaderInfo.fragmentShader = upgradedShaders.fragmentShader;
    assign(shaderInfo.uniforms, this.uniforms);
    if (options.timeUniform) {
      shaderInfo.uniforms[options.timeUniform] = {
        get value() {
          return Date.now() - epoch;
        }
      };
    }
    if (this[privateBeforeCompileProp]) {
      this[privateBeforeCompileProp](shaderInfo);
    }
  };
  const DerivedMaterial = function DerivedMaterial2() {
    return derive(options.chained ? baseMaterial : baseMaterial.clone());
  };
  const derive = function(base) {
    const derived = Object.create(base, descriptor);
    Object.defineProperty(derived, "baseMaterial", { value: baseMaterial });
    Object.defineProperty(derived, "id", { value: materialInstanceId++ });
    derived.uuid = generateUUID();
    derived.uniforms = assign({}, base.uniforms, options.uniforms);
    derived.defines = assign({}, base.defines, options.defines);
    derived.defines[`TROIKA_DERIVED_MATERIAL_${optionsKey}`] = "";
    derived.extensions = assign({}, base.extensions, options.extensions);
    derived._listeners = void 0;
    return derived;
  };
  const descriptor = {
    constructor: { value: DerivedMaterial },
    isDerivedMaterial: { value: true },
    customProgramCacheKey: {
      writable: true,
      configurable: true,
      value: function() {
        return baseMaterial.customProgramCacheKey() + "|" + optionsKey;
      }
    },
    onBeforeCompile: {
      get() {
        return onBeforeCompile;
      },
      set(fn) {
        this[privateBeforeCompileProp] = fn;
      }
    },
    copy: {
      writable: true,
      configurable: true,
      value: function(source) {
        baseMaterial.copy.call(this, source);
        if (!baseMaterial.isShaderMaterial && !baseMaterial.isDerivedMaterial) {
          assign(this.extensions, source.extensions);
          assign(this.defines, source.defines);
          assign(this.uniforms, UniformsUtils.clone(source.uniforms));
        }
        return this;
      }
    },
    clone: {
      writable: true,
      configurable: true,
      value: function() {
        const newBase = new baseMaterial.constructor();
        return derive(newBase).copy(this);
      }
    },
    getDepthMaterial: {
      writable: true,
      configurable: true,
      value: function() {
        let depthMaterial = this._depthMaterial;
        if (!depthMaterial) {
          depthMaterial = this._depthMaterial = createDerivedMaterial(baseMaterial.isDerivedMaterial ? baseMaterial.getDepthMaterial() : new MeshDepthMaterial({ depthPacking: RGBADepthPacking }), options);
          depthMaterial.defines.IS_DEPTH_MATERIAL = "";
          depthMaterial.uniforms = this.uniforms;
        }
        return depthMaterial;
      }
    },
    getDistanceMaterial: {
      writable: true,
      configurable: true,
      value: function() {
        let distanceMaterial = this._distanceMaterial;
        if (!distanceMaterial) {
          distanceMaterial = this._distanceMaterial = createDerivedMaterial(baseMaterial.isDerivedMaterial ? baseMaterial.getDistanceMaterial() : new MeshDistanceMaterial(), options);
          distanceMaterial.defines.IS_DISTANCE_MATERIAL = "";
          distanceMaterial.uniforms = this.uniforms;
        }
        return distanceMaterial;
      }
    },
    dispose: {
      writable: true,
      configurable: true,
      value() {
        const { _depthMaterial, _distanceMaterial } = this;
        if (_depthMaterial)
          _depthMaterial.dispose();
        if (_distanceMaterial)
          _distanceMaterial.dispose();
        baseMaterial.dispose.call(this);
      }
    }
  };
  ctorsByDerivation[optionsKey] = DerivedMaterial;
  return new DerivedMaterial();
}
function upgradeShaders({ vertexShader: vertexShader2, fragmentShader: fragmentShader2 }, options, key) {
  let {
    vertexDefs,
    vertexMainIntro,
    vertexMainOutro,
    vertexTransform,
    fragmentDefs,
    fragmentMainIntro,
    fragmentMainOutro,
    fragmentColorTransform,
    customRewriter,
    timeUniform
  } = options;
  vertexDefs = vertexDefs || "";
  vertexMainIntro = vertexMainIntro || "";
  vertexMainOutro = vertexMainOutro || "";
  fragmentDefs = fragmentDefs || "";
  fragmentMainIntro = fragmentMainIntro || "";
  fragmentMainOutro = fragmentMainOutro || "";
  if (vertexTransform || customRewriter) {
    vertexShader2 = expandShaderIncludes(vertexShader2);
  }
  if (fragmentColorTransform || customRewriter) {
    fragmentShader2 = fragmentShader2.replace(/^[ \t]*#include <((?:tonemapping|encodings|fog|premultiplied_alpha|dithering)_fragment)>/gm, "\n//!BEGIN_POST_CHUNK $1\n$&\n//!END_POST_CHUNK\n");
    fragmentShader2 = expandShaderIncludes(fragmentShader2);
  }
  if (customRewriter) {
    let res = customRewriter({ vertexShader: vertexShader2, fragmentShader: fragmentShader2 });
    vertexShader2 = res.vertexShader;
    fragmentShader2 = res.fragmentShader;
  }
  if (fragmentColorTransform) {
    let postChunks = [];
    fragmentShader2 = fragmentShader2.replace(/^\/\/!BEGIN_POST_CHUNK[^]+?^\/\/!END_POST_CHUNK/gm, (match) => {
      postChunks.push(match);
      return "";
    });
    fragmentMainOutro = `${fragmentColorTransform}
${postChunks.join("\n")}
${fragmentMainOutro}`;
  }
  if (timeUniform) {
    const code = `
uniform float ${timeUniform};
`;
    vertexDefs = code + vertexDefs;
    fragmentDefs = code + fragmentDefs;
  }
  if (vertexTransform) {
    vertexShader2 = `vec3 troika_position_${key};
vec3 troika_normal_${key};
vec2 troika_uv_${key};
${vertexShader2}
`;
    vertexDefs = `${vertexDefs}
void troikaVertexTransform${key}(inout vec3 position, inout vec3 normal, inout vec2 uv) {
  ${vertexTransform}
}
`;
    vertexMainIntro = `
troika_position_${key} = vec3(position);
troika_normal_${key} = vec3(normal);
troika_uv_${key} = vec2(uv);
troikaVertexTransform${key}(troika_position_${key}, troika_normal_${key}, troika_uv_${key});
${vertexMainIntro}
`;
    vertexShader2 = vertexShader2.replace(/\b(position|normal|uv)\b/g, (match, match1, index, fullStr) => {
      return /\battribute\s+vec[23]\s+$/.test(fullStr.substr(0, index)) ? match1 : `troika_${match1}_${key}`;
    });
  }
  vertexShader2 = injectIntoShaderCode(vertexShader2, key, vertexDefs, vertexMainIntro, vertexMainOutro);
  fragmentShader2 = injectIntoShaderCode(fragmentShader2, key, fragmentDefs, fragmentMainIntro, fragmentMainOutro);
  return {
    vertexShader: vertexShader2,
    fragmentShader: fragmentShader2
  };
}
function injectIntoShaderCode(shaderCode, id, defs, intro, outro) {
  if (intro || outro || defs) {
    shaderCode = shaderCode.replace(voidMainRegExp, `
${defs}
void troikaOrigMain${id}() {`);
    shaderCode += `
void main() {
  ${intro}
  troikaOrigMain${id}();
  ${outro}
}`;
  }
  return shaderCode;
}
function optionsJsonReplacer(key, value) {
  return key === "uniforms" ? void 0 : typeof value === "function" ? value.toString() : value;
}
var _idCtr = 0;
var optionsHashesToIds = /* @__PURE__ */ new Map();
function getKeyForOptions(options) {
  const optionsHash = JSON.stringify(options, optionsJsonReplacer);
  let id = optionsHashesToIds.get(optionsHash);
  if (id == null) {
    optionsHashesToIds.set(optionsHash, id = ++_idCtr);
  }
  return id;
}
var defaultBaseMaterial = new MeshStandardMaterial({ color: 16777215, side: DoubleSide });

// node_modules/troika-three-text/dist/troika-three-text.esm.js
function createTypesetter(fontParser, bidi, config) {
  const {
    defaultFontURL
  } = config;
  const fonts = /* @__PURE__ */ Object.create(null);
  const INF = Infinity;
  const DEFAULT_IGNORABLE_CHARS = /[\u00AD\u034F\u061C\u115F-\u1160\u17B4-\u17B5\u180B-\u180E\u200B-\u200F\u202A-\u202E\u2060-\u206F\u3164\uFE00-\uFE0F\uFEFF\uFFA0\uFFF0-\uFFF8]/;
  const BREAK_AFTER_CHARS = /[\s\-\u007C\u00AD\u2010\u2012-\u2014\u2027\u2056\u2E17\u2E40]/;
  function doLoadFont(url, callback) {
    function tryLoad() {
      const onError = (err) => {
        console.error(`Failure loading font ${url}${url === defaultFontURL ? "" : "; trying fallback"}`, err);
        if (url !== defaultFontURL) {
          url = defaultFontURL;
          tryLoad();
        }
      };
      try {
        const request = new XMLHttpRequest();
        request.open("get", url, true);
        request.responseType = "arraybuffer";
        request.onload = function() {
          if (request.status >= 400) {
            onError(new Error(request.statusText));
          } else if (request.status > 0) {
            try {
              const fontObj = fontParser(request.response);
              callback(fontObj);
            } catch (e3) {
              onError(e3);
            }
          }
        };
        request.onerror = onError;
        request.send();
      } catch (err) {
        onError(err);
      }
    }
    tryLoad();
  }
  function loadFont(fontUrl, callback) {
    if (!fontUrl)
      fontUrl = defaultFontURL;
    let font = fonts[fontUrl];
    if (font) {
      if (font.pending) {
        font.pending.push(callback);
      } else {
        callback(font);
      }
    } else {
      fonts[fontUrl] = { pending: [callback] };
      doLoadFont(fontUrl, (fontObj) => {
        let callbacks = fonts[fontUrl].pending;
        fonts[fontUrl] = fontObj;
        callbacks.forEach((cb) => cb(fontObj));
      });
    }
  }
  function typeset({
    text = "",
    font = defaultFontURL,
    sdfGlyphSize = 64,
    fontSize = 1,
    letterSpacing = 0,
    lineHeight = "normal",
    maxWidth = INF,
    direction,
    textAlign = "left",
    textIndent = 0,
    whiteSpace = "normal",
    overflowWrap = "normal",
    anchorX = 0,
    anchorY = 0,
    includeCaretPositions = false,
    chunkedBoundsSize = 8192,
    colorRanges = null
  }, callback, metricsOnly = false) {
    const mainStart = now2();
    const timings = { fontLoad: 0, typesetting: 0 };
    if (text.indexOf("\r") > -1) {
      console.info("Typesetter: got text with \\r chars; normalizing to \\n");
      text = text.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
    }
    fontSize = +fontSize;
    letterSpacing = +letterSpacing;
    maxWidth = +maxWidth;
    lineHeight = lineHeight || "normal";
    textIndent = +textIndent;
    loadFont(font, (fontObj) => {
      const hasMaxWidth = isFinite(maxWidth);
      let glyphIds = null;
      let glyphPositions = null;
      let glyphData = null;
      let glyphColors = null;
      let caretPositions = null;
      let visibleBounds = null;
      let chunkedBounds = null;
      let maxLineWidth = 0;
      let renderableGlyphCount = 0;
      let canWrap = whiteSpace !== "nowrap";
      const { ascender, descender, unitsPerEm } = fontObj;
      timings.fontLoad = now2() - mainStart;
      const typesetStart = now2();
      const fontSizeMult = fontSize / unitsPerEm;
      if (lineHeight === "normal") {
        lineHeight = (ascender - descender) / unitsPerEm;
      }
      lineHeight = lineHeight * fontSize;
      const halfLeading = (lineHeight - (ascender - descender) * fontSizeMult) / 2;
      const topBaseline = -(ascender * fontSizeMult + halfLeading);
      const caretHeight = Math.min(lineHeight, (ascender - descender) * fontSizeMult);
      const caretBottomOffset = (ascender + descender) / 2 * fontSizeMult - caretHeight / 2;
      let lineXOffset = textIndent;
      let currentLine = new TextLine();
      const lines = [currentLine];
      fontObj.forEachGlyph(text, fontSize, letterSpacing, (glyphObj, glyphX, charIndex) => {
        const char = text.charAt(charIndex);
        const glyphWidth = glyphObj.advanceWidth * fontSizeMult;
        const curLineCount = currentLine.count;
        let nextLine;
        if (!("isEmpty" in glyphObj)) {
          glyphObj.isWhitespace = !!char && /\s/.test(char);
          glyphObj.canBreakAfter = !!char && BREAK_AFTER_CHARS.test(char);
          glyphObj.isEmpty = glyphObj.xMin === glyphObj.xMax || glyphObj.yMin === glyphObj.yMax || DEFAULT_IGNORABLE_CHARS.test(char);
        }
        if (!glyphObj.isWhitespace && !glyphObj.isEmpty) {
          renderableGlyphCount++;
        }
        if (canWrap && hasMaxWidth && !glyphObj.isWhitespace && glyphX + glyphWidth + lineXOffset > maxWidth && curLineCount) {
          if (currentLine.glyphAt(curLineCount - 1).glyphObj.canBreakAfter) {
            nextLine = new TextLine();
            lineXOffset = -glyphX;
          } else {
            for (let i5 = curLineCount; i5--; ) {
              if (i5 === 0 && overflowWrap === "break-word") {
                nextLine = new TextLine();
                lineXOffset = -glyphX;
                break;
              } else if (currentLine.glyphAt(i5).glyphObj.canBreakAfter) {
                nextLine = currentLine.splitAt(i5 + 1);
                const adjustX = nextLine.glyphAt(0).x;
                lineXOffset -= adjustX;
                for (let j = nextLine.count; j--; ) {
                  nextLine.glyphAt(j).x -= adjustX;
                }
                break;
              }
            }
          }
          if (nextLine) {
            currentLine.isSoftWrapped = true;
            currentLine = nextLine;
            lines.push(currentLine);
            maxLineWidth = maxWidth;
          }
        }
        let fly = currentLine.glyphAt(currentLine.count);
        fly.glyphObj = glyphObj;
        fly.x = glyphX + lineXOffset;
        fly.width = glyphWidth;
        fly.charIndex = charIndex;
        if (char === "\n") {
          currentLine = new TextLine();
          lines.push(currentLine);
          lineXOffset = -(glyphX + glyphWidth + letterSpacing * fontSize) + textIndent;
        }
      });
      lines.forEach((line) => {
        for (let i5 = line.count; i5--; ) {
          let { glyphObj, x, width } = line.glyphAt(i5);
          if (!glyphObj.isWhitespace) {
            line.width = x + width;
            if (line.width > maxLineWidth) {
              maxLineWidth = line.width;
            }
            return;
          }
        }
      });
      let anchorXOffset = 0;
      let anchorYOffset = 0;
      if (anchorX) {
        if (typeof anchorX === "number") {
          anchorXOffset = -anchorX;
        } else if (typeof anchorX === "string") {
          anchorXOffset = -maxLineWidth * (anchorX === "left" ? 0 : anchorX === "center" ? 0.5 : anchorX === "right" ? 1 : parsePercent(anchorX));
        }
      }
      if (anchorY) {
        if (typeof anchorY === "number") {
          anchorYOffset = -anchorY;
        } else if (typeof anchorY === "string") {
          let height = lines.length * lineHeight;
          anchorYOffset = anchorY === "top" ? 0 : anchorY === "top-baseline" ? -topBaseline : anchorY === "middle" ? height / 2 : anchorY === "bottom" ? height : anchorY === "bottom-baseline" ? height - halfLeading + descender * fontSizeMult : parsePercent(anchorY) * height;
        }
      }
      if (!metricsOnly) {
        const bidiLevelsResult = bidi.getEmbeddingLevels(text, direction);
        glyphIds = new Uint16Array(renderableGlyphCount);
        glyphPositions = new Float32Array(renderableGlyphCount * 2);
        glyphData = {};
        visibleBounds = [INF, INF, -INF, -INF];
        chunkedBounds = [];
        let lineYOffset = topBaseline;
        if (includeCaretPositions) {
          caretPositions = new Float32Array(text.length * 3);
        }
        if (colorRanges) {
          glyphColors = new Uint8Array(renderableGlyphCount * 3);
        }
        let renderableGlyphIndex = 0;
        let prevCharIndex = -1;
        let colorCharIndex = -1;
        let chunk;
        let currentColor;
        lines.forEach((line, lineIndex) => {
          let { count: lineGlyphCount, width: lineWidth } = line;
          if (lineGlyphCount > 0) {
            let trailingWhitespaceCount = 0;
            for (let i5 = lineGlyphCount; i5-- && line.glyphAt(i5).glyphObj.isWhitespace; ) {
              trailingWhitespaceCount++;
            }
            let lineXOffset2 = 0;
            let justifyAdjust = 0;
            if (textAlign === "center") {
              lineXOffset2 = (maxLineWidth - lineWidth) / 2;
            } else if (textAlign === "right") {
              lineXOffset2 = maxLineWidth - lineWidth;
            } else if (textAlign === "justify" && line.isSoftWrapped) {
              let whitespaceCount = 0;
              for (let i5 = lineGlyphCount - trailingWhitespaceCount; i5--; ) {
                if (line.glyphAt(i5).glyphObj.isWhitespace) {
                  whitespaceCount++;
                }
              }
              justifyAdjust = (maxLineWidth - lineWidth) / whitespaceCount;
            }
            if (justifyAdjust || lineXOffset2) {
              let justifyOffset = 0;
              for (let i5 = 0; i5 < lineGlyphCount; i5++) {
                let glyphInfo = line.glyphAt(i5);
                const glyphObj2 = glyphInfo.glyphObj;
                glyphInfo.x += lineXOffset2 + justifyOffset;
                if (justifyAdjust !== 0 && glyphObj2.isWhitespace && i5 < lineGlyphCount - trailingWhitespaceCount) {
                  justifyOffset += justifyAdjust;
                  glyphInfo.width += justifyAdjust;
                }
              }
            }
            const flips = bidi.getReorderSegments(text, bidiLevelsResult, line.glyphAt(0).charIndex, line.glyphAt(line.count - 1).charIndex);
            for (let fi = 0; fi < flips.length; fi++) {
              const [start, end] = flips[fi];
              let left = Infinity, right = -Infinity;
              for (let i5 = 0; i5 < lineGlyphCount; i5++) {
                if (line.glyphAt(i5).charIndex >= start) {
                  let startInLine = i5, endInLine = i5;
                  for (; endInLine < lineGlyphCount; endInLine++) {
                    let info = line.glyphAt(endInLine);
                    if (info.charIndex > end) {
                      break;
                    }
                    if (endInLine < lineGlyphCount - trailingWhitespaceCount) {
                      left = Math.min(left, info.x);
                      right = Math.max(right, info.x + info.width);
                    }
                  }
                  for (let j = startInLine; j < endInLine; j++) {
                    const glyphInfo = line.glyphAt(j);
                    glyphInfo.x = right - (glyphInfo.x + glyphInfo.width - left);
                  }
                  break;
                }
              }
            }
            let glyphObj;
            const setGlyphObj = (g) => glyphObj = g;
            for (let i5 = 0; i5 < lineGlyphCount; i5++) {
              let glyphInfo = line.glyphAt(i5);
              glyphObj = glyphInfo.glyphObj;
              const glyphId = glyphObj.index;
              const rtl = bidiLevelsResult.levels[glyphInfo.charIndex] & 1;
              if (rtl) {
                const mirrored = bidi.getMirroredCharacter(text[glyphInfo.charIndex]);
                if (mirrored) {
                  fontObj.forEachGlyph(mirrored, 0, 0, setGlyphObj);
                }
              }
              if (includeCaretPositions) {
                const { charIndex } = glyphInfo;
                const caretLeft = glyphInfo.x + anchorXOffset;
                const caretRight = glyphInfo.x + glyphInfo.width + anchorXOffset;
                caretPositions[charIndex * 3] = rtl ? caretRight : caretLeft;
                caretPositions[charIndex * 3 + 1] = rtl ? caretLeft : caretRight;
                caretPositions[charIndex * 3 + 2] = lineYOffset + caretBottomOffset + anchorYOffset;
                const ligCount = charIndex - prevCharIndex;
                if (ligCount > 1) {
                  fillLigatureCaretPositions(caretPositions, prevCharIndex, ligCount);
                }
                prevCharIndex = charIndex;
              }
              if (colorRanges) {
                const { charIndex } = glyphInfo;
                while (charIndex > colorCharIndex) {
                  colorCharIndex++;
                  if (colorRanges.hasOwnProperty(colorCharIndex)) {
                    currentColor = colorRanges[colorCharIndex];
                  }
                }
              }
              if (!glyphObj.isWhitespace && !glyphObj.isEmpty) {
                const idx = renderableGlyphIndex++;
                if (!glyphData[glyphId]) {
                  glyphData[glyphId] = {
                    path: glyphObj.path,
                    pathBounds: [glyphObj.xMin, glyphObj.yMin, glyphObj.xMax, glyphObj.yMax]
                  };
                }
                const glyphX = glyphInfo.x + anchorXOffset;
                const glyphY = lineYOffset + anchorYOffset;
                glyphPositions[idx * 2] = glyphX;
                glyphPositions[idx * 2 + 1] = glyphY;
                const visX0 = glyphX + glyphObj.xMin * fontSizeMult;
                const visY0 = glyphY + glyphObj.yMin * fontSizeMult;
                const visX1 = glyphX + glyphObj.xMax * fontSizeMult;
                const visY1 = glyphY + glyphObj.yMax * fontSizeMult;
                if (visX0 < visibleBounds[0])
                  visibleBounds[0] = visX0;
                if (visY0 < visibleBounds[1])
                  visibleBounds[1] = visY0;
                if (visX1 > visibleBounds[2])
                  visibleBounds[2] = visX1;
                if (visY1 > visibleBounds[3])
                  visibleBounds[3] = visY1;
                if (idx % chunkedBoundsSize === 0) {
                  chunk = { start: idx, end: idx, rect: [INF, INF, -INF, -INF] };
                  chunkedBounds.push(chunk);
                }
                chunk.end++;
                const chunkRect = chunk.rect;
                if (visX0 < chunkRect[0])
                  chunkRect[0] = visX0;
                if (visY0 < chunkRect[1])
                  chunkRect[1] = visY0;
                if (visX1 > chunkRect[2])
                  chunkRect[2] = visX1;
                if (visY1 > chunkRect[3])
                  chunkRect[3] = visY1;
                glyphIds[idx] = glyphId;
                if (colorRanges) {
                  const start = idx * 3;
                  glyphColors[start] = currentColor >> 16 & 255;
                  glyphColors[start + 1] = currentColor >> 8 & 255;
                  glyphColors[start + 2] = currentColor & 255;
                }
              }
            }
          }
          lineYOffset -= lineHeight;
        });
        if (caretPositions) {
          const ligCount = text.length - prevCharIndex;
          if (ligCount > 1) {
            fillLigatureCaretPositions(caretPositions, prevCharIndex, ligCount);
          }
        }
      }
      timings.typesetting = now2() - typesetStart;
      callback({
        glyphIds,
        glyphPositions,
        glyphData,
        caretPositions,
        caretHeight,
        glyphColors,
        chunkedBounds,
        fontSize,
        unitsPerEm,
        ascender: ascender * fontSizeMult,
        descender: descender * fontSizeMult,
        lineHeight,
        topBaseline,
        blockBounds: [
          anchorXOffset,
          anchorYOffset - lines.length * lineHeight,
          anchorXOffset + maxLineWidth,
          anchorYOffset
        ],
        visibleBounds,
        timings
      });
    });
  }
  function measure(args, callback) {
    typeset(args, (result) => {
      const [x0, y0, x1, y1] = result.blockBounds;
      callback({
        width: x1 - x0,
        height: y1 - y0
      });
    }, { metricsOnly: true });
  }
  function parsePercent(str) {
    let match = str.match(/^([\d.]+)%$/);
    let pct = match ? parseFloat(match[1]) : NaN;
    return isNaN(pct) ? 0 : pct / 100;
  }
  function fillLigatureCaretPositions(caretPositions, ligStartIndex, ligCount) {
    const ligStartX = caretPositions[ligStartIndex * 3];
    const ligEndX = caretPositions[ligStartIndex * 3 + 1];
    const ligY = caretPositions[ligStartIndex * 3 + 2];
    const guessedAdvanceX = (ligEndX - ligStartX) / ligCount;
    for (let i5 = 0; i5 < ligCount; i5++) {
      const startIndex = (ligStartIndex + i5) * 3;
      caretPositions[startIndex] = ligStartX + guessedAdvanceX * i5;
      caretPositions[startIndex + 1] = ligStartX + guessedAdvanceX * (i5 + 1);
      caretPositions[startIndex + 2] = ligY;
    }
  }
  function now2() {
    return (self.performance || Date).now();
  }
  function TextLine() {
    this.data = [];
  }
  const textLineProps = ["glyphObj", "x", "width", "charIndex"];
  TextLine.prototype = {
    width: 0,
    isSoftWrapped: false,
    get count() {
      return Math.ceil(this.data.length / textLineProps.length);
    },
    glyphAt(i5) {
      let fly = TextLine.flyweight;
      fly.data = this.data;
      fly.index = i5;
      return fly;
    },
    splitAt(i5) {
      let newLine = new TextLine();
      newLine.data = this.data.splice(i5 * textLineProps.length);
      return newLine;
    }
  };
  TextLine.flyweight = textLineProps.reduce((obj, prop, i5, all) => {
    Object.defineProperty(obj, prop, {
      get() {
        return this.data[this.index * textLineProps.length + i5];
      },
      set(val) {
        this.data[this.index * textLineProps.length + i5] = val;
      }
    });
    return obj;
  }, { data: null, index: 0 });
  return {
    typeset,
    measure,
    loadFont
  };
}
var now = () => (self.performance || Date).now();
var mainThreadGenerator = SDFGenerator();
var warned;
function generateSDF(width, height, path, viewBox, distance, exponent, canvas, x, y, channel, useWebGL = true) {
  if (!useWebGL) {
    return generateSDF_JS_Worker(width, height, path, viewBox, distance, exponent, canvas, x, y, channel);
  }
  return generateSDF_GL(width, height, path, viewBox, distance, exponent, canvas, x, y, channel).then(null, (err) => {
    if (!warned) {
      console.warn(`WebGL SDF generation failed, falling back to JS`, err);
      warned = true;
    }
    return generateSDF_JS_Worker(width, height, path, viewBox, distance, exponent, canvas, x, y, channel);
  });
}
var generateSDF_GL = function() {
  const queue = [];
  const chunkTimeBudget = 5;
  let timer = 0;
  function nextChunk() {
    const start = now();
    while (queue.length && now() - start < chunkTimeBudget) {
      queue.shift()();
    }
    timer = queue.length ? setTimeout(nextChunk, 0) : 0;
  }
  return (...args) => {
    const thenable = DefaultThenable();
    queue.push(() => {
      const start = now();
      try {
        mainThreadGenerator.webgl.generateIntoCanvas(...args);
        thenable.resolve({ timing: now() - start });
      } catch (err) {
        thenable.reject(err);
      }
    });
    if (!timer) {
      timer = setTimeout(nextChunk, 0);
    }
    return thenable;
  };
}();
var generateSDF_JS_Worker = function() {
  const threadCount = 4;
  const idleTimeout = 2e3;
  const threads = {};
  let callNum = 0;
  return function(width, height, path, viewBox, distance, exponent, canvas, x, y, channel) {
    const workerId = "TroikaTextSDFGenerator_JS_" + callNum++ % threadCount;
    let thread = threads[workerId];
    if (!thread) {
      thread = threads[workerId] = {
        workerModule: defineWorkerModule({
          name: workerId,
          workerId,
          dependencies: [
            SDFGenerator,
            now
          ],
          init(_createSDFGenerator, now2) {
            const generate = _createSDFGenerator().javascript.generate;
            return function(...args) {
              const start = now2();
              const textureData = generate(...args);
              return {
                textureData,
                timing: now2() - start
              };
            };
          },
          getTransferables(result) {
            return [result.textureData.buffer];
          }
        }),
        requests: 0,
        idleTimer: null
      };
    }
    thread.requests++;
    clearTimeout(thread.idleTimer);
    return thread.workerModule(width, height, path, viewBox, distance, exponent).then(({ textureData, timing }) => {
      const start = now();
      const imageData = new Uint8Array(textureData.length * 4);
      for (let i5 = 0; i5 < textureData.length; i5++) {
        imageData[i5 * 4 + channel] = textureData[i5];
      }
      mainThreadGenerator.webglUtils.renderImageData(canvas, imageData, x, y, width, height, 1 << 3 - channel);
      timing += now() - start;
      if (--thread.requests === 0) {
        thread.idleTimer = setTimeout(() => {
          terminateWorker(workerId);
        }, idleTimeout);
      }
      return { timing };
    });
  };
}();
function warmUpSDFCanvas(canvas) {
  if (!canvas._warm) {
    mainThreadGenerator.webgl.isSupported(canvas);
    canvas._warm = true;
  }
}
var resizeWebGLCanvasWithoutClearing = mainThreadGenerator.webglUtils.resizeWebGLCanvasWithoutClearing;
function typrFactory() {
  return typeof window == "undefined" && (self.window = self), function(r3) {
    var e3 = { parse: function(r4) {
      var t3 = e3._bin, a3 = new Uint8Array(r4);
      if (t3.readASCII(a3, 0, 4) == "ttcf") {
        var n2 = 4;
        t3.readUshort(a3, n2), n2 += 2, t3.readUshort(a3, n2), n2 += 2;
        var o2 = t3.readUint(a3, n2);
        n2 += 4;
        for (var s3 = [], i5 = 0; i5 < o2; i5++) {
          var h = t3.readUint(a3, n2);
          n2 += 4, s3.push(e3._readFont(a3, h));
        }
        return s3;
      }
      return [e3._readFont(a3, 0)];
    }, _readFont: function(r4, t3) {
      var a3 = e3._bin, n2 = t3;
      a3.readFixed(r4, t3), t3 += 4;
      var o2 = a3.readUshort(r4, t3);
      t3 += 2, a3.readUshort(r4, t3), t3 += 2, a3.readUshort(r4, t3), t3 += 2, a3.readUshort(r4, t3), t3 += 2;
      for (var s3 = ["cmap", "head", "hhea", "maxp", "hmtx", "name", "OS/2", "post", "loca", "glyf", "kern", "CFF ", "GPOS", "GSUB", "SVG "], i5 = { _data: r4, _offset: n2 }, h = {}, f2 = 0; f2 < o2; f2++) {
        var d2 = a3.readASCII(r4, t3, 4);
        t3 += 4, a3.readUint(r4, t3), t3 += 4;
        var l2 = a3.readUint(r4, t3);
        t3 += 4;
        var u = a3.readUint(r4, t3);
        t3 += 4, h[d2] = { offset: l2, length: u };
      }
      for (f2 = 0; f2 < s3.length; f2++) {
        var v4 = s3[f2];
        h[v4] && (i5[v4.trim()] = e3[v4.trim()].parse(r4, h[v4].offset, h[v4].length, i5));
      }
      return i5;
    }, _tabOffset: function(r4, t3, a3) {
      for (var n2 = e3._bin, o2 = n2.readUshort(r4, a3 + 4), s3 = a3 + 12, i5 = 0; i5 < o2; i5++) {
        var h = n2.readASCII(r4, s3, 4);
        s3 += 4, n2.readUint(r4, s3), s3 += 4;
        var f2 = n2.readUint(r4, s3);
        if (s3 += 4, n2.readUint(r4, s3), s3 += 4, h == t3)
          return f2;
      }
      return 0;
    } };
    e3._bin = { readFixed: function(r4, e4) {
      return (r4[e4] << 8 | r4[e4 + 1]) + (r4[e4 + 2] << 8 | r4[e4 + 3]) / 65540;
    }, readF2dot14: function(r4, t3) {
      return e3._bin.readShort(r4, t3) / 16384;
    }, readInt: function(r4, t3) {
      return e3._bin._view(r4).getInt32(t3);
    }, readInt8: function(r4, t3) {
      return e3._bin._view(r4).getInt8(t3);
    }, readShort: function(r4, t3) {
      return e3._bin._view(r4).getInt16(t3);
    }, readUshort: function(r4, t3) {
      return e3._bin._view(r4).getUint16(t3);
    }, readUshorts: function(r4, t3, a3) {
      for (var n2 = [], o2 = 0; o2 < a3; o2++)
        n2.push(e3._bin.readUshort(r4, t3 + 2 * o2));
      return n2;
    }, readUint: function(r4, t3) {
      return e3._bin._view(r4).getUint32(t3);
    }, readUint64: function(r4, t3) {
      return 4294967296 * e3._bin.readUint(r4, t3) + e3._bin.readUint(r4, t3 + 4);
    }, readASCII: function(r4, e4, t3) {
      for (var a3 = "", n2 = 0; n2 < t3; n2++)
        a3 += String.fromCharCode(r4[e4 + n2]);
      return a3;
    }, readUnicode: function(r4, e4, t3) {
      for (var a3 = "", n2 = 0; n2 < t3; n2++) {
        var o2 = r4[e4++] << 8 | r4[e4++];
        a3 += String.fromCharCode(o2);
      }
      return a3;
    }, _tdec: typeof window != "undefined" && window.TextDecoder ? new window.TextDecoder() : null, readUTF8: function(r4, t3, a3) {
      var n2 = e3._bin._tdec;
      return n2 && t3 == 0 && a3 == r4.length ? n2.decode(r4) : e3._bin.readASCII(r4, t3, a3);
    }, readBytes: function(r4, e4, t3) {
      for (var a3 = [], n2 = 0; n2 < t3; n2++)
        a3.push(r4[e4 + n2]);
      return a3;
    }, readASCIIArray: function(r4, e4, t3) {
      for (var a3 = [], n2 = 0; n2 < t3; n2++)
        a3.push(String.fromCharCode(r4[e4 + n2]));
      return a3;
    }, _view: function(r4) {
      return r4._dataView || (r4._dataView = r4.buffer ? new DataView(r4.buffer, r4.byteOffset, r4.byteLength) : new DataView(new Uint8Array(r4).buffer));
    } }, e3._lctf = {}, e3._lctf.parse = function(r4, t3, a3, n2, o2) {
      var s3 = e3._bin, i5 = {}, h = t3;
      s3.readFixed(r4, t3), t3 += 4;
      var f2 = s3.readUshort(r4, t3);
      t3 += 2;
      var d2 = s3.readUshort(r4, t3);
      t3 += 2;
      var l2 = s3.readUshort(r4, t3);
      return t3 += 2, i5.scriptList = e3._lctf.readScriptList(r4, h + f2), i5.featureList = e3._lctf.readFeatureList(r4, h + d2), i5.lookupList = e3._lctf.readLookupList(r4, h + l2, o2), i5;
    }, e3._lctf.readLookupList = function(r4, t3, a3) {
      var n2 = e3._bin, o2 = t3, s3 = [], i5 = n2.readUshort(r4, t3);
      t3 += 2;
      for (var h = 0; h < i5; h++) {
        var f2 = n2.readUshort(r4, t3);
        t3 += 2;
        var d2 = e3._lctf.readLookupTable(r4, o2 + f2, a3);
        s3.push(d2);
      }
      return s3;
    }, e3._lctf.readLookupTable = function(r4, t3, a3) {
      var n2 = e3._bin, o2 = t3, s3 = { tabs: [] };
      s3.ltype = n2.readUshort(r4, t3), t3 += 2, s3.flag = n2.readUshort(r4, t3), t3 += 2;
      var i5 = n2.readUshort(r4, t3);
      t3 += 2;
      for (var h = s3.ltype, f2 = 0; f2 < i5; f2++) {
        var d2 = n2.readUshort(r4, t3);
        t3 += 2;
        var l2 = a3(r4, h, o2 + d2, s3);
        s3.tabs.push(l2);
      }
      return s3;
    }, e3._lctf.numOfOnes = function(r4) {
      for (var e4 = 0, t3 = 0; t3 < 32; t3++)
        (r4 >>> t3 & 1) != 0 && e4++;
      return e4;
    }, e3._lctf.readClassDef = function(r4, t3) {
      var a3 = e3._bin, n2 = [], o2 = a3.readUshort(r4, t3);
      if (t3 += 2, o2 == 1) {
        var s3 = a3.readUshort(r4, t3);
        t3 += 2;
        var i5 = a3.readUshort(r4, t3);
        t3 += 2;
        for (var h = 0; h < i5; h++)
          n2.push(s3 + h), n2.push(s3 + h), n2.push(a3.readUshort(r4, t3)), t3 += 2;
      }
      if (o2 == 2) {
        var f2 = a3.readUshort(r4, t3);
        t3 += 2;
        for (h = 0; h < f2; h++)
          n2.push(a3.readUshort(r4, t3)), t3 += 2, n2.push(a3.readUshort(r4, t3)), t3 += 2, n2.push(a3.readUshort(r4, t3)), t3 += 2;
      }
      return n2;
    }, e3._lctf.getInterval = function(r4, e4) {
      for (var t3 = 0; t3 < r4.length; t3 += 3) {
        var a3 = r4[t3], n2 = r4[t3 + 1];
        if (r4[t3 + 2], a3 <= e4 && e4 <= n2)
          return t3;
      }
      return -1;
    }, e3._lctf.readCoverage = function(r4, t3) {
      var a3 = e3._bin, n2 = {};
      n2.fmt = a3.readUshort(r4, t3), t3 += 2;
      var o2 = a3.readUshort(r4, t3);
      return t3 += 2, n2.fmt == 1 && (n2.tab = a3.readUshorts(r4, t3, o2)), n2.fmt == 2 && (n2.tab = a3.readUshorts(r4, t3, 3 * o2)), n2;
    }, e3._lctf.coverageIndex = function(r4, t3) {
      var a3 = r4.tab;
      if (r4.fmt == 1)
        return a3.indexOf(t3);
      if (r4.fmt == 2) {
        var n2 = e3._lctf.getInterval(a3, t3);
        if (n2 != -1)
          return a3[n2 + 2] + (t3 - a3[n2]);
      }
      return -1;
    }, e3._lctf.readFeatureList = function(r4, t3) {
      var a3 = e3._bin, n2 = t3, o2 = [], s3 = a3.readUshort(r4, t3);
      t3 += 2;
      for (var i5 = 0; i5 < s3; i5++) {
        var h = a3.readASCII(r4, t3, 4);
        t3 += 4;
        var f2 = a3.readUshort(r4, t3);
        t3 += 2;
        var d2 = e3._lctf.readFeatureTable(r4, n2 + f2);
        d2.tag = h.trim(), o2.push(d2);
      }
      return o2;
    }, e3._lctf.readFeatureTable = function(r4, t3) {
      var a3 = e3._bin, n2 = t3, o2 = {}, s3 = a3.readUshort(r4, t3);
      t3 += 2, s3 > 0 && (o2.featureParams = n2 + s3);
      var i5 = a3.readUshort(r4, t3);
      t3 += 2, o2.tab = [];
      for (var h = 0; h < i5; h++)
        o2.tab.push(a3.readUshort(r4, t3 + 2 * h));
      return o2;
    }, e3._lctf.readScriptList = function(r4, t3) {
      var a3 = e3._bin, n2 = t3, o2 = {}, s3 = a3.readUshort(r4, t3);
      t3 += 2;
      for (var i5 = 0; i5 < s3; i5++) {
        var h = a3.readASCII(r4, t3, 4);
        t3 += 4;
        var f2 = a3.readUshort(r4, t3);
        t3 += 2, o2[h.trim()] = e3._lctf.readScriptTable(r4, n2 + f2);
      }
      return o2;
    }, e3._lctf.readScriptTable = function(r4, t3) {
      var a3 = e3._bin, n2 = t3, o2 = {}, s3 = a3.readUshort(r4, t3);
      t3 += 2, o2.default = e3._lctf.readLangSysTable(r4, n2 + s3);
      var i5 = a3.readUshort(r4, t3);
      t3 += 2;
      for (var h = 0; h < i5; h++) {
        var f2 = a3.readASCII(r4, t3, 4);
        t3 += 4;
        var d2 = a3.readUshort(r4, t3);
        t3 += 2, o2[f2.trim()] = e3._lctf.readLangSysTable(r4, n2 + d2);
      }
      return o2;
    }, e3._lctf.readLangSysTable = function(r4, t3) {
      var a3 = e3._bin, n2 = {};
      a3.readUshort(r4, t3), t3 += 2, n2.reqFeature = a3.readUshort(r4, t3), t3 += 2;
      var o2 = a3.readUshort(r4, t3);
      return t3 += 2, n2.features = a3.readUshorts(r4, t3, o2), n2;
    }, e3.CFF = {}, e3.CFF.parse = function(r4, t3, a3) {
      var n2 = e3._bin;
      (r4 = new Uint8Array(r4.buffer, t3, a3))[t3 = 0], r4[++t3], r4[++t3], r4[++t3], t3++;
      var o2 = [];
      t3 = e3.CFF.readIndex(r4, t3, o2);
      for (var s3 = [], i5 = 0; i5 < o2.length - 1; i5++)
        s3.push(n2.readASCII(r4, t3 + o2[i5], o2[i5 + 1] - o2[i5]));
      t3 += o2[o2.length - 1];
      var h = [];
      t3 = e3.CFF.readIndex(r4, t3, h);
      var f2 = [];
      for (i5 = 0; i5 < h.length - 1; i5++)
        f2.push(e3.CFF.readDict(r4, t3 + h[i5], t3 + h[i5 + 1]));
      t3 += h[h.length - 1];
      var d2 = f2[0], l2 = [];
      t3 = e3.CFF.readIndex(r4, t3, l2);
      var u = [];
      for (i5 = 0; i5 < l2.length - 1; i5++)
        u.push(n2.readASCII(r4, t3 + l2[i5], l2[i5 + 1] - l2[i5]));
      if (t3 += l2[l2.length - 1], e3.CFF.readSubrs(r4, t3, d2), d2.CharStrings) {
        t3 = d2.CharStrings;
        l2 = [];
        t3 = e3.CFF.readIndex(r4, t3, l2);
        var v4 = [];
        for (i5 = 0; i5 < l2.length - 1; i5++)
          v4.push(n2.readBytes(r4, t3 + l2[i5], l2[i5 + 1] - l2[i5]));
        d2.CharStrings = v4;
      }
      if (d2.ROS) {
        t3 = d2.FDArray;
        var c2 = [];
        t3 = e3.CFF.readIndex(r4, t3, c2), d2.FDArray = [];
        for (i5 = 0; i5 < c2.length - 1; i5++) {
          var p = e3.CFF.readDict(r4, t3 + c2[i5], t3 + c2[i5 + 1]);
          e3.CFF._readFDict(r4, p, u), d2.FDArray.push(p);
        }
        t3 += c2[c2.length - 1], t3 = d2.FDSelect, d2.FDSelect = [];
        var U = r4[t3];
        if (t3++, U != 3)
          throw U;
        var g = n2.readUshort(r4, t3);
        t3 += 2;
        for (i5 = 0; i5 < g + 1; i5++)
          d2.FDSelect.push(n2.readUshort(r4, t3), r4[t3 + 2]), t3 += 3;
      }
      return d2.Encoding && (d2.Encoding = e3.CFF.readEncoding(r4, d2.Encoding, d2.CharStrings.length)), d2.charset && (d2.charset = e3.CFF.readCharset(r4, d2.charset, d2.CharStrings.length)), e3.CFF._readFDict(r4, d2, u), d2;
    }, e3.CFF._readFDict = function(r4, t3, a3) {
      var n2;
      for (var o2 in t3.Private && (n2 = t3.Private[1], t3.Private = e3.CFF.readDict(r4, n2, n2 + t3.Private[0]), t3.Private.Subrs && e3.CFF.readSubrs(r4, n2 + t3.Private.Subrs, t3.Private)), t3)
        ["FamilyName", "FontName", "FullName", "Notice", "version", "Copyright"].indexOf(o2) != -1 && (t3[o2] = a3[t3[o2] - 426 + 35]);
    }, e3.CFF.readSubrs = function(r4, t3, a3) {
      var n2 = e3._bin, o2 = [];
      t3 = e3.CFF.readIndex(r4, t3, o2);
      var s3, i5 = o2.length;
      s3 = i5 < 1240 ? 107 : i5 < 33900 ? 1131 : 32768, a3.Bias = s3, a3.Subrs = [];
      for (var h = 0; h < o2.length - 1; h++)
        a3.Subrs.push(n2.readBytes(r4, t3 + o2[h], o2[h + 1] - o2[h]));
    }, e3.CFF.tableSE = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 0, 111, 112, 113, 114, 0, 115, 116, 117, 118, 119, 120, 121, 122, 0, 123, 0, 124, 125, 126, 127, 128, 129, 130, 131, 0, 132, 133, 0, 134, 135, 136, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 138, 0, 139, 0, 0, 0, 0, 140, 141, 142, 143, 0, 0, 0, 0, 0, 144, 0, 0, 0, 145, 0, 0, 146, 147, 148, 149, 0, 0, 0, 0], e3.CFF.glyphByUnicode = function(r4, e4) {
      for (var t3 = 0; t3 < r4.charset.length; t3++)
        if (r4.charset[t3] == e4)
          return t3;
      return -1;
    }, e3.CFF.glyphBySE = function(r4, t3) {
      return t3 < 0 || t3 > 255 ? -1 : e3.CFF.glyphByUnicode(r4, e3.CFF.tableSE[t3]);
    }, e3.CFF.readEncoding = function(r4, t3, a3) {
      e3._bin;
      var n2 = [".notdef"], o2 = r4[t3];
      if (t3++, o2 != 0)
        throw "error: unknown encoding format: " + o2;
      var s3 = r4[t3];
      t3++;
      for (var i5 = 0; i5 < s3; i5++)
        n2.push(r4[t3 + i5]);
      return n2;
    }, e3.CFF.readCharset = function(r4, t3, a3) {
      var n2 = e3._bin, o2 = [".notdef"], s3 = r4[t3];
      if (t3++, s3 == 0)
        for (var i5 = 0; i5 < a3; i5++) {
          var h = n2.readUshort(r4, t3);
          t3 += 2, o2.push(h);
        }
      else {
        if (s3 != 1 && s3 != 2)
          throw "error: format: " + s3;
        for (; o2.length < a3; ) {
          h = n2.readUshort(r4, t3);
          t3 += 2;
          var f2 = 0;
          s3 == 1 ? (f2 = r4[t3], t3++) : (f2 = n2.readUshort(r4, t3), t3 += 2);
          for (i5 = 0; i5 <= f2; i5++)
            o2.push(h), h++;
        }
      }
      return o2;
    }, e3.CFF.readIndex = function(r4, t3, a3) {
      var n2 = e3._bin, o2 = n2.readUshort(r4, t3) + 1, s3 = r4[t3 += 2];
      if (t3++, s3 == 1)
        for (var i5 = 0; i5 < o2; i5++)
          a3.push(r4[t3 + i5]);
      else if (s3 == 2)
        for (i5 = 0; i5 < o2; i5++)
          a3.push(n2.readUshort(r4, t3 + 2 * i5));
      else if (s3 == 3)
        for (i5 = 0; i5 < o2; i5++)
          a3.push(16777215 & n2.readUint(r4, t3 + 3 * i5 - 1));
      else if (o2 != 1)
        throw "unsupported offset size: " + s3 + ", count: " + o2;
      return (t3 += o2 * s3) - 1;
    }, e3.CFF.getCharString = function(r4, t3, a3) {
      var n2 = e3._bin, o2 = r4[t3], s3 = r4[t3 + 1];
      r4[t3 + 2], r4[t3 + 3], r4[t3 + 4];
      var i5 = 1, h = null, f2 = null;
      o2 <= 20 && (h = o2, i5 = 1), o2 == 12 && (h = 100 * o2 + s3, i5 = 2), 21 <= o2 && o2 <= 27 && (h = o2, i5 = 1), o2 == 28 && (f2 = n2.readShort(r4, t3 + 1), i5 = 3), 29 <= o2 && o2 <= 31 && (h = o2, i5 = 1), 32 <= o2 && o2 <= 246 && (f2 = o2 - 139, i5 = 1), 247 <= o2 && o2 <= 250 && (f2 = 256 * (o2 - 247) + s3 + 108, i5 = 2), 251 <= o2 && o2 <= 254 && (f2 = 256 * -(o2 - 251) - s3 - 108, i5 = 2), o2 == 255 && (f2 = n2.readInt(r4, t3 + 1) / 65535, i5 = 5), a3.val = f2 != null ? f2 : "o" + h, a3.size = i5;
    }, e3.CFF.readCharString = function(r4, t3, a3) {
      for (var n2 = t3 + a3, o2 = e3._bin, s3 = []; t3 < n2; ) {
        var i5 = r4[t3], h = r4[t3 + 1];
        r4[t3 + 2], r4[t3 + 3], r4[t3 + 4];
        var f2 = 1, d2 = null, l2 = null;
        i5 <= 20 && (d2 = i5, f2 = 1), i5 == 12 && (d2 = 100 * i5 + h, f2 = 2), i5 != 19 && i5 != 20 || (d2 = i5, f2 = 2), 21 <= i5 && i5 <= 27 && (d2 = i5, f2 = 1), i5 == 28 && (l2 = o2.readShort(r4, t3 + 1), f2 = 3), 29 <= i5 && i5 <= 31 && (d2 = i5, f2 = 1), 32 <= i5 && i5 <= 246 && (l2 = i5 - 139, f2 = 1), 247 <= i5 && i5 <= 250 && (l2 = 256 * (i5 - 247) + h + 108, f2 = 2), 251 <= i5 && i5 <= 254 && (l2 = 256 * -(i5 - 251) - h - 108, f2 = 2), i5 == 255 && (l2 = o2.readInt(r4, t3 + 1) / 65535, f2 = 5), s3.push(l2 != null ? l2 : "o" + d2), t3 += f2;
      }
      return s3;
    }, e3.CFF.readDict = function(r4, t3, a3) {
      for (var n2 = e3._bin, o2 = {}, s3 = []; t3 < a3; ) {
        var i5 = r4[t3], h = r4[t3 + 1];
        r4[t3 + 2], r4[t3 + 3], r4[t3 + 4];
        var f2 = 1, d2 = null, l2 = null;
        if (i5 == 28 && (l2 = n2.readShort(r4, t3 + 1), f2 = 3), i5 == 29 && (l2 = n2.readInt(r4, t3 + 1), f2 = 5), 32 <= i5 && i5 <= 246 && (l2 = i5 - 139, f2 = 1), 247 <= i5 && i5 <= 250 && (l2 = 256 * (i5 - 247) + h + 108, f2 = 2), 251 <= i5 && i5 <= 254 && (l2 = 256 * -(i5 - 251) - h - 108, f2 = 2), i5 == 255)
          throw l2 = n2.readInt(r4, t3 + 1) / 65535, f2 = 5, "unknown number";
        if (i5 == 30) {
          var u = [];
          for (f2 = 1; ; ) {
            var v4 = r4[t3 + f2];
            f2++;
            var c2 = v4 >> 4, p = 15 & v4;
            if (c2 != 15 && u.push(c2), p != 15 && u.push(p), p == 15)
              break;
          }
          for (var U = "", g = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ".", "e", "e-", "reserved", "-", "endOfNumber"], S = 0; S < u.length; S++)
            U += g[u[S]];
          l2 = parseFloat(U);
        }
        if (i5 <= 21) {
          if (d2 = ["version", "Notice", "FullName", "FamilyName", "Weight", "FontBBox", "BlueValues", "OtherBlues", "FamilyBlues", "FamilyOtherBlues", "StdHW", "StdVW", "escape", "UniqueID", "XUID", "charset", "Encoding", "CharStrings", "Private", "Subrs", "defaultWidthX", "nominalWidthX"][i5], f2 = 1, i5 == 12)
            d2 = ["Copyright", "isFixedPitch", "ItalicAngle", "UnderlinePosition", "UnderlineThickness", "PaintType", "CharstringType", "FontMatrix", "StrokeWidth", "BlueScale", "BlueShift", "BlueFuzz", "StemSnapH", "StemSnapV", "ForceBold", 0, 0, "LanguageGroup", "ExpansionFactor", "initialRandomSeed", "SyntheticBase", "PostScript", "BaseFontName", "BaseFontBlend", 0, 0, 0, 0, 0, 0, "ROS", "CIDFontVersion", "CIDFontRevision", "CIDFontType", "CIDCount", "UIDBase", "FDArray", "FDSelect", "FontName"][h], f2 = 2;
        }
        d2 != null ? (o2[d2] = s3.length == 1 ? s3[0] : s3, s3 = []) : s3.push(l2), t3 += f2;
      }
      return o2;
    }, e3.cmap = {}, e3.cmap.parse = function(r4, t3, a3) {
      r4 = new Uint8Array(r4.buffer, t3, a3), t3 = 0;
      var n2 = e3._bin, o2 = {};
      n2.readUshort(r4, t3), t3 += 2;
      var s3 = n2.readUshort(r4, t3);
      t3 += 2;
      var i5 = [];
      o2.tables = [];
      for (var h = 0; h < s3; h++) {
        var f2 = n2.readUshort(r4, t3);
        t3 += 2;
        var d2 = n2.readUshort(r4, t3);
        t3 += 2;
        var l2 = n2.readUint(r4, t3);
        t3 += 4;
        var u = "p" + f2 + "e" + d2, v4 = i5.indexOf(l2);
        if (v4 == -1) {
          var c2;
          v4 = o2.tables.length, i5.push(l2);
          var p = n2.readUshort(r4, l2);
          p == 0 ? c2 = e3.cmap.parse0(r4, l2) : p == 4 ? c2 = e3.cmap.parse4(r4, l2) : p == 6 ? c2 = e3.cmap.parse6(r4, l2) : p == 12 ? c2 = e3.cmap.parse12(r4, l2) : console.debug("unknown format: " + p, f2, d2, l2), o2.tables.push(c2);
        }
        if (o2[u] != null)
          throw "multiple tables for one platform+encoding";
        o2[u] = v4;
      }
      return o2;
    }, e3.cmap.parse0 = function(r4, t3) {
      var a3 = e3._bin, n2 = {};
      n2.format = a3.readUshort(r4, t3), t3 += 2;
      var o2 = a3.readUshort(r4, t3);
      t3 += 2, a3.readUshort(r4, t3), t3 += 2, n2.map = [];
      for (var s3 = 0; s3 < o2 - 6; s3++)
        n2.map.push(r4[t3 + s3]);
      return n2;
    }, e3.cmap.parse4 = function(r4, t3) {
      var a3 = e3._bin, n2 = t3, o2 = {};
      o2.format = a3.readUshort(r4, t3), t3 += 2;
      var s3 = a3.readUshort(r4, t3);
      t3 += 2, a3.readUshort(r4, t3), t3 += 2;
      var i5 = a3.readUshort(r4, t3);
      t3 += 2;
      var h = i5 / 2;
      o2.searchRange = a3.readUshort(r4, t3), t3 += 2, o2.entrySelector = a3.readUshort(r4, t3), t3 += 2, o2.rangeShift = a3.readUshort(r4, t3), t3 += 2, o2.endCount = a3.readUshorts(r4, t3, h), t3 += 2 * h, t3 += 2, o2.startCount = a3.readUshorts(r4, t3, h), t3 += 2 * h, o2.idDelta = [];
      for (var f2 = 0; f2 < h; f2++)
        o2.idDelta.push(a3.readShort(r4, t3)), t3 += 2;
      for (o2.idRangeOffset = a3.readUshorts(r4, t3, h), t3 += 2 * h, o2.glyphIdArray = []; t3 < n2 + s3; )
        o2.glyphIdArray.push(a3.readUshort(r4, t3)), t3 += 2;
      return o2;
    }, e3.cmap.parse6 = function(r4, t3) {
      var a3 = e3._bin, n2 = {};
      n2.format = a3.readUshort(r4, t3), t3 += 2, a3.readUshort(r4, t3), t3 += 2, a3.readUshort(r4, t3), t3 += 2, n2.firstCode = a3.readUshort(r4, t3), t3 += 2;
      var o2 = a3.readUshort(r4, t3);
      t3 += 2, n2.glyphIdArray = [];
      for (var s3 = 0; s3 < o2; s3++)
        n2.glyphIdArray.push(a3.readUshort(r4, t3)), t3 += 2;
      return n2;
    }, e3.cmap.parse12 = function(r4, t3) {
      var a3 = e3._bin, n2 = {};
      n2.format = a3.readUshort(r4, t3), t3 += 2, t3 += 2, a3.readUint(r4, t3), t3 += 4, a3.readUint(r4, t3), t3 += 4;
      var o2 = a3.readUint(r4, t3);
      t3 += 4, n2.groups = [];
      for (var s3 = 0; s3 < o2; s3++) {
        var i5 = t3 + 12 * s3, h = a3.readUint(r4, i5 + 0), f2 = a3.readUint(r4, i5 + 4), d2 = a3.readUint(r4, i5 + 8);
        n2.groups.push([h, f2, d2]);
      }
      return n2;
    }, e3.glyf = {}, e3.glyf.parse = function(r4, e4, t3, a3) {
      for (var n2 = [], o2 = 0; o2 < a3.maxp.numGlyphs; o2++)
        n2.push(null);
      return n2;
    }, e3.glyf._parseGlyf = function(r4, t3) {
      var a3 = e3._bin, n2 = r4._data, o2 = e3._tabOffset(n2, "glyf", r4._offset) + r4.loca[t3];
      if (r4.loca[t3] == r4.loca[t3 + 1])
        return null;
      var s3 = {};
      if (s3.noc = a3.readShort(n2, o2), o2 += 2, s3.xMin = a3.readShort(n2, o2), o2 += 2, s3.yMin = a3.readShort(n2, o2), o2 += 2, s3.xMax = a3.readShort(n2, o2), o2 += 2, s3.yMax = a3.readShort(n2, o2), o2 += 2, s3.xMin >= s3.xMax || s3.yMin >= s3.yMax)
        return null;
      if (s3.noc > 0) {
        s3.endPts = [];
        for (var i5 = 0; i5 < s3.noc; i5++)
          s3.endPts.push(a3.readUshort(n2, o2)), o2 += 2;
        var h = a3.readUshort(n2, o2);
        if (o2 += 2, n2.length - o2 < h)
          return null;
        s3.instructions = a3.readBytes(n2, o2, h), o2 += h;
        var f2 = s3.endPts[s3.noc - 1] + 1;
        s3.flags = [];
        for (i5 = 0; i5 < f2; i5++) {
          var d2 = n2[o2];
          if (o2++, s3.flags.push(d2), (8 & d2) != 0) {
            var l2 = n2[o2];
            o2++;
            for (var u = 0; u < l2; u++)
              s3.flags.push(d2), i5++;
          }
        }
        s3.xs = [];
        for (i5 = 0; i5 < f2; i5++) {
          var v4 = (2 & s3.flags[i5]) != 0, c2 = (16 & s3.flags[i5]) != 0;
          v4 ? (s3.xs.push(c2 ? n2[o2] : -n2[o2]), o2++) : c2 ? s3.xs.push(0) : (s3.xs.push(a3.readShort(n2, o2)), o2 += 2);
        }
        s3.ys = [];
        for (i5 = 0; i5 < f2; i5++) {
          v4 = (4 & s3.flags[i5]) != 0, c2 = (32 & s3.flags[i5]) != 0;
          v4 ? (s3.ys.push(c2 ? n2[o2] : -n2[o2]), o2++) : c2 ? s3.ys.push(0) : (s3.ys.push(a3.readShort(n2, o2)), o2 += 2);
        }
        var p = 0, U = 0;
        for (i5 = 0; i5 < f2; i5++)
          p += s3.xs[i5], U += s3.ys[i5], s3.xs[i5] = p, s3.ys[i5] = U;
      } else {
        var g;
        s3.parts = [];
        do {
          g = a3.readUshort(n2, o2), o2 += 2;
          var S = { m: { a: 1, b: 0, c: 0, d: 1, tx: 0, ty: 0 }, p1: -1, p2: -1 };
          if (s3.parts.push(S), S.glyphIndex = a3.readUshort(n2, o2), o2 += 2, 1 & g) {
            var m = a3.readShort(n2, o2);
            o2 += 2;
            var b = a3.readShort(n2, o2);
            o2 += 2;
          } else {
            m = a3.readInt8(n2, o2);
            o2++;
            b = a3.readInt8(n2, o2);
            o2++;
          }
          2 & g ? (S.m.tx = m, S.m.ty = b) : (S.p1 = m, S.p2 = b), 8 & g ? (S.m.a = S.m.d = a3.readF2dot14(n2, o2), o2 += 2) : 64 & g ? (S.m.a = a3.readF2dot14(n2, o2), o2 += 2, S.m.d = a3.readF2dot14(n2, o2), o2 += 2) : 128 & g && (S.m.a = a3.readF2dot14(n2, o2), o2 += 2, S.m.b = a3.readF2dot14(n2, o2), o2 += 2, S.m.c = a3.readF2dot14(n2, o2), o2 += 2, S.m.d = a3.readF2dot14(n2, o2), o2 += 2);
        } while (32 & g);
        if (256 & g) {
          var y = a3.readUshort(n2, o2);
          o2 += 2, s3.instr = [];
          for (i5 = 0; i5 < y; i5++)
            s3.instr.push(n2[o2]), o2++;
        }
      }
      return s3;
    }, e3.GPOS = {}, e3.GPOS.parse = function(r4, t3, a3, n2) {
      return e3._lctf.parse(r4, t3, a3, n2, e3.GPOS.subt);
    }, e3.GPOS.subt = function(r4, t3, a3, n2) {
      var o2 = e3._bin, s3 = a3, i5 = {};
      if (i5.fmt = o2.readUshort(r4, a3), a3 += 2, t3 == 1 || t3 == 2 || t3 == 3 || t3 == 7 || t3 == 8 && i5.fmt <= 2) {
        var h = o2.readUshort(r4, a3);
        a3 += 2, i5.coverage = e3._lctf.readCoverage(r4, h + s3);
      }
      if (t3 == 1 && i5.fmt == 1) {
        var f2 = o2.readUshort(r4, a3);
        a3 += 2;
        var d2 = e3._lctf.numOfOnes(f2);
        f2 != 0 && (i5.pos = e3.GPOS.readValueRecord(r4, a3, f2));
      } else if (t3 == 2 && i5.fmt >= 1 && i5.fmt <= 2) {
        f2 = o2.readUshort(r4, a3);
        a3 += 2;
        var l2 = o2.readUshort(r4, a3);
        a3 += 2;
        d2 = e3._lctf.numOfOnes(f2);
        var u = e3._lctf.numOfOnes(l2);
        if (i5.fmt == 1) {
          i5.pairsets = [];
          var v4 = o2.readUshort(r4, a3);
          a3 += 2;
          for (var c2 = 0; c2 < v4; c2++) {
            var p = s3 + o2.readUshort(r4, a3);
            a3 += 2;
            var U = o2.readUshort(r4, p);
            p += 2;
            for (var g = [], S = 0; S < U; S++) {
              var m = o2.readUshort(r4, p);
              p += 2, f2 != 0 && (x = e3.GPOS.readValueRecord(r4, p, f2), p += 2 * d2), l2 != 0 && (P = e3.GPOS.readValueRecord(r4, p, l2), p += 2 * u), g.push({ gid2: m, val1: x, val2: P });
            }
            i5.pairsets.push(g);
          }
        }
        if (i5.fmt == 2) {
          var b = o2.readUshort(r4, a3);
          a3 += 2;
          var y = o2.readUshort(r4, a3);
          a3 += 2;
          var F = o2.readUshort(r4, a3);
          a3 += 2;
          var _ = o2.readUshort(r4, a3);
          a3 += 2, i5.classDef1 = e3._lctf.readClassDef(r4, s3 + b), i5.classDef2 = e3._lctf.readClassDef(r4, s3 + y), i5.matrix = [];
          for (c2 = 0; c2 < F; c2++) {
            var C = [];
            for (S = 0; S < _; S++) {
              var x = null, P = null;
              f2 != 0 && (x = e3.GPOS.readValueRecord(r4, a3, f2), a3 += 2 * d2), l2 != 0 && (P = e3.GPOS.readValueRecord(r4, a3, l2), a3 += 2 * u), C.push({ val1: x, val2: P });
            }
            i5.matrix.push(C);
          }
        }
      } else {
        if (t3 == 9 && i5.fmt == 1) {
          var I = o2.readUshort(r4, a3);
          a3 += 2;
          var w = o2.readUint(r4, a3);
          if (a3 += 4, n2.ltype == 9)
            n2.ltype = I;
          else if (n2.ltype != I)
            throw "invalid extension substitution";
          return e3.GPOS.subt(r4, n2.ltype, s3 + w);
        }
        console.debug("unsupported GPOS table LookupType", t3, "format", i5.fmt);
      }
      return i5;
    }, e3.GPOS.readValueRecord = function(r4, t3, a3) {
      var n2 = e3._bin, o2 = [];
      return o2.push(1 & a3 ? n2.readShort(r4, t3) : 0), t3 += 1 & a3 ? 2 : 0, o2.push(2 & a3 ? n2.readShort(r4, t3) : 0), t3 += 2 & a3 ? 2 : 0, o2.push(4 & a3 ? n2.readShort(r4, t3) : 0), t3 += 4 & a3 ? 2 : 0, o2.push(8 & a3 ? n2.readShort(r4, t3) : 0), t3 += 8 & a3 ? 2 : 0, o2;
    }, e3.GSUB = {}, e3.GSUB.parse = function(r4, t3, a3, n2) {
      return e3._lctf.parse(r4, t3, a3, n2, e3.GSUB.subt);
    }, e3.GSUB.subt = function(r4, t3, a3, n2) {
      var o2 = e3._bin, s3 = a3, i5 = {};
      if (i5.fmt = o2.readUshort(r4, a3), a3 += 2, t3 != 1 && t3 != 4 && t3 != 5 && t3 != 6)
        return null;
      if (t3 == 1 || t3 == 4 || t3 == 5 && i5.fmt <= 2 || t3 == 6 && i5.fmt <= 2) {
        var h = o2.readUshort(r4, a3);
        a3 += 2, i5.coverage = e3._lctf.readCoverage(r4, s3 + h);
      }
      if (t3 == 1 && i5.fmt >= 1 && i5.fmt <= 2) {
        if (i5.fmt == 1)
          i5.delta = o2.readShort(r4, a3), a3 += 2;
        else if (i5.fmt == 2) {
          var f2 = o2.readUshort(r4, a3);
          a3 += 2, i5.newg = o2.readUshorts(r4, a3, f2), a3 += 2 * i5.newg.length;
        }
      } else if (t3 == 4) {
        i5.vals = [];
        f2 = o2.readUshort(r4, a3);
        a3 += 2;
        for (var d2 = 0; d2 < f2; d2++) {
          var l2 = o2.readUshort(r4, a3);
          a3 += 2, i5.vals.push(e3.GSUB.readLigatureSet(r4, s3 + l2));
        }
      } else if (t3 == 5 && i5.fmt == 2) {
        if (i5.fmt == 2) {
          var u = o2.readUshort(r4, a3);
          a3 += 2, i5.cDef = e3._lctf.readClassDef(r4, s3 + u), i5.scset = [];
          var v4 = o2.readUshort(r4, a3);
          a3 += 2;
          for (d2 = 0; d2 < v4; d2++) {
            var c2 = o2.readUshort(r4, a3);
            a3 += 2, i5.scset.push(c2 == 0 ? null : e3.GSUB.readSubClassSet(r4, s3 + c2));
          }
        }
      } else if (t3 == 6 && i5.fmt == 3) {
        if (i5.fmt == 3) {
          for (d2 = 0; d2 < 3; d2++) {
            f2 = o2.readUshort(r4, a3);
            a3 += 2;
            for (var p = [], U = 0; U < f2; U++)
              p.push(e3._lctf.readCoverage(r4, s3 + o2.readUshort(r4, a3 + 2 * U)));
            a3 += 2 * f2, d2 == 0 && (i5.backCvg = p), d2 == 1 && (i5.inptCvg = p), d2 == 2 && (i5.ahedCvg = p);
          }
          f2 = o2.readUshort(r4, a3);
          a3 += 2, i5.lookupRec = e3.GSUB.readSubstLookupRecords(r4, a3, f2);
        }
      } else {
        if (t3 == 7 && i5.fmt == 1) {
          var g = o2.readUshort(r4, a3);
          a3 += 2;
          var S = o2.readUint(r4, a3);
          if (a3 += 4, n2.ltype == 9)
            n2.ltype = g;
          else if (n2.ltype != g)
            throw "invalid extension substitution";
          return e3.GSUB.subt(r4, n2.ltype, s3 + S);
        }
        console.debug("unsupported GSUB table LookupType", t3, "format", i5.fmt);
      }
      return i5;
    }, e3.GSUB.readSubClassSet = function(r4, t3) {
      var a3 = e3._bin.readUshort, n2 = t3, o2 = [], s3 = a3(r4, t3);
      t3 += 2;
      for (var i5 = 0; i5 < s3; i5++) {
        var h = a3(r4, t3);
        t3 += 2, o2.push(e3.GSUB.readSubClassRule(r4, n2 + h));
      }
      return o2;
    }, e3.GSUB.readSubClassRule = function(r4, t3) {
      var a3 = e3._bin.readUshort, n2 = {}, o2 = a3(r4, t3), s3 = a3(r4, t3 += 2);
      t3 += 2, n2.input = [];
      for (var i5 = 0; i5 < o2 - 1; i5++)
        n2.input.push(a3(r4, t3)), t3 += 2;
      return n2.substLookupRecords = e3.GSUB.readSubstLookupRecords(r4, t3, s3), n2;
    }, e3.GSUB.readSubstLookupRecords = function(r4, t3, a3) {
      for (var n2 = e3._bin.readUshort, o2 = [], s3 = 0; s3 < a3; s3++)
        o2.push(n2(r4, t3), n2(r4, t3 + 2)), t3 += 4;
      return o2;
    }, e3.GSUB.readChainSubClassSet = function(r4, t3) {
      var a3 = e3._bin, n2 = t3, o2 = [], s3 = a3.readUshort(r4, t3);
      t3 += 2;
      for (var i5 = 0; i5 < s3; i5++) {
        var h = a3.readUshort(r4, t3);
        t3 += 2, o2.push(e3.GSUB.readChainSubClassRule(r4, n2 + h));
      }
      return o2;
    }, e3.GSUB.readChainSubClassRule = function(r4, t3) {
      for (var a3 = e3._bin, n2 = {}, o2 = ["backtrack", "input", "lookahead"], s3 = 0; s3 < o2.length; s3++) {
        var i5 = a3.readUshort(r4, t3);
        t3 += 2, s3 == 1 && i5--, n2[o2[s3]] = a3.readUshorts(r4, t3, i5), t3 += 2 * n2[o2[s3]].length;
      }
      i5 = a3.readUshort(r4, t3);
      return t3 += 2, n2.subst = a3.readUshorts(r4, t3, 2 * i5), t3 += 2 * n2.subst.length, n2;
    }, e3.GSUB.readLigatureSet = function(r4, t3) {
      var a3 = e3._bin, n2 = t3, o2 = [], s3 = a3.readUshort(r4, t3);
      t3 += 2;
      for (var i5 = 0; i5 < s3; i5++) {
        var h = a3.readUshort(r4, t3);
        t3 += 2, o2.push(e3.GSUB.readLigature(r4, n2 + h));
      }
      return o2;
    }, e3.GSUB.readLigature = function(r4, t3) {
      var a3 = e3._bin, n2 = { chain: [] };
      n2.nglyph = a3.readUshort(r4, t3), t3 += 2;
      var o2 = a3.readUshort(r4, t3);
      t3 += 2;
      for (var s3 = 0; s3 < o2 - 1; s3++)
        n2.chain.push(a3.readUshort(r4, t3)), t3 += 2;
      return n2;
    }, e3.head = {}, e3.head.parse = function(r4, t3, a3) {
      var n2 = e3._bin, o2 = {};
      return n2.readFixed(r4, t3), t3 += 4, o2.fontRevision = n2.readFixed(r4, t3), t3 += 4, n2.readUint(r4, t3), t3 += 4, n2.readUint(r4, t3), t3 += 4, o2.flags = n2.readUshort(r4, t3), t3 += 2, o2.unitsPerEm = n2.readUshort(r4, t3), t3 += 2, o2.created = n2.readUint64(r4, t3), t3 += 8, o2.modified = n2.readUint64(r4, t3), t3 += 8, o2.xMin = n2.readShort(r4, t3), t3 += 2, o2.yMin = n2.readShort(r4, t3), t3 += 2, o2.xMax = n2.readShort(r4, t3), t3 += 2, o2.yMax = n2.readShort(r4, t3), t3 += 2, o2.macStyle = n2.readUshort(r4, t3), t3 += 2, o2.lowestRecPPEM = n2.readUshort(r4, t3), t3 += 2, o2.fontDirectionHint = n2.readShort(r4, t3), t3 += 2, o2.indexToLocFormat = n2.readShort(r4, t3), t3 += 2, o2.glyphDataFormat = n2.readShort(r4, t3), t3 += 2, o2;
    }, e3.hhea = {}, e3.hhea.parse = function(r4, t3, a3) {
      var n2 = e3._bin, o2 = {};
      return n2.readFixed(r4, t3), t3 += 4, o2.ascender = n2.readShort(r4, t3), t3 += 2, o2.descender = n2.readShort(r4, t3), t3 += 2, o2.lineGap = n2.readShort(r4, t3), t3 += 2, o2.advanceWidthMax = n2.readUshort(r4, t3), t3 += 2, o2.minLeftSideBearing = n2.readShort(r4, t3), t3 += 2, o2.minRightSideBearing = n2.readShort(r4, t3), t3 += 2, o2.xMaxExtent = n2.readShort(r4, t3), t3 += 2, o2.caretSlopeRise = n2.readShort(r4, t3), t3 += 2, o2.caretSlopeRun = n2.readShort(r4, t3), t3 += 2, o2.caretOffset = n2.readShort(r4, t3), t3 += 2, t3 += 8, o2.metricDataFormat = n2.readShort(r4, t3), t3 += 2, o2.numberOfHMetrics = n2.readUshort(r4, t3), t3 += 2, o2;
    }, e3.hmtx = {}, e3.hmtx.parse = function(r4, t3, a3, n2) {
      for (var o2 = e3._bin, s3 = { aWidth: [], lsBearing: [] }, i5 = 0, h = 0, f2 = 0; f2 < n2.maxp.numGlyphs; f2++)
        f2 < n2.hhea.numberOfHMetrics && (i5 = o2.readUshort(r4, t3), t3 += 2, h = o2.readShort(r4, t3), t3 += 2), s3.aWidth.push(i5), s3.lsBearing.push(h);
      return s3;
    }, e3.kern = {}, e3.kern.parse = function(r4, t3, a3, n2) {
      var o2 = e3._bin, s3 = o2.readUshort(r4, t3);
      if (t3 += 2, s3 == 1)
        return e3.kern.parseV1(r4, t3 - 2, a3, n2);
      var i5 = o2.readUshort(r4, t3);
      t3 += 2;
      for (var h = { glyph1: [], rval: [] }, f2 = 0; f2 < i5; f2++) {
        t3 += 2;
        a3 = o2.readUshort(r4, t3);
        t3 += 2;
        var d2 = o2.readUshort(r4, t3);
        t3 += 2;
        var l2 = d2 >>> 8;
        if ((l2 &= 15) != 0)
          throw "unknown kern table format: " + l2;
        t3 = e3.kern.readFormat0(r4, t3, h);
      }
      return h;
    }, e3.kern.parseV1 = function(r4, t3, a3, n2) {
      var o2 = e3._bin;
      o2.readFixed(r4, t3), t3 += 4;
      var s3 = o2.readUint(r4, t3);
      t3 += 4;
      for (var i5 = { glyph1: [], rval: [] }, h = 0; h < s3; h++) {
        o2.readUint(r4, t3), t3 += 4;
        var f2 = o2.readUshort(r4, t3);
        t3 += 2, o2.readUshort(r4, t3), t3 += 2;
        var d2 = f2 >>> 8;
        if ((d2 &= 15) != 0)
          throw "unknown kern table format: " + d2;
        t3 = e3.kern.readFormat0(r4, t3, i5);
      }
      return i5;
    }, e3.kern.readFormat0 = function(r4, t3, a3) {
      var n2 = e3._bin, o2 = -1, s3 = n2.readUshort(r4, t3);
      t3 += 2, n2.readUshort(r4, t3), t3 += 2, n2.readUshort(r4, t3), t3 += 2, n2.readUshort(r4, t3), t3 += 2;
      for (var i5 = 0; i5 < s3; i5++) {
        var h = n2.readUshort(r4, t3);
        t3 += 2;
        var f2 = n2.readUshort(r4, t3);
        t3 += 2;
        var d2 = n2.readShort(r4, t3);
        t3 += 2, h != o2 && (a3.glyph1.push(h), a3.rval.push({ glyph2: [], vals: [] }));
        var l2 = a3.rval[a3.rval.length - 1];
        l2.glyph2.push(f2), l2.vals.push(d2), o2 = h;
      }
      return t3;
    }, e3.loca = {}, e3.loca.parse = function(r4, t3, a3, n2) {
      var o2 = e3._bin, s3 = [], i5 = n2.head.indexToLocFormat, h = n2.maxp.numGlyphs + 1;
      if (i5 == 0)
        for (var f2 = 0; f2 < h; f2++)
          s3.push(o2.readUshort(r4, t3 + (f2 << 1)) << 1);
      if (i5 == 1)
        for (f2 = 0; f2 < h; f2++)
          s3.push(o2.readUint(r4, t3 + (f2 << 2)));
      return s3;
    }, e3.maxp = {}, e3.maxp.parse = function(r4, t3, a3) {
      var n2 = e3._bin, o2 = {}, s3 = n2.readUint(r4, t3);
      return t3 += 4, o2.numGlyphs = n2.readUshort(r4, t3), t3 += 2, s3 == 65536 && (o2.maxPoints = n2.readUshort(r4, t3), t3 += 2, o2.maxContours = n2.readUshort(r4, t3), t3 += 2, o2.maxCompositePoints = n2.readUshort(r4, t3), t3 += 2, o2.maxCompositeContours = n2.readUshort(r4, t3), t3 += 2, o2.maxZones = n2.readUshort(r4, t3), t3 += 2, o2.maxTwilightPoints = n2.readUshort(r4, t3), t3 += 2, o2.maxStorage = n2.readUshort(r4, t3), t3 += 2, o2.maxFunctionDefs = n2.readUshort(r4, t3), t3 += 2, o2.maxInstructionDefs = n2.readUshort(r4, t3), t3 += 2, o2.maxStackElements = n2.readUshort(r4, t3), t3 += 2, o2.maxSizeOfInstructions = n2.readUshort(r4, t3), t3 += 2, o2.maxComponentElements = n2.readUshort(r4, t3), t3 += 2, o2.maxComponentDepth = n2.readUshort(r4, t3), t3 += 2), o2;
    }, e3.name = {}, e3.name.parse = function(r4, t3, a3) {
      var n2 = e3._bin, o2 = {};
      n2.readUshort(r4, t3), t3 += 2;
      var s3 = n2.readUshort(r4, t3);
      t3 += 2, n2.readUshort(r4, t3);
      for (var i5, h = ["copyright", "fontFamily", "fontSubfamily", "ID", "fullName", "version", "postScriptName", "trademark", "manufacturer", "designer", "description", "urlVendor", "urlDesigner", "licence", "licenceURL", "---", "typoFamilyName", "typoSubfamilyName", "compatibleFull", "sampleText", "postScriptCID", "wwsFamilyName", "wwsSubfamilyName", "lightPalette", "darkPalette"], f2 = t3 += 2, d2 = 0; d2 < s3; d2++) {
        var l2 = n2.readUshort(r4, t3);
        t3 += 2;
        var u = n2.readUshort(r4, t3);
        t3 += 2;
        var v4 = n2.readUshort(r4, t3);
        t3 += 2;
        var c2 = n2.readUshort(r4, t3);
        t3 += 2;
        var p = n2.readUshort(r4, t3);
        t3 += 2;
        var U = n2.readUshort(r4, t3);
        t3 += 2;
        var g, S = h[c2], m = f2 + 12 * s3 + U;
        if (l2 == 0)
          g = n2.readUnicode(r4, m, p / 2);
        else if (l2 == 3 && u == 0)
          g = n2.readUnicode(r4, m, p / 2);
        else if (u == 0)
          g = n2.readASCII(r4, m, p);
        else if (u == 1)
          g = n2.readUnicode(r4, m, p / 2);
        else if (u == 3)
          g = n2.readUnicode(r4, m, p / 2);
        else {
          if (l2 != 1)
            throw "unknown encoding " + u + ", platformID: " + l2;
          g = n2.readASCII(r4, m, p), console.debug("reading unknown MAC encoding " + u + " as ASCII");
        }
        var b = "p" + l2 + "," + v4.toString(16);
        o2[b] == null && (o2[b] = {}), o2[b][S !== void 0 ? S : c2] = g, o2[b]._lang = v4;
      }
      for (var y in o2)
        if (o2[y].postScriptName != null && o2[y]._lang == 1033)
          return o2[y];
      for (var y in o2)
        if (o2[y].postScriptName != null && o2[y]._lang == 0)
          return o2[y];
      for (var y in o2)
        if (o2[y].postScriptName != null && o2[y]._lang == 3084)
          return o2[y];
      for (var y in o2)
        if (o2[y].postScriptName != null)
          return o2[y];
      for (var y in o2) {
        i5 = y;
        break;
      }
      return console.debug("returning name table with languageID " + o2[i5]._lang), o2[i5];
    }, e3["OS/2"] = {}, e3["OS/2"].parse = function(r4, t3, a3) {
      var n2 = e3._bin.readUshort(r4, t3);
      t3 += 2;
      var o2 = {};
      if (n2 == 0)
        e3["OS/2"].version0(r4, t3, o2);
      else if (n2 == 1)
        e3["OS/2"].version1(r4, t3, o2);
      else if (n2 == 2 || n2 == 3 || n2 == 4)
        e3["OS/2"].version2(r4, t3, o2);
      else {
        if (n2 != 5)
          throw "unknown OS/2 table version: " + n2;
        e3["OS/2"].version5(r4, t3, o2);
      }
      return o2;
    }, e3["OS/2"].version0 = function(r4, t3, a3) {
      var n2 = e3._bin;
      return a3.xAvgCharWidth = n2.readShort(r4, t3), t3 += 2, a3.usWeightClass = n2.readUshort(r4, t3), t3 += 2, a3.usWidthClass = n2.readUshort(r4, t3), t3 += 2, a3.fsType = n2.readUshort(r4, t3), t3 += 2, a3.ySubscriptXSize = n2.readShort(r4, t3), t3 += 2, a3.ySubscriptYSize = n2.readShort(r4, t3), t3 += 2, a3.ySubscriptXOffset = n2.readShort(r4, t3), t3 += 2, a3.ySubscriptYOffset = n2.readShort(r4, t3), t3 += 2, a3.ySuperscriptXSize = n2.readShort(r4, t3), t3 += 2, a3.ySuperscriptYSize = n2.readShort(r4, t3), t3 += 2, a3.ySuperscriptXOffset = n2.readShort(r4, t3), t3 += 2, a3.ySuperscriptYOffset = n2.readShort(r4, t3), t3 += 2, a3.yStrikeoutSize = n2.readShort(r4, t3), t3 += 2, a3.yStrikeoutPosition = n2.readShort(r4, t3), t3 += 2, a3.sFamilyClass = n2.readShort(r4, t3), t3 += 2, a3.panose = n2.readBytes(r4, t3, 10), t3 += 10, a3.ulUnicodeRange1 = n2.readUint(r4, t3), t3 += 4, a3.ulUnicodeRange2 = n2.readUint(r4, t3), t3 += 4, a3.ulUnicodeRange3 = n2.readUint(r4, t3), t3 += 4, a3.ulUnicodeRange4 = n2.readUint(r4, t3), t3 += 4, a3.achVendID = [n2.readInt8(r4, t3), n2.readInt8(r4, t3 + 1), n2.readInt8(r4, t3 + 2), n2.readInt8(r4, t3 + 3)], t3 += 4, a3.fsSelection = n2.readUshort(r4, t3), t3 += 2, a3.usFirstCharIndex = n2.readUshort(r4, t3), t3 += 2, a3.usLastCharIndex = n2.readUshort(r4, t3), t3 += 2, a3.sTypoAscender = n2.readShort(r4, t3), t3 += 2, a3.sTypoDescender = n2.readShort(r4, t3), t3 += 2, a3.sTypoLineGap = n2.readShort(r4, t3), t3 += 2, a3.usWinAscent = n2.readUshort(r4, t3), t3 += 2, a3.usWinDescent = n2.readUshort(r4, t3), t3 += 2;
    }, e3["OS/2"].version1 = function(r4, t3, a3) {
      var n2 = e3._bin;
      return t3 = e3["OS/2"].version0(r4, t3, a3), a3.ulCodePageRange1 = n2.readUint(r4, t3), t3 += 4, a3.ulCodePageRange2 = n2.readUint(r4, t3), t3 += 4;
    }, e3["OS/2"].version2 = function(r4, t3, a3) {
      var n2 = e3._bin;
      return t3 = e3["OS/2"].version1(r4, t3, a3), a3.sxHeight = n2.readShort(r4, t3), t3 += 2, a3.sCapHeight = n2.readShort(r4, t3), t3 += 2, a3.usDefault = n2.readUshort(r4, t3), t3 += 2, a3.usBreak = n2.readUshort(r4, t3), t3 += 2, a3.usMaxContext = n2.readUshort(r4, t3), t3 += 2;
    }, e3["OS/2"].version5 = function(r4, t3, a3) {
      var n2 = e3._bin;
      return t3 = e3["OS/2"].version2(r4, t3, a3), a3.usLowerOpticalPointSize = n2.readUshort(r4, t3), t3 += 2, a3.usUpperOpticalPointSize = n2.readUshort(r4, t3), t3 += 2;
    }, e3.post = {}, e3.post.parse = function(r4, t3, a3) {
      var n2 = e3._bin, o2 = {};
      return o2.version = n2.readFixed(r4, t3), t3 += 4, o2.italicAngle = n2.readFixed(r4, t3), t3 += 4, o2.underlinePosition = n2.readShort(r4, t3), t3 += 2, o2.underlineThickness = n2.readShort(r4, t3), t3 += 2, o2;
    }, e3 == null && (e3 = {}), e3.U == null && (e3.U = {}), e3.U.codeToGlyph = function(r4, e4) {
      var t3 = r4.cmap, a3 = -1;
      if (t3.p0e4 != null ? a3 = t3.p0e4 : t3.p3e1 != null ? a3 = t3.p3e1 : t3.p1e0 != null ? a3 = t3.p1e0 : t3.p0e3 != null && (a3 = t3.p0e3), a3 == -1)
        throw "no familiar platform and encoding!";
      var n2 = t3.tables[a3];
      if (n2.format == 0)
        return e4 >= n2.map.length ? 0 : n2.map[e4];
      if (n2.format == 4) {
        for (var o2 = -1, s3 = 0; s3 < n2.endCount.length; s3++)
          if (e4 <= n2.endCount[s3]) {
            o2 = s3;
            break;
          }
        if (o2 == -1)
          return 0;
        if (n2.startCount[o2] > e4)
          return 0;
        return 65535 & (n2.idRangeOffset[o2] != 0 ? n2.glyphIdArray[e4 - n2.startCount[o2] + (n2.idRangeOffset[o2] >> 1) - (n2.idRangeOffset.length - o2)] : e4 + n2.idDelta[o2]);
      }
      if (n2.format == 12) {
        if (e4 > n2.groups[n2.groups.length - 1][1])
          return 0;
        for (s3 = 0; s3 < n2.groups.length; s3++) {
          var i5 = n2.groups[s3];
          if (i5[0] <= e4 && e4 <= i5[1])
            return i5[2] + (e4 - i5[0]);
        }
        return 0;
      }
      throw "unknown cmap table format " + n2.format;
    }, e3.U.glyphToPath = function(r4, t3) {
      var a3 = { cmds: [], crds: [] };
      if (r4.SVG && r4.SVG.entries[t3]) {
        var n2 = r4.SVG.entries[t3];
        return n2 == null ? a3 : (typeof n2 == "string" && (n2 = e3.SVG.toPath(n2), r4.SVG.entries[t3] = n2), n2);
      }
      if (r4.CFF) {
        var o2 = { x: 0, y: 0, stack: [], nStems: 0, haveWidth: false, width: r4.CFF.Private ? r4.CFF.Private.defaultWidthX : 0, open: false }, s3 = r4.CFF, i5 = r4.CFF.Private;
        if (s3.ROS) {
          for (var h = 0; s3.FDSelect[h + 2] <= t3; )
            h += 2;
          i5 = s3.FDArray[s3.FDSelect[h + 1]].Private;
        }
        e3.U._drawCFF(r4.CFF.CharStrings[t3], o2, s3, i5, a3);
      } else
        r4.glyf && e3.U._drawGlyf(t3, r4, a3);
      return a3;
    }, e3.U._drawGlyf = function(r4, t3, a3) {
      var n2 = t3.glyf[r4];
      n2 == null && (n2 = t3.glyf[r4] = e3.glyf._parseGlyf(t3, r4)), n2 != null && (n2.noc > -1 ? e3.U._simpleGlyph(n2, a3) : e3.U._compoGlyph(n2, t3, a3));
    }, e3.U._simpleGlyph = function(r4, t3) {
      for (var a3 = 0; a3 < r4.noc; a3++) {
        for (var n2 = a3 == 0 ? 0 : r4.endPts[a3 - 1] + 1, o2 = r4.endPts[a3], s3 = n2; s3 <= o2; s3++) {
          var i5 = s3 == n2 ? o2 : s3 - 1, h = s3 == o2 ? n2 : s3 + 1, f2 = 1 & r4.flags[s3], d2 = 1 & r4.flags[i5], l2 = 1 & r4.flags[h], u = r4.xs[s3], v4 = r4.ys[s3];
          if (s3 == n2)
            if (f2) {
              if (!d2) {
                e3.U.P.moveTo(t3, u, v4);
                continue;
              }
              e3.U.P.moveTo(t3, r4.xs[i5], r4.ys[i5]);
            } else
              d2 ? e3.U.P.moveTo(t3, r4.xs[i5], r4.ys[i5]) : e3.U.P.moveTo(t3, (r4.xs[i5] + u) / 2, (r4.ys[i5] + v4) / 2);
          f2 ? d2 && e3.U.P.lineTo(t3, u, v4) : l2 ? e3.U.P.qcurveTo(t3, u, v4, r4.xs[h], r4.ys[h]) : e3.U.P.qcurveTo(t3, u, v4, (u + r4.xs[h]) / 2, (v4 + r4.ys[h]) / 2);
        }
        e3.U.P.closePath(t3);
      }
    }, e3.U._compoGlyph = function(r4, t3, a3) {
      for (var n2 = 0; n2 < r4.parts.length; n2++) {
        var o2 = { cmds: [], crds: [] }, s3 = r4.parts[n2];
        e3.U._drawGlyf(s3.glyphIndex, t3, o2);
        for (var i5 = s3.m, h = 0; h < o2.crds.length; h += 2) {
          var f2 = o2.crds[h], d2 = o2.crds[h + 1];
          a3.crds.push(f2 * i5.a + d2 * i5.b + i5.tx), a3.crds.push(f2 * i5.c + d2 * i5.d + i5.ty);
        }
        for (h = 0; h < o2.cmds.length; h++)
          a3.cmds.push(o2.cmds[h]);
      }
    }, e3.U._getGlyphClass = function(r4, t3) {
      var a3 = e3._lctf.getInterval(t3, r4);
      return a3 == -1 ? 0 : t3[a3 + 2];
    }, e3.U.getPairAdjustment = function(r4, t3, a3) {
      var n2 = 0, o2 = false;
      if (r4.GPOS)
        for (var s3 = r4.GPOS, i5 = s3.lookupList, h = s3.featureList, f2 = [], d2 = 0; d2 < h.length; d2++) {
          var l2 = h[d2];
          if (l2.tag == "kern") {
            o2 = true;
            for (var u = 0; u < l2.tab.length; u++)
              if (!f2[l2.tab[u]]) {
                f2[l2.tab[u]] = true;
                for (var v4 = i5[l2.tab[u]], c2 = 0; c2 < v4.tabs.length; c2++)
                  if (v4.tabs[c2] != null) {
                    var p, U = v4.tabs[c2];
                    if (!U.coverage || (p = e3._lctf.coverageIndex(U.coverage, t3)) != -1) {
                      if (v4.ltype == 1)
                        ;
                      else if (v4.ltype == 2) {
                        var g;
                        if (U.fmt == 1) {
                          var S = U.pairsets[p];
                          for (d2 = 0; d2 < S.length; d2++)
                            S[d2].gid2 == a3 && (g = S[d2]);
                        } else if (U.fmt == 2) {
                          var m = e3.U._getGlyphClass(t3, U.classDef1), b = e3.U._getGlyphClass(a3, U.classDef2);
                          g = U.matrix[m][b];
                        }
                        g && g.val1 && g.val1[2] && (n2 += g.val1[2]), g && g.val2 && g.val2[0] && (n2 += g.val2[0]);
                      }
                    }
                  }
              }
          }
        }
      if (r4.kern && !o2) {
        var y = r4.kern.glyph1.indexOf(t3);
        if (y != -1) {
          var F = r4.kern.rval[y].glyph2.indexOf(a3);
          F != -1 && (n2 += r4.kern.rval[y].vals[F]);
        }
      }
      return n2;
    }, e3.U._applySubs = function(r4, t3, a3, n2) {
      for (var o2 = r4.length - t3 - 1, s3 = 0; s3 < a3.tabs.length; s3++)
        if (a3.tabs[s3] != null) {
          var i5, h = a3.tabs[s3];
          if (!h.coverage || (i5 = e3._lctf.coverageIndex(h.coverage, r4[t3])) != -1) {
            if (a3.ltype == 1)
              r4[t3], h.fmt == 1 ? r4[t3] = r4[t3] + h.delta : r4[t3] = h.newg[i5];
            else if (a3.ltype == 4)
              for (var f2 = h.vals[i5], d2 = 0; d2 < f2.length; d2++) {
                var l2 = f2[d2], u = l2.chain.length;
                if (!(u > o2)) {
                  for (var v4 = true, c2 = 0, p = 0; p < u; p++) {
                    for (; r4[t3 + c2 + (1 + p)] == -1; )
                      c2++;
                    l2.chain[p] != r4[t3 + c2 + (1 + p)] && (v4 = false);
                  }
                  if (v4) {
                    r4[t3] = l2.nglyph;
                    for (p = 0; p < u + c2; p++)
                      r4[t3 + p + 1] = -1;
                    break;
                  }
                }
              }
            else if (a3.ltype == 5 && h.fmt == 2)
              for (var U = e3._lctf.getInterval(h.cDef, r4[t3]), g = h.cDef[U + 2], S = h.scset[g], m = 0; m < S.length; m++) {
                var b = S[m], y = b.input;
                if (!(y.length > o2)) {
                  for (v4 = true, p = 0; p < y.length; p++) {
                    var F = e3._lctf.getInterval(h.cDef, r4[t3 + 1 + p]);
                    if (U == -1 && h.cDef[F + 2] != y[p]) {
                      v4 = false;
                      break;
                    }
                  }
                  if (v4) {
                    var _ = b.substLookupRecords;
                    for (d2 = 0; d2 < _.length; d2 += 2)
                      _[d2], _[d2 + 1];
                  }
                }
              }
            else if (a3.ltype == 6 && h.fmt == 3) {
              if (!e3.U._glsCovered(r4, h.backCvg, t3 - h.backCvg.length))
                continue;
              if (!e3.U._glsCovered(r4, h.inptCvg, t3))
                continue;
              if (!e3.U._glsCovered(r4, h.ahedCvg, t3 + h.inptCvg.length))
                continue;
              var C = h.lookupRec;
              for (m = 0; m < C.length; m += 2) {
                U = C[m];
                var x = n2[C[m + 1]];
                e3.U._applySubs(r4, t3 + U, x, n2);
              }
            }
          }
        }
    }, e3.U._glsCovered = function(r4, t3, a3) {
      for (var n2 = 0; n2 < t3.length; n2++) {
        if (e3._lctf.coverageIndex(t3[n2], r4[a3 + n2]) == -1)
          return false;
      }
      return true;
    }, e3.U.glyphsToPath = function(r4, t3, a3) {
      for (var n2 = { cmds: [], crds: [] }, o2 = 0, s3 = 0; s3 < t3.length; s3++) {
        var i5 = t3[s3];
        if (i5 != -1) {
          for (var h = s3 < t3.length - 1 && t3[s3 + 1] != -1 ? t3[s3 + 1] : 0, f2 = e3.U.glyphToPath(r4, i5), d2 = 0; d2 < f2.crds.length; d2 += 2)
            n2.crds.push(f2.crds[d2] + o2), n2.crds.push(f2.crds[d2 + 1]);
          a3 && n2.cmds.push(a3);
          for (d2 = 0; d2 < f2.cmds.length; d2++)
            n2.cmds.push(f2.cmds[d2]);
          a3 && n2.cmds.push("X"), o2 += r4.hmtx.aWidth[i5], s3 < t3.length - 1 && (o2 += e3.U.getPairAdjustment(r4, i5, h));
        }
      }
      return n2;
    }, e3.U.P = {}, e3.U.P.moveTo = function(r4, e4, t3) {
      r4.cmds.push("M"), r4.crds.push(e4, t3);
    }, e3.U.P.lineTo = function(r4, e4, t3) {
      r4.cmds.push("L"), r4.crds.push(e4, t3);
    }, e3.U.P.curveTo = function(r4, e4, t3, a3, n2, o2, s3) {
      r4.cmds.push("C"), r4.crds.push(e4, t3, a3, n2, o2, s3);
    }, e3.U.P.qcurveTo = function(r4, e4, t3, a3, n2) {
      r4.cmds.push("Q"), r4.crds.push(e4, t3, a3, n2);
    }, e3.U.P.closePath = function(r4) {
      r4.cmds.push("Z");
    }, e3.U._drawCFF = function(r4, t3, a3, n2, o2) {
      for (var s3 = t3.stack, i5 = t3.nStems, h = t3.haveWidth, f2 = t3.width, d2 = t3.open, l2 = 0, u = t3.x, v4 = t3.y, c2 = 0, p = 0, U = 0, g = 0, S = 0, m = 0, b = 0, y = 0, F = 0, _ = 0, C = { val: 0, size: 0 }; l2 < r4.length; ) {
        e3.CFF.getCharString(r4, l2, C);
        var x = C.val;
        if (l2 += C.size, x == "o1" || x == "o18")
          s3.length % 2 != 0 && !h && (f2 = s3.shift() + n2.nominalWidthX), i5 += s3.length >> 1, s3.length = 0, h = true;
        else if (x == "o3" || x == "o23") {
          s3.length % 2 != 0 && !h && (f2 = s3.shift() + n2.nominalWidthX), i5 += s3.length >> 1, s3.length = 0, h = true;
        } else if (x == "o4")
          s3.length > 1 && !h && (f2 = s3.shift() + n2.nominalWidthX, h = true), d2 && e3.U.P.closePath(o2), v4 += s3.pop(), e3.U.P.moveTo(o2, u, v4), d2 = true;
        else if (x == "o5")
          for (; s3.length > 0; )
            u += s3.shift(), v4 += s3.shift(), e3.U.P.lineTo(o2, u, v4);
        else if (x == "o6" || x == "o7")
          for (var P = s3.length, I = x == "o6", w = 0; w < P; w++) {
            var O = s3.shift();
            I ? u += O : v4 += O, I = !I, e3.U.P.lineTo(o2, u, v4);
          }
        else if (x == "o8" || x == "o24") {
          P = s3.length;
          for (var T = 0; T + 6 <= P; )
            c2 = u + s3.shift(), p = v4 + s3.shift(), U = c2 + s3.shift(), g = p + s3.shift(), u = U + s3.shift(), v4 = g + s3.shift(), e3.U.P.curveTo(o2, c2, p, U, g, u, v4), T += 6;
          x == "o24" && (u += s3.shift(), v4 += s3.shift(), e3.U.P.lineTo(o2, u, v4));
        } else {
          if (x == "o11")
            break;
          if (x == "o1234" || x == "o1235" || x == "o1236" || x == "o1237")
            x == "o1234" && (p = v4, U = (c2 = u + s3.shift()) + s3.shift(), _ = g = p + s3.shift(), m = g, y = v4, u = (b = (S = (F = U + s3.shift()) + s3.shift()) + s3.shift()) + s3.shift(), e3.U.P.curveTo(o2, c2, p, U, g, F, _), e3.U.P.curveTo(o2, S, m, b, y, u, v4)), x == "o1235" && (c2 = u + s3.shift(), p = v4 + s3.shift(), U = c2 + s3.shift(), g = p + s3.shift(), F = U + s3.shift(), _ = g + s3.shift(), S = F + s3.shift(), m = _ + s3.shift(), b = S + s3.shift(), y = m + s3.shift(), u = b + s3.shift(), v4 = y + s3.shift(), s3.shift(), e3.U.P.curveTo(o2, c2, p, U, g, F, _), e3.U.P.curveTo(o2, S, m, b, y, u, v4)), x == "o1236" && (c2 = u + s3.shift(), p = v4 + s3.shift(), U = c2 + s3.shift(), _ = g = p + s3.shift(), m = g, b = (S = (F = U + s3.shift()) + s3.shift()) + s3.shift(), y = m + s3.shift(), u = b + s3.shift(), e3.U.P.curveTo(o2, c2, p, U, g, F, _), e3.U.P.curveTo(o2, S, m, b, y, u, v4)), x == "o1237" && (c2 = u + s3.shift(), p = v4 + s3.shift(), U = c2 + s3.shift(), g = p + s3.shift(), F = U + s3.shift(), _ = g + s3.shift(), S = F + s3.shift(), m = _ + s3.shift(), b = S + s3.shift(), y = m + s3.shift(), Math.abs(b - u) > Math.abs(y - v4) ? u = b + s3.shift() : v4 = y + s3.shift(), e3.U.P.curveTo(o2, c2, p, U, g, F, _), e3.U.P.curveTo(o2, S, m, b, y, u, v4));
          else if (x == "o14") {
            if (s3.length > 0 && !h && (f2 = s3.shift() + a3.nominalWidthX, h = true), s3.length == 4) {
              var k = s3.shift(), G = s3.shift(), D = s3.shift(), B = s3.shift(), L = e3.CFF.glyphBySE(a3, D), R = e3.CFF.glyphBySE(a3, B);
              e3.U._drawCFF(a3.CharStrings[L], t3, a3, n2, o2), t3.x = k, t3.y = G, e3.U._drawCFF(a3.CharStrings[R], t3, a3, n2, o2);
            }
            d2 && (e3.U.P.closePath(o2), d2 = false);
          } else if (x == "o19" || x == "o20") {
            s3.length % 2 != 0 && !h && (f2 = s3.shift() + n2.nominalWidthX), i5 += s3.length >> 1, s3.length = 0, h = true, l2 += i5 + 7 >> 3;
          } else if (x == "o21")
            s3.length > 2 && !h && (f2 = s3.shift() + n2.nominalWidthX, h = true), v4 += s3.pop(), u += s3.pop(), d2 && e3.U.P.closePath(o2), e3.U.P.moveTo(o2, u, v4), d2 = true;
          else if (x == "o22")
            s3.length > 1 && !h && (f2 = s3.shift() + n2.nominalWidthX, h = true), u += s3.pop(), d2 && e3.U.P.closePath(o2), e3.U.P.moveTo(o2, u, v4), d2 = true;
          else if (x == "o25") {
            for (; s3.length > 6; )
              u += s3.shift(), v4 += s3.shift(), e3.U.P.lineTo(o2, u, v4);
            c2 = u + s3.shift(), p = v4 + s3.shift(), U = c2 + s3.shift(), g = p + s3.shift(), u = U + s3.shift(), v4 = g + s3.shift(), e3.U.P.curveTo(o2, c2, p, U, g, u, v4);
          } else if (x == "o26")
            for (s3.length % 2 && (u += s3.shift()); s3.length > 0; )
              c2 = u, p = v4 + s3.shift(), u = U = c2 + s3.shift(), v4 = (g = p + s3.shift()) + s3.shift(), e3.U.P.curveTo(o2, c2, p, U, g, u, v4);
          else if (x == "o27")
            for (s3.length % 2 && (v4 += s3.shift()); s3.length > 0; )
              p = v4, U = (c2 = u + s3.shift()) + s3.shift(), g = p + s3.shift(), u = U + s3.shift(), v4 = g, e3.U.P.curveTo(o2, c2, p, U, g, u, v4);
          else if (x == "o10" || x == "o29") {
            var A = x == "o10" ? n2 : a3;
            if (s3.length == 0)
              console.debug("error: empty stack");
            else {
              var W = s3.pop(), M = A.Subrs[W + A.Bias];
              t3.x = u, t3.y = v4, t3.nStems = i5, t3.haveWidth = h, t3.width = f2, t3.open = d2, e3.U._drawCFF(M, t3, a3, n2, o2), u = t3.x, v4 = t3.y, i5 = t3.nStems, h = t3.haveWidth, f2 = t3.width, d2 = t3.open;
            }
          } else if (x == "o30" || x == "o31") {
            var V2 = s3.length, N = (T = 0, x == "o31");
            for (T += V2 - (P = -3 & V2); T < P; )
              N ? (p = v4, U = (c2 = u + s3.shift()) + s3.shift(), v4 = (g = p + s3.shift()) + s3.shift(), P - T == 5 ? (u = U + s3.shift(), T++) : u = U, N = false) : (c2 = u, p = v4 + s3.shift(), U = c2 + s3.shift(), g = p + s3.shift(), u = U + s3.shift(), P - T == 5 ? (v4 = g + s3.shift(), T++) : v4 = g, N = true), e3.U.P.curveTo(o2, c2, p, U, g, u, v4), T += 4;
          } else {
            if ((x + "").charAt(0) == "o")
              throw console.debug("Unknown operation: " + x, r4), x;
            s3.push(x);
          }
        }
      }
      t3.x = u, t3.y = v4, t3.nStems = i5, t3.haveWidth = h, t3.width = f2, t3.open = d2;
    };
    var t2 = e3, a2 = { Typr: t2 };
    return r3.Typr = t2, r3.default = a2, Object.defineProperty(r3, "__esModule", { value: true }), r3;
  }({}).Typr;
}
function woff2otfFactory() {
  return function(r3) {
    var e3 = Uint8Array, n2 = Uint16Array, t2 = Uint32Array, a2 = new e3([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0]), i5 = new e3([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0]), o2 = new e3([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), f2 = function(r4, e4) {
      for (var a3 = new n2(31), i6 = 0; i6 < 31; ++i6)
        a3[i6] = e4 += 1 << r4[i6 - 1];
      var o3 = new t2(a3[30]);
      for (i6 = 1; i6 < 30; ++i6)
        for (var f3 = a3[i6]; f3 < a3[i6 + 1]; ++f3)
          o3[f3] = f3 - a3[i6] << 5 | i6;
      return [a3, o3];
    }, u = f2(a2, 2), v4 = u[0], s3 = u[1];
    v4[28] = 258, s3[258] = 28;
    for (var l2 = f2(i5, 0)[0], c2 = new n2(32768), g = 0; g < 32768; ++g) {
      var h = (43690 & g) >>> 1 | (21845 & g) << 1;
      h = (61680 & (h = (52428 & h) >>> 2 | (13107 & h) << 2)) >>> 4 | (3855 & h) << 4, c2[g] = ((65280 & h) >>> 8 | (255 & h) << 8) >>> 1;
    }
    var w = function(r4, e4, t3) {
      for (var a3 = r4.length, i6 = 0, o3 = new n2(e4); i6 < a3; ++i6)
        ++o3[r4[i6] - 1];
      var f3, u2 = new n2(e4);
      for (i6 = 0; i6 < e4; ++i6)
        u2[i6] = u2[i6 - 1] + o3[i6 - 1] << 1;
      if (t3) {
        f3 = new n2(1 << e4);
        var v5 = 15 - e4;
        for (i6 = 0; i6 < a3; ++i6)
          if (r4[i6])
            for (var s4 = i6 << 4 | r4[i6], l3 = e4 - r4[i6], g2 = u2[r4[i6] - 1]++ << l3, h2 = g2 | (1 << l3) - 1; g2 <= h2; ++g2)
              f3[c2[g2] >>> v5] = s4;
      } else
        for (f3 = new n2(a3), i6 = 0; i6 < a3; ++i6)
          r4[i6] && (f3[i6] = c2[u2[r4[i6] - 1]++] >>> 15 - r4[i6]);
      return f3;
    }, d2 = new e3(288);
    for (g = 0; g < 144; ++g)
      d2[g] = 8;
    for (g = 144; g < 256; ++g)
      d2[g] = 9;
    for (g = 256; g < 280; ++g)
      d2[g] = 7;
    for (g = 280; g < 288; ++g)
      d2[g] = 8;
    var m = new e3(32);
    for (g = 0; g < 32; ++g)
      m[g] = 5;
    var b = w(d2, 9, 1), p = w(m, 5, 1), y = function(r4) {
      for (var e4 = r4[0], n3 = 1; n3 < r4.length; ++n3)
        r4[n3] > e4 && (e4 = r4[n3]);
      return e4;
    }, L = function(r4, e4, n3) {
      var t3 = e4 / 8 | 0;
      return (r4[t3] | r4[t3 + 1] << 8) >> (7 & e4) & n3;
    }, U = function(r4, e4) {
      var n3 = e4 / 8 | 0;
      return (r4[n3] | r4[n3 + 1] << 8 | r4[n3 + 2] << 16) >> (7 & e4);
    }, k = ["unexpected EOF", "invalid block type", "invalid length/literal", "invalid distance", "stream finished", "no stream handler", , "no callback", "invalid UTF-8 data", "extra field too long", "date not in range 1980-2099", "filename too long", "stream finishing", "invalid zip data"], T = function(r4, e4, n3) {
      var t3 = new Error(e4 || k[r4]);
      if (t3.code = r4, Error.captureStackTrace && Error.captureStackTrace(t3, T), !n3)
        throw t3;
      return t3;
    }, O = function(r4, f3, u2) {
      var s4 = r4.length;
      if (!s4 || u2 && !u2.l && s4 < 5)
        return f3 || new e3(0);
      var c3 = !f3 || u2, g2 = !u2 || u2.i;
      u2 || (u2 = {}), f3 || (f3 = new e3(3 * s4));
      var h2, d3 = function(r5) {
        var n3 = f3.length;
        if (r5 > n3) {
          var t3 = new e3(Math.max(2 * n3, r5));
          t3.set(f3), f3 = t3;
        }
      }, m2 = u2.f || 0, k2 = u2.p || 0, O2 = u2.b || 0, A2 = u2.l, x2 = u2.d, E = u2.m, D = u2.n, M = 8 * s4;
      do {
        if (!A2) {
          u2.f = m2 = L(r4, k2, 1);
          var S = L(r4, k2 + 1, 3);
          if (k2 += 3, !S) {
            var V2 = r4[(I = ((h2 = k2) / 8 | 0) + (7 & h2 && 1) + 4) - 4] | r4[I - 3] << 8, _ = I + V2;
            if (_ > s4) {
              g2 && T(0);
              break;
            }
            c3 && d3(O2 + V2), f3.set(r4.subarray(I, _), O2), u2.b = O2 += V2, u2.p = k2 = 8 * _;
            continue;
          }
          if (S == 1)
            A2 = b, x2 = p, E = 9, D = 5;
          else if (S == 2) {
            var j = L(r4, k2, 31) + 257, z = L(r4, k2 + 10, 15) + 4, C = j + L(r4, k2 + 5, 31) + 1;
            k2 += 14;
            for (var F = new e3(C), P = new e3(19), q = 0; q < z; ++q)
              P[o2[q]] = L(r4, k2 + 3 * q, 7);
            k2 += 3 * z;
            var B = y(P), G = (1 << B) - 1, H = w(P, B, 1);
            for (q = 0; q < C; ) {
              var I, J = H[L(r4, k2, G)];
              if (k2 += 15 & J, (I = J >>> 4) < 16)
                F[q++] = I;
              else {
                var K = 0, N = 0;
                for (I == 16 ? (N = 3 + L(r4, k2, 3), k2 += 2, K = F[q - 1]) : I == 17 ? (N = 3 + L(r4, k2, 7), k2 += 3) : I == 18 && (N = 11 + L(r4, k2, 127), k2 += 7); N--; )
                  F[q++] = K;
              }
            }
            var Q = F.subarray(0, j), R = F.subarray(j);
            E = y(Q), D = y(R), A2 = w(Q, E, 1), x2 = w(R, D, 1);
          } else
            T(1);
          if (k2 > M) {
            g2 && T(0);
            break;
          }
        }
        c3 && d3(O2 + 131072);
        for (var W = (1 << E) - 1, X = (1 << D) - 1, Y = k2; ; Y = k2) {
          var Z = (K = A2[U(r4, k2) & W]) >>> 4;
          if ((k2 += 15 & K) > M) {
            g2 && T(0);
            break;
          }
          if (K || T(2), Z < 256)
            f3[O2++] = Z;
          else {
            if (Z == 256) {
              Y = k2, A2 = null;
              break;
            }
            var $ = Z - 254;
            if (Z > 264) {
              var rr = a2[q = Z - 257];
              $ = L(r4, k2, (1 << rr) - 1) + v4[q], k2 += rr;
            }
            var er = x2[U(r4, k2) & X], nr = er >>> 4;
            er || T(3), k2 += 15 & er;
            R = l2[nr];
            if (nr > 3) {
              rr = i5[nr];
              R += U(r4, k2) & (1 << rr) - 1, k2 += rr;
            }
            if (k2 > M) {
              g2 && T(0);
              break;
            }
            c3 && d3(O2 + 131072);
            for (var tr = O2 + $; O2 < tr; O2 += 4)
              f3[O2] = f3[O2 - R], f3[O2 + 1] = f3[O2 + 1 - R], f3[O2 + 2] = f3[O2 + 2 - R], f3[O2 + 3] = f3[O2 + 3 - R];
            O2 = tr;
          }
        }
        u2.l = A2, u2.p = Y, u2.b = O2, A2 && (m2 = 1, u2.m = E, u2.d = x2, u2.n = D);
      } while (!m2);
      return O2 == f3.length ? f3 : function(r5, a3, i6) {
        (a3 == null || a3 < 0) && (a3 = 0), (i6 == null || i6 > r5.length) && (i6 = r5.length);
        var o3 = new (r5 instanceof n2 ? n2 : r5 instanceof t2 ? t2 : e3)(i6 - a3);
        return o3.set(r5.subarray(a3, i6)), o3;
      }(f3, 0, O2);
    }, A = new e3(0);
    var x = typeof TextDecoder != "undefined" && new TextDecoder();
    try {
      x.decode(A, { stream: true }), 1;
    } catch (r4) {
    }
    return r3.convert_streams = function(r4) {
      var e4 = new DataView(r4), n3 = 0;
      function t3() {
        var r5 = e4.getUint16(n3);
        return n3 += 2, r5;
      }
      function a3() {
        var r5 = e4.getUint32(n3);
        return n3 += 4, r5;
      }
      function i6(r5) {
        m2.setUint16(b2, r5), b2 += 2;
      }
      function o3(r5) {
        m2.setUint32(b2, r5), b2 += 4;
      }
      for (var f3 = { signature: a3(), flavor: a3(), length: a3(), numTables: t3(), reserved: t3(), totalSfntSize: a3(), majorVersion: t3(), minorVersion: t3(), metaOffset: a3(), metaLength: a3(), metaOrigLength: a3(), privOffset: a3(), privLength: a3() }, u2 = 0; Math.pow(2, u2) <= f3.numTables; )
        u2++;
      u2--;
      for (var v5 = 16 * Math.pow(2, u2), s4 = 16 * f3.numTables - v5, l3 = 12, c3 = [], g2 = 0; g2 < f3.numTables; g2++)
        c3.push({ tag: a3(), offset: a3(), compLength: a3(), origLength: a3(), origChecksum: a3() }), l3 += 16;
      var h2, w2 = new Uint8Array(12 + 16 * c3.length + c3.reduce(function(r5, e5) {
        return r5 + e5.origLength + 4;
      }, 0)), d3 = w2.buffer, m2 = new DataView(d3), b2 = 0;
      return o3(f3.flavor), i6(f3.numTables), i6(v5), i6(u2), i6(s4), c3.forEach(function(r5) {
        o3(r5.tag), o3(r5.origChecksum), o3(l3), o3(r5.origLength), r5.outOffset = l3, (l3 += r5.origLength) % 4 != 0 && (l3 += 4 - l3 % 4);
      }), c3.forEach(function(e5) {
        var n4, t4 = r4.slice(e5.offset, e5.offset + e5.compLength);
        if (e5.compLength != e5.origLength) {
          var a4 = new Uint8Array(e5.origLength);
          n4 = new Uint8Array(t4, 2), O(n4, a4);
        } else
          a4 = new Uint8Array(t4);
        w2.set(a4, e5.outOffset);
        var i7 = 0;
        (l3 = e5.outOffset + e5.origLength) % 4 != 0 && (i7 = 4 - l3 % 4), w2.set(new Uint8Array(i7).buffer, e5.outOffset + e5.origLength), h2 = l3 + i7;
      }), d3.slice(0, h2);
    }, Object.defineProperty(r3, "__esModule", { value: true }), r3;
  }({}).convert_streams;
}
function parserFactory(Typr, woff2otf) {
  const cmdArgLengths = {
    M: 2,
    L: 2,
    Q: 4,
    C: 6,
    Z: 0
  };
  const joiningTypeRawData = { "C": "18g,ca,368,1kz", "D": "17k,6,2,2+4,5+c,2+6,2+1,10+1,9+f,j+11,2+1,a,2,2+1,15+2,3,j+2,6+3,2+8,2,2,2+1,w+a,4+e,3+3,2,3+2,3+5,23+w,2f+4,3,2+9,2,b,2+3,3,1k+9,6+1,3+1,2+2,2+d,30g,p+y,1,1+1g,f+x,2,sd2+1d,jf3+4,f+3,2+4,2+2,b+3,42,2,4+2,2+1,2,3,t+1,9f+w,2,el+2,2+g,d+2,2l,2+1,5,3+1,2+1,2,3,6,16wm+1v", "R": "17m+3,2,2,6+3,m,15+2,2+2,h+h,13,3+8,2,2,3+1,2,p+1,x,5+4,5,a,2,2,3,u,c+2,g+1,5,2+1,4+1,5j,6+1,2,b,2+2,f,2+1,1s+2,2,3+1,7,1ez0,2,2+1,4+4,b,4,3,b,42,2+2,4,3,2+1,2,o+3,ae,ep,x,2o+2,3+1,3,5+1,6", "L": "x9u,jff,a,fd,jv", "T": "4t,gj+33,7o+4,1+1,7c+18,2,2+1,2+1,2,21+a,2,1b+k,h,2u+6,3+5,3+1,2+3,y,2,v+q,2k+a,1n+8,a,p+3,2+8,2+2,2+4,18+2,3c+e,2+v,1k,2,5+7,5,4+6,b+1,u,1n,5+3,9,l+1,r,3+1,1m,5+1,5+1,3+2,4,v+1,4,c+1,1m,5+4,2+1,5,l+1,n+5,2,1n,3,2+3,9,8+1,c+1,v,1q,d,1f,4,1m+2,6+2,2+3,8+1,c+1,u,1n,3,7,6+1,l+1,t+1,1m+1,5+3,9,l+1,u,21,8+2,2,2j,3+6,d+7,2r,3+8,c+5,23+1,s,2,2,1k+d,2+4,2+1,6+a,2+z,a,2v+3,2+5,2+1,3+1,q+1,5+2,h+3,e,3+1,7,g,jk+2,qb+2,u+2,u+1,v+1,1t+1,2+6,9,3+a,a,1a+2,3c+1,z,3b+2,5+1,a,7+2,64+1,3,1n,2+6,2,2,3+7,7+9,3,1d+d,1,1+1,1s+3,1d,2+4,2,6,15+8,d+1,x+3,3+1,2+2,1l,2+1,4,2+2,1n+7,3+1,49+2,2+c,2+6,5,7,4+1,5j+1l,2+4,ek,3+1,r+4,1e+4,6+5,2p+c,1+3,1,1+2,1+b,2db+2,3y,2p+v,ff+3,30+1,n9x,1+2,2+9,x+1,29+1,7l,4,5,q+1,6,48+1,r+h,e,13+7,q+a,1b+2,1d,3+3,3+1,14,1w+5,3+1,3+1,d,9,1c,1g,2+2,3+1,6+1,2,17+1,9,6n,3,5,fn5,ki+f,h+f,5s,6y+2,ea,6b,46+4,1af+2,2+1,6+3,15+2,5,4m+1,fy+3,as+1,4a+a,4x,1j+e,1l+2,1e+3,3+1,1y+2,11+4,2+7,1r,d+1,1h+8,b+3,3,2o+2,3,2+1,7,4h,4+7,m+1,1m+1,4,12+6,4+4,5g+7,3+2,2,o,2d+5,2,5+1,2+1,6n+3,7+1,2+1,s+1,2e+7,3,2+1,2z,2,3+5,2,2u+2,3+3,2+4,78+8,2+1,75+1,2,5,41+3,3+1,5,x+9,15+5,3+3,9,a+5,3+2,1b+c,2+1,bb+6,2+5,2,2b+l,3+6,2+1,2+1,3f+5,4,2+1,2+6,2,21+1,4,2,9o+1,470+8,at4+4,1o+6,t5,1s+3,2a,f5l+1,2+3,43o+2,a+7,1+7,3+6,v+3,45+2,1j0+1i,5+1d,9,f,n+4,2+e,11t+6,2+g,3+6,2+1,2+4,7a+6,c6+3,15t+6,32+6,1,gzau,v+2n,3l+6n" };
  const JT_LEFT = 1, JT_RIGHT = 2, JT_DUAL = 4, JT_TRANSPARENT = 8, JT_JOIN_CAUSING = 16, JT_NON_JOINING = 32;
  let joiningTypeMap;
  function getCharJoiningType(ch) {
    if (!joiningTypeMap) {
      const m = {
        R: JT_RIGHT,
        L: JT_LEFT,
        D: JT_DUAL,
        C: JT_JOIN_CAUSING,
        U: JT_NON_JOINING,
        T: JT_TRANSPARENT
      };
      joiningTypeMap = /* @__PURE__ */ new Map();
      for (let type in joiningTypeRawData) {
        let lastCode = 0;
        joiningTypeRawData[type].split(",").forEach((range) => {
          let [skip, step] = range.split("+");
          skip = parseInt(skip, 36);
          step = step ? parseInt(step, 36) : 0;
          joiningTypeMap.set(lastCode += skip, m[type]);
          for (let i5 = step; i5--; ) {
            joiningTypeMap.set(++lastCode, m[type]);
          }
        });
      }
    }
    return joiningTypeMap.get(ch) || JT_NON_JOINING;
  }
  const ISOL = 1, INIT = 2, FINA = 3, MEDI = 4;
  const formsToFeatures = [null, "isol", "init", "fina", "medi"];
  function detectJoiningForms(str) {
    const joiningForms = new Uint8Array(str.length);
    let prevJoiningType = JT_NON_JOINING;
    let prevForm = ISOL;
    let prevIndex = -1;
    for (let i5 = 0; i5 < str.length; i5++) {
      const code = str.codePointAt(i5);
      let joiningType = getCharJoiningType(code) | 0;
      let form = ISOL;
      if (joiningType & JT_TRANSPARENT) {
        continue;
      }
      if (prevJoiningType & (JT_LEFT | JT_DUAL | JT_JOIN_CAUSING)) {
        if (joiningType & (JT_RIGHT | JT_DUAL | JT_JOIN_CAUSING)) {
          form = FINA;
          if (prevForm === ISOL || prevForm === FINA) {
            joiningForms[prevIndex]++;
          }
        } else if (joiningType & (JT_LEFT | JT_NON_JOINING)) {
          if (prevForm === INIT || prevForm === MEDI) {
            joiningForms[prevIndex]--;
          }
        }
      } else if (prevJoiningType & (JT_RIGHT | JT_NON_JOINING)) {
        if (prevForm === INIT || prevForm === MEDI) {
          joiningForms[prevIndex]--;
        }
      }
      prevForm = joiningForms[i5] = form;
      prevJoiningType = joiningType;
      prevIndex = i5;
      if (code > 65535)
        i5++;
    }
    return joiningForms;
  }
  function stringToGlyphs(font, str) {
    const glyphIds = [];
    for (let i5 = 0; i5 < str.length; i5++) {
      const cc = str.codePointAt(i5);
      if (cc > 65535)
        i5++;
      glyphIds.push(Typr.U.codeToGlyph(font, cc));
    }
    const gsub = font["GSUB"];
    if (gsub) {
      const { lookupList, featureList } = gsub;
      let joiningForms;
      const supportedFeatures = /^(rlig|liga|mset|isol|init|fina|medi|half|pres|blws)$/;
      const usedLookups = [];
      featureList.forEach((feature) => {
        if (supportedFeatures.test(feature.tag)) {
          for (let ti = 0; ti < feature.tab.length; ti++) {
            if (usedLookups[feature.tab[ti]])
              continue;
            usedLookups[feature.tab[ti]] = true;
            const tab = lookupList[feature.tab[ti]];
            const isJoiningFeature = /^(isol|init|fina|medi)$/.test(feature.tag);
            if (isJoiningFeature && !joiningForms) {
              joiningForms = detectJoiningForms(str);
            }
            for (let ci = 0; ci < glyphIds.length; ci++) {
              if (!joiningForms || !isJoiningFeature || formsToFeatures[joiningForms[ci]] === feature.tag) {
                Typr.U._applySubs(glyphIds, ci, tab, lookupList);
              }
            }
          }
        }
      });
    }
    return glyphIds;
  }
  function wrapFontObj(typrFont) {
    const glyphMap = /* @__PURE__ */ Object.create(null);
    const fontObj = {
      unitsPerEm: typrFont.head.unitsPerEm,
      ascender: typrFont.hhea.ascender,
      descender: typrFont.hhea.descender,
      forEachGlyph(text, fontSize, letterSpacing, callback) {
        let glyphX = 0;
        const fontScale = 1 / fontObj.unitsPerEm * fontSize;
        const glyphIndices = stringToGlyphs(typrFont, text);
        let charIndex = 0;
        let prevGlyphIndex = -1;
        glyphIndices.forEach((glyphIndex, i5) => {
          if (glyphIndex !== -1) {
            let glyphObj = glyphMap[glyphIndex];
            if (!glyphObj) {
              const { cmds, crds } = Typr.U.glyphToPath(typrFont, glyphIndex);
              let path = "";
              let crdsIdx = 0;
              for (let i6 = 0, len = cmds.length; i6 < len; i6++) {
                const numArgs = cmdArgLengths[cmds[i6]];
                path += cmds[i6];
                for (let j = 1; j <= numArgs; j++) {
                  path += (j > 1 ? "," : "") + crds[crdsIdx++];
                }
              }
              let xMin, yMin, xMax, yMax;
              if (crds.length) {
                xMin = yMin = Infinity;
                xMax = yMax = -Infinity;
                for (let i6 = 0, len = crds.length; i6 < len; i6 += 2) {
                  let x = crds[i6];
                  let y = crds[i6 + 1];
                  if (x < xMin)
                    xMin = x;
                  if (y < yMin)
                    yMin = y;
                  if (x > xMax)
                    xMax = x;
                  if (y > yMax)
                    yMax = y;
                }
              } else {
                xMin = xMax = yMin = yMax = 0;
              }
              glyphObj = glyphMap[glyphIndex] = {
                index: glyphIndex,
                advanceWidth: typrFont.hmtx.aWidth[glyphIndex],
                xMin,
                yMin,
                xMax,
                yMax,
                path,
                pathCommandCount: cmds.length
              };
            }
            if (prevGlyphIndex !== -1) {
              glyphX += Typr.U.getPairAdjustment(typrFont, prevGlyphIndex, glyphIndex) * fontScale;
            }
            callback.call(null, glyphObj, glyphX, charIndex);
            if (glyphObj.advanceWidth) {
              glyphX += glyphObj.advanceWidth * fontScale;
            }
            if (letterSpacing) {
              glyphX += letterSpacing * fontSize;
            }
            prevGlyphIndex = glyphIndex;
          }
          charIndex += text.codePointAt(charIndex) > 65535 ? 2 : 1;
        });
        return glyphX;
      }
    };
    return fontObj;
  }
  return function parse2(buffer) {
    const peek = new Uint8Array(buffer, 0, 4);
    const tag = Typr._bin.readASCII(peek, 0, 4);
    if (tag === "wOFF") {
      buffer = woff2otf(buffer);
    } else if (tag === "wOF2") {
      throw new Error("woff2 fonts not supported");
    }
    return wrapFontObj(Typr.parse(buffer)[0]);
  };
}
var workerModule = defineWorkerModule({
  name: "Typr Font Parser",
  dependencies: [typrFactory, woff2otfFactory, parserFactory],
  init(typrFactory2, woff2otfFactory2, parserFactory2) {
    const Typr = typrFactory2();
    const woff2otf = woff2otfFactory2();
    return parserFactory2(Typr, woff2otf);
  }
});
var CONFIG = {
  defaultFontURL: "https://fonts.gstatic.com/s/roboto/v18/KFOmCnqEu92Fr1Mu4mxM.woff",
  sdfGlyphSize: 64,
  sdfMargin: 1 / 16,
  sdfExponent: 9,
  textureWidth: 2048
};
var tempColor = new Color();
var hasRequested = false;
function now$1() {
  return (self.performance || Date).now();
}
var atlases = /* @__PURE__ */ Object.create(null);
function getTextRenderInfo(args, callback) {
  hasRequested = true;
  args = assign2({}, args);
  const totalStart = now$1();
  args.font = toAbsoluteURL(args.font || CONFIG.defaultFontURL);
  args.text = "" + args.text;
  args.sdfGlyphSize = args.sdfGlyphSize || CONFIG.sdfGlyphSize;
  if (args.colorRanges != null) {
    let colors2 = {};
    for (let key in args.colorRanges) {
      if (args.colorRanges.hasOwnProperty(key)) {
        let val = args.colorRanges[key];
        if (typeof val !== "number") {
          val = tempColor.set(val).getHex();
        }
        colors2[key] = val;
      }
    }
    args.colorRanges = colors2;
  }
  Object.freeze(args);
  const { textureWidth, sdfExponent } = CONFIG;
  const { sdfGlyphSize } = args;
  const glyphsPerRow = textureWidth / sdfGlyphSize * 4;
  let atlas = atlases[sdfGlyphSize];
  if (!atlas) {
    const canvas = document.createElement("canvas");
    canvas.width = textureWidth;
    canvas.height = sdfGlyphSize * 256 / glyphsPerRow;
    atlas = atlases[sdfGlyphSize] = {
      glyphCount: 0,
      sdfGlyphSize,
      sdfCanvas: canvas,
      sdfTexture: new Texture(canvas, void 0, void 0, void 0, LinearFilter, LinearFilter),
      contextLost: false,
      glyphsByFont: /* @__PURE__ */ new Map()
    };
    atlas.sdfTexture.generateMipmaps = false;
    initContextLossHandling(atlas);
  }
  const { sdfTexture, sdfCanvas } = atlas;
  let fontGlyphs = atlas.glyphsByFont.get(args.font);
  if (!fontGlyphs) {
    atlas.glyphsByFont.set(args.font, fontGlyphs = /* @__PURE__ */ new Map());
  }
  typesetInWorker(args).then((result) => {
    const { glyphIds, glyphPositions, fontSize, unitsPerEm, timings } = result;
    const neededSDFs = [];
    const glyphBounds = new Float32Array(glyphIds.length * 4);
    const fontSizeMult = fontSize / unitsPerEm;
    let boundsIdx = 0;
    let positionsIdx = 0;
    const quadsStart = now$1();
    glyphIds.forEach((glyphId, i5) => {
      let glyphInfo = fontGlyphs.get(glyphId);
      if (!glyphInfo) {
        const { path, pathBounds } = result.glyphData[glyphId];
        const fontUnitsMargin = Math.max(pathBounds[2] - pathBounds[0], pathBounds[3] - pathBounds[1]) / sdfGlyphSize * (CONFIG.sdfMargin * sdfGlyphSize + 0.5);
        const atlasIndex = atlas.glyphCount++;
        const sdfViewBox2 = [
          pathBounds[0] - fontUnitsMargin,
          pathBounds[1] - fontUnitsMargin,
          pathBounds[2] + fontUnitsMargin,
          pathBounds[3] + fontUnitsMargin
        ];
        fontGlyphs.set(glyphId, glyphInfo = { path, atlasIndex, sdfViewBox: sdfViewBox2 });
        neededSDFs.push(glyphInfo);
      }
      const { sdfViewBox } = glyphInfo;
      const posX = glyphPositions[positionsIdx++];
      const posY = glyphPositions[positionsIdx++];
      glyphBounds[boundsIdx++] = posX + sdfViewBox[0] * fontSizeMult;
      glyphBounds[boundsIdx++] = posY + sdfViewBox[1] * fontSizeMult;
      glyphBounds[boundsIdx++] = posX + sdfViewBox[2] * fontSizeMult;
      glyphBounds[boundsIdx++] = posY + sdfViewBox[3] * fontSizeMult;
      glyphIds[i5] = glyphInfo.atlasIndex;
    });
    timings.quads = (timings.quads || 0) + (now$1() - quadsStart);
    const sdfStart = now$1();
    timings.sdf = {};
    const currentHeight = sdfCanvas.height;
    const neededRows = Math.ceil(atlas.glyphCount / glyphsPerRow);
    const neededHeight = Math.pow(2, Math.ceil(Math.log2(neededRows * sdfGlyphSize)));
    if (neededHeight > currentHeight) {
      console.info(`Increasing SDF texture size ${currentHeight}->${neededHeight}`);
      resizeWebGLCanvasWithoutClearing(sdfCanvas, textureWidth, neededHeight);
      sdfTexture.dispose();
    }
    DefaultThenable.all(neededSDFs.map((glyphInfo) => generateGlyphSDF(glyphInfo, atlas, args.gpuAccelerateSDF).then(({ timing }) => {
      timings.sdf[glyphInfo.atlasIndex] = timing;
    }))).then(() => {
      if (neededSDFs.length && !atlas.contextLost) {
        safariPre15Workaround(atlas);
        sdfTexture.needsUpdate = true;
      }
      timings.sdfTotal = now$1() - sdfStart;
      timings.total = now$1() - totalStart;
      callback(Object.freeze({
        parameters: args,
        sdfTexture,
        sdfGlyphSize,
        sdfExponent,
        glyphBounds,
        glyphAtlasIndices: glyphIds,
        glyphColors: result.glyphColors,
        caretPositions: result.caretPositions,
        caretHeight: result.caretHeight,
        chunkedBounds: result.chunkedBounds,
        ascender: result.ascender,
        descender: result.descender,
        lineHeight: result.lineHeight,
        topBaseline: result.topBaseline,
        blockBounds: result.blockBounds,
        visibleBounds: result.visibleBounds,
        timings: result.timings,
        get totalBounds() {
          console.log("totalBounds deprecated, use blockBounds instead");
          return result.blockBounds;
        },
        get totalBlockSize() {
          console.log("totalBlockSize deprecated, use blockBounds instead");
          const [x0, y0, x1, y1] = result.blockBounds;
          return [x1 - x0, y1 - y0];
        }
      }));
    });
  });
  DefaultThenable.all([]).then(() => {
    if (!atlas.contextLost) {
      warmUpSDFCanvas(sdfCanvas);
    }
  });
}
function generateGlyphSDF({ path, atlasIndex, sdfViewBox }, { sdfGlyphSize, sdfCanvas, contextLost }, useGPU) {
  if (contextLost) {
    return Promise.resolve({ timing: -1 });
  }
  const { textureWidth, sdfExponent } = CONFIG;
  const maxDist = Math.max(sdfViewBox[2] - sdfViewBox[0], sdfViewBox[3] - sdfViewBox[1]);
  const squareIndex = Math.floor(atlasIndex / 4);
  const x = squareIndex % (textureWidth / sdfGlyphSize) * sdfGlyphSize;
  const y = Math.floor(squareIndex / (textureWidth / sdfGlyphSize)) * sdfGlyphSize;
  const channel = atlasIndex % 4;
  return generateSDF(sdfGlyphSize, sdfGlyphSize, path, sdfViewBox, maxDist, sdfExponent, sdfCanvas, x, y, channel, useGPU);
}
function initContextLossHandling(atlas) {
  const canvas = atlas.sdfCanvas;
  canvas.addEventListener("webglcontextlost", (event) => {
    console.log("Context Lost", event);
    event.preventDefault();
    atlas.contextLost = true;
  });
  canvas.addEventListener("webglcontextrestored", (event) => {
    console.log("Context Restored", event);
    atlas.contextLost = false;
    const promises = [];
    atlas.glyphsByFont.forEach((glyphMap) => {
      glyphMap.forEach((glyph) => {
        promises.push(generateGlyphSDF(glyph, atlas, true));
      });
    });
    DefaultThenable.all(promises).then(() => {
      safariPre15Workaround(atlas);
      atlas.sdfTexture.needsUpdate = true;
    });
  });
}
function preloadFont({ font, characters, sdfGlyphSize }, callback) {
  let text = Array.isArray(characters) ? characters.join("\n") : "" + characters;
  getTextRenderInfo({ font, sdfGlyphSize, text }, callback);
}
function assign2(toObj, fromObj) {
  for (let key in fromObj) {
    if (fromObj.hasOwnProperty(key)) {
      toObj[key] = fromObj[key];
    }
  }
  return toObj;
}
var linkEl;
function toAbsoluteURL(path) {
  if (!linkEl) {
    linkEl = typeof document === "undefined" ? {} : document.createElement("a");
  }
  linkEl.href = path;
  return linkEl.href;
}
function safariPre15Workaround(atlas) {
  if (typeof createImageBitmap !== "function") {
    console.info("Safari<15: applying SDF canvas workaround");
    const { sdfCanvas, sdfTexture } = atlas;
    const { width, height } = sdfCanvas;
    const gl = atlas.sdfCanvas.getContext("webgl");
    let pixels = sdfTexture.image.data;
    if (!pixels || pixels.length !== width * height * 4) {
      pixels = new Uint8Array(width * height * 4);
      sdfTexture.image = { width, height, data: pixels };
      sdfTexture.flipY = false;
      sdfTexture.isDataTexture = true;
    }
    gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels);
  }
}
var typesetterWorkerModule = defineWorkerModule({
  name: "Typesetter",
  dependencies: [
    CONFIG,
    workerModule,
    createTypesetter,
    bidi_default
  ],
  init(config, fontParser, createTypesetter2, bidiFactory2) {
    const { defaultFontURL } = config;
    return createTypesetter2(fontParser, bidiFactory2(), { defaultFontURL });
  }
});
var typesetInWorker = defineWorkerModule({
  name: "Typesetter",
  dependencies: [
    typesetterWorkerModule,
    ThenableWorkerModule
  ],
  init(typesetter, Thenable) {
    return function(args) {
      const thenable = new Thenable();
      typesetter.typeset(args, thenable.resolve);
      return thenable;
    };
  },
  getTransferables(result) {
    const transferables = [
      result.glyphPositions.buffer,
      result.glyphIds.buffer
    ];
    if (result.caretPositions) {
      transferables.push(result.caretPositions.buffer);
    }
    if (result.glyphColors) {
      transferables.push(result.glyphColors.buffer);
    }
    return transferables;
  }
});
var GlyphsGeometry = (() => {
  const templateGeometries = {};
  function getTemplateGeometry(detail) {
    let geom = templateGeometries[detail];
    if (!geom) {
      const front = new PlaneGeometry(1, 1, detail, detail);
      const back = front.clone();
      const frontAttrs = front.attributes;
      const backAttrs = back.attributes;
      const combined = new BufferGeometry();
      const vertCount = frontAttrs.uv.count;
      for (let i5 = 0; i5 < vertCount; i5++) {
        backAttrs.position.array[i5 * 3] *= -1;
        backAttrs.normal.array[i5 * 3 + 2] *= -1;
      }
      ["position", "normal", "uv"].forEach((name) => {
        combined.setAttribute(name, new Float32BufferAttribute([...frontAttrs[name].array, ...backAttrs[name].array], frontAttrs[name].itemSize));
      });
      combined.setIndex([...front.index.array, ...back.index.array.map((n2) => n2 + vertCount)]);
      combined.translate(0.5, 0.5, 0);
      geom = templateGeometries[detail] = combined;
    }
    return geom;
  }
  const glyphBoundsAttrName = "aTroikaGlyphBounds";
  const glyphIndexAttrName = "aTroikaGlyphIndex";
  const glyphColorAttrName = "aTroikaGlyphColor";
  class GlyphsGeometry2 extends InstancedBufferGeometry {
    constructor() {
      super();
      this.detail = 1;
      this.curveRadius = 0;
      this.groups = [
        { start: 0, count: Infinity, materialIndex: 0 },
        { start: 0, count: Infinity, materialIndex: 1 }
      ];
      this.boundingSphere = new Sphere();
      this.boundingBox = new Box3();
    }
    computeBoundingSphere() {
    }
    computeBoundingBox() {
    }
    setSide(side) {
      const verts = this.getIndex().count;
      this.setDrawRange(side === BackSide ? verts / 2 : 0, side === DoubleSide ? verts : verts / 2);
    }
    set detail(detail) {
      if (detail !== this._detail) {
        this._detail = detail;
        if (typeof detail !== "number" || detail < 1) {
          detail = 1;
        }
        let tpl = getTemplateGeometry(detail);
        ["position", "normal", "uv"].forEach((attr) => {
          this.attributes[attr] = tpl.attributes[attr].clone();
        });
        this.setIndex(tpl.getIndex().clone());
      }
    }
    get detail() {
      return this._detail;
    }
    set curveRadius(r3) {
      if (r3 !== this._curveRadius) {
        this._curveRadius = r3;
        this._updateBounds();
      }
    }
    get curveRadius() {
      return this._curveRadius;
    }
    updateGlyphs(glyphBounds, glyphAtlasIndices, blockBounds, chunkedBounds, glyphColors) {
      updateBufferAttr(this, glyphBoundsAttrName, glyphBounds, 4);
      updateBufferAttr(this, glyphIndexAttrName, glyphAtlasIndices, 1);
      updateBufferAttr(this, glyphColorAttrName, glyphColors, 3);
      this._blockBounds = blockBounds;
      this._chunkedBounds = chunkedBounds;
      setInstanceCount(this, glyphAtlasIndices.length);
      this._updateBounds();
    }
    _updateBounds() {
      const bounds = this._blockBounds;
      if (bounds) {
        const { curveRadius, boundingBox: bbox } = this;
        if (curveRadius) {
          const { PI, floor, min, max, sin, cos } = Math;
          const halfPi = PI / 2;
          const twoPi = PI * 2;
          const absR = Math.abs(curveRadius);
          const leftAngle = bounds[0] / absR;
          const rightAngle = bounds[2] / absR;
          const minX = floor((leftAngle + halfPi) / twoPi) !== floor((rightAngle + halfPi) / twoPi) ? -absR : min(sin(leftAngle) * absR, sin(rightAngle) * absR);
          const maxX = floor((leftAngle - halfPi) / twoPi) !== floor((rightAngle - halfPi) / twoPi) ? absR : max(sin(leftAngle) * absR, sin(rightAngle) * absR);
          const maxZ = floor((leftAngle + PI) / twoPi) !== floor((rightAngle + PI) / twoPi) ? absR * 2 : max(absR - cos(leftAngle) * absR, absR - cos(rightAngle) * absR);
          bbox.min.set(minX, bounds[1], curveRadius < 0 ? -maxZ : 0);
          bbox.max.set(maxX, bounds[3], curveRadius < 0 ? 0 : maxZ);
        } else {
          bbox.min.set(bounds[0], bounds[1], 0);
          bbox.max.set(bounds[2], bounds[3], 0);
        }
        bbox.getBoundingSphere(this.boundingSphere);
      }
    }
    applyClipRect(clipRect) {
      let count = this.getAttribute(glyphIndexAttrName).count;
      let chunks = this._chunkedBounds;
      if (chunks) {
        for (let i5 = chunks.length; i5--; ) {
          count = chunks[i5].end;
          let rect = chunks[i5].rect;
          if (rect[1] < clipRect.w && rect[3] > clipRect.y && rect[0] < clipRect.z && rect[2] > clipRect.x) {
            break;
          }
        }
      }
      setInstanceCount(this, count);
    }
  }
  if (!GlyphsGeometry2.prototype.setAttribute) {
    GlyphsGeometry2.prototype.setAttribute = function(name, attribute) {
      this.attributes[name] = attribute;
      return this;
    };
  }
  function updateBufferAttr(geom, attrName, newArray, itemSize) {
    const attr = geom.getAttribute(attrName);
    if (newArray) {
      if (attr && attr.array.length === newArray.length) {
        attr.array.set(newArray);
        attr.needsUpdate = true;
      } else {
        geom.setAttribute(attrName, new InstancedBufferAttribute(newArray, itemSize));
        delete geom._maxInstanceCount;
        geom.dispose();
      }
    } else if (attr) {
      geom.deleteAttribute(attrName);
    }
  }
  function setInstanceCount(geom, count) {
    geom[geom.hasOwnProperty("instanceCount") ? "instanceCount" : "maxInstancedCount"] = count;
  }
  return GlyphsGeometry2;
})();
var VERTEX_DEFS = `
uniform vec2 uTroikaSDFTextureSize;
uniform float uTroikaSDFGlyphSize;
uniform vec4 uTroikaTotalBounds;
uniform vec4 uTroikaClipRect;
uniform mat3 uTroikaOrient;
uniform bool uTroikaUseGlyphColors;
uniform float uTroikaDistanceOffset;
uniform float uTroikaBlurRadius;
uniform vec2 uTroikaPositionOffset;
uniform float uTroikaCurveRadius;
attribute vec4 aTroikaGlyphBounds;
attribute float aTroikaGlyphIndex;
attribute vec3 aTroikaGlyphColor;
varying vec2 vTroikaGlyphUV;
varying vec4 vTroikaTextureUVBounds;
varying float vTroikaTextureChannel;
varying vec3 vTroikaGlyphColor;
varying vec2 vTroikaGlyphDimensions;
`;
var VERTEX_TRANSFORM = `
vec4 bounds = aTroikaGlyphBounds;
bounds.xz += uTroikaPositionOffset.x;
bounds.yw -= uTroikaPositionOffset.y;

vec4 outlineBounds = vec4(
  bounds.xy - uTroikaDistanceOffset - uTroikaBlurRadius,
  bounds.zw + uTroikaDistanceOffset + uTroikaBlurRadius
);
vec4 clippedBounds = vec4(
  clamp(outlineBounds.xy, uTroikaClipRect.xy, uTroikaClipRect.zw),
  clamp(outlineBounds.zw, uTroikaClipRect.xy, uTroikaClipRect.zw)
);

vec2 clippedXY = (mix(clippedBounds.xy, clippedBounds.zw, position.xy) - bounds.xy) / (bounds.zw - bounds.xy);

position.xy = mix(bounds.xy, bounds.zw, clippedXY);

uv = (position.xy - uTroikaTotalBounds.xy) / (uTroikaTotalBounds.zw - uTroikaTotalBounds.xy);

float rad = uTroikaCurveRadius;
if (rad != 0.0) {
  float angle = position.x / rad;
  position.xz = vec2(sin(angle) * rad, rad - cos(angle) * rad);
  normal.xz = vec2(sin(angle), cos(angle));
}
  
position = uTroikaOrient * position;
normal = uTroikaOrient * normal;

vTroikaGlyphUV = clippedXY.xy;
vTroikaGlyphDimensions = vec2(bounds[2] - bounds[0], bounds[3] - bounds[1]);

${""}
float txCols = uTroikaSDFTextureSize.x / uTroikaSDFGlyphSize;
vec2 txUvPerSquare = uTroikaSDFGlyphSize / uTroikaSDFTextureSize;
vec2 txStartUV = txUvPerSquare * vec2(
  mod(floor(aTroikaGlyphIndex / 4.0), txCols),
  floor(floor(aTroikaGlyphIndex / 4.0) / txCols)
);
vTroikaTextureUVBounds = vec4(txStartUV, vec2(txStartUV) + txUvPerSquare);
vTroikaTextureChannel = mod(aTroikaGlyphIndex, 4.0);
`;
var FRAGMENT_DEFS = `
uniform sampler2D uTroikaSDFTexture;
uniform vec2 uTroikaSDFTextureSize;
uniform float uTroikaSDFGlyphSize;
uniform float uTroikaSDFExponent;
uniform float uTroikaDistanceOffset;
uniform float uTroikaFillOpacity;
uniform float uTroikaOutlineOpacity;
uniform float uTroikaBlurRadius;
uniform vec3 uTroikaStrokeColor;
uniform float uTroikaStrokeWidth;
uniform float uTroikaStrokeOpacity;
uniform bool uTroikaSDFDebug;
varying vec2 vTroikaGlyphUV;
varying vec4 vTroikaTextureUVBounds;
varying float vTroikaTextureChannel;
varying vec2 vTroikaGlyphDimensions;

float troikaSdfValueToSignedDistance(float alpha) {
  // Inverse of exponential encoding in webgl-sdf-generator
  ${""}
  float maxDimension = max(vTroikaGlyphDimensions.x, vTroikaGlyphDimensions.y);
  float absDist = (1.0 - pow(2.0 * (alpha > 0.5 ? 1.0 - alpha : alpha), 1.0 / uTroikaSDFExponent)) * maxDimension;
  float signedDist = absDist * (alpha > 0.5 ? -1.0 : 1.0);
  return signedDist;
}

float troikaGlyphUvToSdfValue(vec2 glyphUV) {
  vec2 textureUV = mix(vTroikaTextureUVBounds.xy, vTroikaTextureUVBounds.zw, glyphUV);
  vec4 rgba = texture2D(uTroikaSDFTexture, textureUV);
  float ch = floor(vTroikaTextureChannel + 0.5); //NOTE: can't use round() in WebGL1
  return ch == 0.0 ? rgba.r : ch == 1.0 ? rgba.g : ch == 2.0 ? rgba.b : rgba.a;
}

float troikaGlyphUvToDistance(vec2 uv) {
  return troikaSdfValueToSignedDistance(troikaGlyphUvToSdfValue(uv));
}

float troikaGetAADist() {
  ${""}
  #if defined(GL_OES_standard_derivatives) || __VERSION__ >= 300
  return length(fwidth(vTroikaGlyphUV * vTroikaGlyphDimensions)) * 0.5;
  #else
  return vTroikaGlyphDimensions.x / 64.0;
  #endif
}

float troikaGetFragDistValue() {
  vec2 clampedGlyphUV = clamp(vTroikaGlyphUV, 0.5 / uTroikaSDFGlyphSize, 1.0 - 0.5 / uTroikaSDFGlyphSize);
  float distance = troikaGlyphUvToDistance(clampedGlyphUV);
 
  // Extrapolate distance when outside bounds:
  distance += clampedGlyphUV == vTroikaGlyphUV ? 0.0 : 
    length((vTroikaGlyphUV - clampedGlyphUV) * vTroikaGlyphDimensions);

  ${""}

  return distance;
}

float troikaGetEdgeAlpha(float distance, float distanceOffset, float aaDist) {
  #if defined(IS_DEPTH_MATERIAL) || defined(IS_DISTANCE_MATERIAL)
  float alpha = step(-distanceOffset, -distance);
  #else

  float alpha = smoothstep(
    distanceOffset + aaDist,
    distanceOffset - aaDist,
    distance
  );
  #endif

  return alpha;
}
`;
var FRAGMENT_TRANSFORM = `
float aaDist = troikaGetAADist();
float fragDistance = troikaGetFragDistValue();
float edgeAlpha = uTroikaSDFDebug ?
  troikaGlyphUvToSdfValue(vTroikaGlyphUV) :
  troikaGetEdgeAlpha(fragDistance, uTroikaDistanceOffset, max(aaDist, uTroikaBlurRadius));

#if !defined(IS_DEPTH_MATERIAL) && !defined(IS_DISTANCE_MATERIAL)
vec4 fillRGBA = gl_FragColor;
fillRGBA.a *= uTroikaFillOpacity;
vec4 strokeRGBA = uTroikaStrokeWidth == 0.0 ? fillRGBA : vec4(uTroikaStrokeColor, uTroikaStrokeOpacity);
if (fillRGBA.a == 0.0) fillRGBA.rgb = strokeRGBA.rgb;
gl_FragColor = mix(fillRGBA, strokeRGBA, smoothstep(
  -uTroikaStrokeWidth - aaDist,
  -uTroikaStrokeWidth + aaDist,
  fragDistance
));
gl_FragColor.a *= edgeAlpha;
#endif

if (edgeAlpha == 0.0) {
  discard;
}
`;
function createTextDerivedMaterial(baseMaterial) {
  const textMaterial = createDerivedMaterial(baseMaterial, {
    chained: true,
    extensions: {
      derivatives: true
    },
    uniforms: {
      uTroikaSDFTexture: { value: null },
      uTroikaSDFTextureSize: { value: new Vector2() },
      uTroikaSDFGlyphSize: { value: 0 },
      uTroikaSDFExponent: { value: 0 },
      uTroikaTotalBounds: { value: new Vector4(0, 0, 0, 0) },
      uTroikaClipRect: { value: new Vector4(0, 0, 0, 0) },
      uTroikaDistanceOffset: { value: 0 },
      uTroikaOutlineOpacity: { value: 0 },
      uTroikaFillOpacity: { value: 1 },
      uTroikaPositionOffset: { value: new Vector2() },
      uTroikaCurveRadius: { value: 0 },
      uTroikaBlurRadius: { value: 0 },
      uTroikaStrokeWidth: { value: 0 },
      uTroikaStrokeColor: { value: new Color() },
      uTroikaStrokeOpacity: { value: 1 },
      uTroikaOrient: { value: new Matrix3() },
      uTroikaUseGlyphColors: { value: true },
      uTroikaSDFDebug: { value: false }
    },
    vertexDefs: VERTEX_DEFS,
    vertexTransform: VERTEX_TRANSFORM,
    fragmentDefs: FRAGMENT_DEFS,
    fragmentColorTransform: FRAGMENT_TRANSFORM,
    customRewriter({ vertexShader: vertexShader2, fragmentShader: fragmentShader2 }) {
      let uDiffuseRE = /\buniform\s+vec3\s+diffuse\b/;
      if (uDiffuseRE.test(fragmentShader2)) {
        fragmentShader2 = fragmentShader2.replace(uDiffuseRE, "varying vec3 vTroikaGlyphColor").replace(/\bdiffuse\b/g, "vTroikaGlyphColor");
        if (!uDiffuseRE.test(vertexShader2)) {
          vertexShader2 = vertexShader2.replace(voidMainRegExp, "uniform vec3 diffuse;\n$&\nvTroikaGlyphColor = uTroikaUseGlyphColors ? aTroikaGlyphColor / 255.0 : diffuse;\n");
        }
      }
      return { vertexShader: vertexShader2, fragmentShader: fragmentShader2 };
    }
  });
  textMaterial.transparent = true;
  Object.defineProperties(textMaterial, {
    isTroikaTextMaterial: { value: true },
    shadowSide: {
      get() {
        return this.side;
      },
      set() {
      }
    }
  });
  return textMaterial;
}
var Text = (() => {
  const defaultMaterial = new MeshBasicMaterial({
    color: 16777215,
    side: DoubleSide,
    transparent: true
  });
  const defaultStrokeColor = 8421504;
  const tempMat4 = new Matrix4();
  const tempVec3a = new Vector3();
  const tempVec3b = new Vector3();
  const tempArray = [];
  const origin = new Vector3();
  const defaultOrient = "+x+y";
  function first(o2) {
    return Array.isArray(o2) ? o2[0] : o2;
  }
  let getFlatRaycastMesh = () => {
    const mesh = new Mesh(new PlaneGeometry(1, 1), defaultMaterial);
    getFlatRaycastMesh = () => mesh;
    return mesh;
  };
  let getCurvedRaycastMesh = () => {
    const mesh = new Mesh(new PlaneGeometry(1, 1, 32, 1), defaultMaterial);
    getCurvedRaycastMesh = () => mesh;
    return mesh;
  };
  const syncStartEvent = { type: "syncstart" };
  const syncCompleteEvent = { type: "synccomplete" };
  const SYNCABLE_PROPS = [
    "font",
    "fontSize",
    "letterSpacing",
    "lineHeight",
    "maxWidth",
    "overflowWrap",
    "text",
    "direction",
    "textAlign",
    "textIndent",
    "whiteSpace",
    "anchorX",
    "anchorY",
    "colorRanges",
    "sdfGlyphSize"
  ];
  const COPYABLE_PROPS = SYNCABLE_PROPS.concat("material", "color", "depthOffset", "clipRect", "curveRadius", "orientation", "glyphGeometryDetail");
  class Text3 extends Mesh {
    constructor() {
      const geometry = new GlyphsGeometry();
      super(geometry, null);
      this.text = "";
      this.anchorX = 0;
      this.anchorY = 0;
      this.curveRadius = 0;
      this.direction = "auto";
      this.font = null;
      this.fontSize = 0.1;
      this.letterSpacing = 0;
      this.lineHeight = "normal";
      this.maxWidth = Infinity;
      this.overflowWrap = "normal";
      this.textAlign = "left";
      this.textIndent = 0;
      this.whiteSpace = "normal";
      this.material = null;
      this.color = null;
      this.colorRanges = null;
      this.outlineWidth = 0;
      this.outlineColor = 0;
      this.outlineOpacity = 1;
      this.outlineBlur = 0;
      this.outlineOffsetX = 0;
      this.outlineOffsetY = 0;
      this.strokeWidth = 0;
      this.strokeColor = defaultStrokeColor;
      this.strokeOpacity = 1;
      this.fillOpacity = 1;
      this.depthOffset = 0;
      this.clipRect = null;
      this.orientation = defaultOrient;
      this.glyphGeometryDetail = 1;
      this.sdfGlyphSize = null;
      this.gpuAccelerateSDF = true;
      this.debugSDF = false;
    }
    sync(callback) {
      if (this._needsSync) {
        this._needsSync = false;
        if (this._isSyncing) {
          (this._queuedSyncs || (this._queuedSyncs = [])).push(callback);
        } else {
          this._isSyncing = true;
          this.dispatchEvent(syncStartEvent);
          getTextRenderInfo({
            text: this.text,
            font: this.font,
            fontSize: this.fontSize || 0.1,
            letterSpacing: this.letterSpacing || 0,
            lineHeight: this.lineHeight || "normal",
            maxWidth: this.maxWidth,
            direction: this.direction || "auto",
            textAlign: this.textAlign,
            textIndent: this.textIndent,
            whiteSpace: this.whiteSpace,
            overflowWrap: this.overflowWrap,
            anchorX: this.anchorX,
            anchorY: this.anchorY,
            colorRanges: this.colorRanges,
            includeCaretPositions: true,
            sdfGlyphSize: this.sdfGlyphSize,
            gpuAccelerateSDF: this.gpuAccelerateSDF
          }, (textRenderInfo) => {
            this._isSyncing = false;
            this._textRenderInfo = textRenderInfo;
            this.geometry.updateGlyphs(textRenderInfo.glyphBounds, textRenderInfo.glyphAtlasIndices, textRenderInfo.blockBounds, textRenderInfo.chunkedBounds, textRenderInfo.glyphColors);
            const queued = this._queuedSyncs;
            if (queued) {
              this._queuedSyncs = null;
              this._needsSync = true;
              this.sync(() => {
                queued.forEach((fn) => fn && fn());
              });
            }
            this.dispatchEvent(syncCompleteEvent);
            if (callback) {
              callback();
            }
          });
        }
      }
    }
    onBeforeRender(renderer, scene, camera, geometry, material, group) {
      this.sync();
      if (material.isTroikaTextMaterial) {
        this._prepareForRender(material);
      }
      material._hadOwnSide = material.hasOwnProperty("side");
      this.geometry.setSide(material._actualSide = material.side);
      material.side = FrontSide;
    }
    onAfterRender(renderer, scene, camera, geometry, material, group) {
      if (material._hadOwnSide) {
        material.side = material._actualSide;
      } else {
        delete material.side;
      }
    }
    dispose() {
      this.geometry.dispose();
    }
    get textRenderInfo() {
      return this._textRenderInfo || null;
    }
    get material() {
      let derivedMaterial = this._derivedMaterial;
      const baseMaterial = this._baseMaterial || this._defaultMaterial || (this._defaultMaterial = defaultMaterial.clone());
      if (!derivedMaterial || derivedMaterial.baseMaterial !== baseMaterial) {
        derivedMaterial = this._derivedMaterial = createTextDerivedMaterial(baseMaterial);
        baseMaterial.addEventListener("dispose", function onDispose() {
          baseMaterial.removeEventListener("dispose", onDispose);
          derivedMaterial.dispose();
        });
      }
      if (this.outlineWidth || this.outlineBlur || this.outlineOffsetX || this.outlineOffsetY) {
        let outlineMaterial = derivedMaterial._outlineMtl;
        if (!outlineMaterial) {
          outlineMaterial = derivedMaterial._outlineMtl = Object.create(derivedMaterial, {
            id: { value: derivedMaterial.id + 0.1 }
          });
          outlineMaterial.isTextOutlineMaterial = true;
          outlineMaterial.depthWrite = false;
          outlineMaterial.map = null;
          derivedMaterial.addEventListener("dispose", function onDispose() {
            derivedMaterial.removeEventListener("dispose", onDispose);
            outlineMaterial.dispose();
          });
        }
        return [
          outlineMaterial,
          derivedMaterial
        ];
      } else {
        return derivedMaterial;
      }
    }
    set material(baseMaterial) {
      if (baseMaterial && baseMaterial.isTroikaTextMaterial) {
        this._derivedMaterial = baseMaterial;
        this._baseMaterial = baseMaterial.baseMaterial;
      } else {
        this._baseMaterial = baseMaterial;
      }
    }
    get glyphGeometryDetail() {
      return this.geometry.detail;
    }
    set glyphGeometryDetail(detail) {
      this.geometry.detail = detail;
    }
    get curveRadius() {
      return this.geometry.curveRadius;
    }
    set curveRadius(r3) {
      this.geometry.curveRadius = r3;
    }
    get customDepthMaterial() {
      return first(this.material).getDepthMaterial();
    }
    get customDistanceMaterial() {
      return first(this.material).getDistanceMaterial();
    }
    _prepareForRender(material) {
      const isOutline = material.isTextOutlineMaterial;
      const uniforms = material.uniforms;
      const textInfo = this.textRenderInfo;
      if (textInfo) {
        const { sdfTexture, blockBounds } = textInfo;
        uniforms.uTroikaSDFTexture.value = sdfTexture;
        uniforms.uTroikaSDFTextureSize.value.set(sdfTexture.image.width, sdfTexture.image.height);
        uniforms.uTroikaSDFGlyphSize.value = textInfo.sdfGlyphSize;
        uniforms.uTroikaSDFExponent.value = textInfo.sdfExponent;
        uniforms.uTroikaTotalBounds.value.fromArray(blockBounds);
        uniforms.uTroikaUseGlyphColors.value = !isOutline && !!textInfo.glyphColors;
        let distanceOffset = 0;
        let blurRadius = 0;
        let strokeWidth = 0;
        let fillOpacity;
        let strokeOpacity;
        let strokeColor;
        let offsetX = 0;
        let offsetY = 0;
        if (isOutline) {
          let { outlineWidth, outlineOffsetX, outlineOffsetY, outlineBlur, outlineOpacity } = this;
          distanceOffset = this._parsePercent(outlineWidth) || 0;
          blurRadius = Math.max(0, this._parsePercent(outlineBlur) || 0);
          fillOpacity = outlineOpacity;
          offsetX = this._parsePercent(outlineOffsetX) || 0;
          offsetY = this._parsePercent(outlineOffsetY) || 0;
        } else {
          strokeWidth = Math.max(0, this._parsePercent(this.strokeWidth) || 0);
          if (strokeWidth) {
            strokeColor = this.strokeColor;
            uniforms.uTroikaStrokeColor.value.set(strokeColor == null ? defaultStrokeColor : strokeColor);
            strokeOpacity = this.strokeOpacity;
            if (strokeOpacity == null)
              strokeOpacity = 1;
          }
          fillOpacity = this.fillOpacity;
        }
        uniforms.uTroikaDistanceOffset.value = distanceOffset;
        uniforms.uTroikaPositionOffset.value.set(offsetX, offsetY);
        uniforms.uTroikaBlurRadius.value = blurRadius;
        uniforms.uTroikaStrokeWidth.value = strokeWidth;
        uniforms.uTroikaStrokeOpacity.value = strokeOpacity;
        uniforms.uTroikaFillOpacity.value = fillOpacity == null ? 1 : fillOpacity;
        uniforms.uTroikaCurveRadius.value = this.curveRadius || 0;
        let clipRect = this.clipRect;
        if (clipRect && Array.isArray(clipRect) && clipRect.length === 4) {
          uniforms.uTroikaClipRect.value.fromArray(clipRect);
        } else {
          const pad = (this.fontSize || 0.1) * 100;
          uniforms.uTroikaClipRect.value.set(blockBounds[0] - pad, blockBounds[1] - pad, blockBounds[2] + pad, blockBounds[3] + pad);
        }
        this.geometry.applyClipRect(uniforms.uTroikaClipRect.value);
      }
      uniforms.uTroikaSDFDebug.value = !!this.debugSDF;
      material.polygonOffset = !!this.depthOffset;
      material.polygonOffsetFactor = material.polygonOffsetUnits = this.depthOffset || 0;
      const color = isOutline ? this.outlineColor || 0 : this.color;
      if (color == null) {
        delete material.color;
      } else {
        const colorObj = material.hasOwnProperty("color") ? material.color : material.color = new Color();
        if (color !== colorObj._input || typeof color === "object") {
          colorObj.set(colorObj._input = color);
        }
      }
      let orient = this.orientation || defaultOrient;
      if (orient !== material._orientation) {
        let rotMat = uniforms.uTroikaOrient.value;
        orient = orient.replace(/[^-+xyz]/g, "");
        let match = orient !== defaultOrient && orient.match(/^([-+])([xyz])([-+])([xyz])$/);
        if (match) {
          let [, hSign, hAxis, vSign, vAxis] = match;
          tempVec3a.set(0, 0, 0)[hAxis] = hSign === "-" ? 1 : -1;
          tempVec3b.set(0, 0, 0)[vAxis] = vSign === "-" ? -1 : 1;
          tempMat4.lookAt(origin, tempVec3a.cross(tempVec3b), tempVec3b);
          rotMat.setFromMatrix4(tempMat4);
        } else {
          rotMat.identity();
        }
        material._orientation = orient;
      }
    }
    _parsePercent(value) {
      if (typeof value === "string") {
        let match = value.match(/^(-?[\d.]+)%$/);
        let pct = match ? parseFloat(match[1]) : NaN;
        value = (isNaN(pct) ? 0 : pct / 100) * this.fontSize;
      }
      return value;
    }
    localPositionToTextCoords(position2, target2 = new Vector2()) {
      target2.copy(position2);
      const r3 = this.curveRadius;
      if (r3) {
        target2.x = Math.atan2(position2.x, Math.abs(r3) - Math.abs(position2.z)) * Math.abs(r3);
      }
      return target2;
    }
    worldPositionToTextCoords(position2, target2 = new Vector2()) {
      tempVec3a.copy(position2);
      return this.localPositionToTextCoords(this.worldToLocal(tempVec3a), target2);
    }
    raycast(raycaster, intersects) {
      const { textRenderInfo, curveRadius } = this;
      if (textRenderInfo) {
        const bounds = textRenderInfo.blockBounds;
        const raycastMesh = curveRadius ? getCurvedRaycastMesh() : getFlatRaycastMesh();
        const geom = raycastMesh.geometry;
        const { position: position2, uv } = geom.attributes;
        for (let i5 = 0; i5 < uv.count; i5++) {
          let x = bounds[0] + uv.getX(i5) * (bounds[2] - bounds[0]);
          const y = bounds[1] + uv.getY(i5) * (bounds[3] - bounds[1]);
          let z = 0;
          if (curveRadius) {
            z = curveRadius - Math.cos(x / curveRadius) * curveRadius;
            x = Math.sin(x / curveRadius) * curveRadius;
          }
          position2.setXYZ(i5, x, y, z);
        }
        geom.boundingSphere = this.geometry.boundingSphere;
        geom.boundingBox = this.geometry.boundingBox;
        raycastMesh.matrixWorld = this.matrixWorld;
        raycastMesh.material.side = this.material.side;
        tempArray.length = 0;
        raycastMesh.raycast(raycaster, tempArray);
        for (let i5 = 0; i5 < tempArray.length; i5++) {
          tempArray[i5].object = this;
          intersects.push(tempArray[i5]);
        }
      }
    }
    copy(source) {
      const geom = this.geometry;
      super.copy(source);
      this.geometry = geom;
      COPYABLE_PROPS.forEach((prop) => {
        this[prop] = source[prop];
      });
      return this;
    }
    clone() {
      return new this.constructor().copy(this);
    }
  }
  SYNCABLE_PROPS.forEach((prop) => {
    const privateKey = "_private_" + prop;
    Object.defineProperty(Text3.prototype, prop, {
      get() {
        return this[privateKey];
      },
      set(value) {
        if (value !== this[privateKey]) {
          this[privateKey] = value;
          this._needsSync = true;
        }
      }
    });
  });
  let deprMsgShown = false;
  Object.defineProperty(Text3.prototype, "anchor", {
    get() {
      return this._deprecated_anchor;
    },
    set(val) {
      this._deprecated_anchor = val;
      if (!deprMsgShown) {
        console.warn("TextMesh: `anchor` has been deprecated; use `anchorX` and `anchorY` instead.");
        deprMsgShown = true;
      }
      if (Array.isArray(val)) {
        this.anchorX = `${(+val[0] || 0) * 100}%`;
        this.anchorY = `${(+val[1] || 0) * 100}%`;
      } else {
        this.anchorX = this.anchorY = 0;
      }
    }
  });
  return Text3;
})();

// node_modules/@react-three/drei/core/Text.js
init_react_three_fiber_esm();
init_dist();
var Text2 = React14.forwardRef((_a, ref) => {
  var _b = _a, {
    anchorX = "center",
    anchorY = "middle",
    font,
    children,
    characters,
    onSync
  } = _b, props = __objRest(_b, [
    "anchorX",
    "anchorY",
    "font",
    "children",
    "characters",
    "onSync"
  ]);
  const invalidate = useThree(({
    invalidate: invalidate2
  }) => invalidate2);
  const [troikaMesh] = React14.useState(() => new Text());
  const [nodes, text] = React14.useMemo(() => {
    const n2 = [];
    let t2 = "";
    React14.Children.forEach(children, (child) => {
      if (typeof child === "string" || typeof child === "number") {
        t2 += child;
      } else {
        n2.push(child);
      }
    });
    return [n2, t2];
  }, [children]);
  suspend(() => new Promise((res) => preloadFont({
    font,
    characters
  }, res)), ["troika-text", font, characters]);
  React14.useLayoutEffect(() => void troikaMesh.sync(() => {
    invalidate();
    if (onSync)
      onSync(troikaMesh);
  }));
  React14.useEffect(() => {
    return () => troikaMesh.dispose();
  }, [troikaMesh]);
  return React14.createElement("primitive", _extends({
    object: troikaMesh,
    ref,
    font,
    text,
    anchorX,
    anchorY
  }, props), nodes);
});

// node_modules/@react-three/drei/core/Text3D.js
init_extends();
var React15 = __toESM(require_react());
var import_react3 = __toESM(require_react());
init_react_three_fiber_esm();
init_dist();
var types = ["string", "number"];
var getTextFromChildren = (children) => {
  let label = "";
  React15.Children.map(children, (child) => {
    if (types.includes(typeof child)) {
      label += child + "";
    }
  });
  return label;
};
var Text3DBase = React15.forwardRef((_a, ref) => {
  var _b = _a, {
    font,
    loader,
    size = 1,
    height = 0.2,
    bevelThickness = 0.1,
    bevelSize = 0.01,
    bevelEnabled = false,
    bevelOffset = 0,
    curveSegments = 8,
    children
  } = _b, props = __objRest(_b, [
    "font",
    "loader",
    "size",
    "height",
    "bevelThickness",
    "bevelSize",
    "bevelEnabled",
    "bevelOffset",
    "curveSegments",
    "children"
  ]);
  React15.useMemo(() => {
    extend({
      RenamedTextGeometry: TextGeometry
    });
  }, []);
  const _font = React15.useMemo(() => loader.parse(font), [font]);
  const opts = (0, import_react3.useMemo)(() => {
    return {
      font: _font,
      size,
      height,
      bevelThickness,
      bevelSize,
      bevelEnabled,
      bevelOffset,
      curveSegments
    };
  }, [_font, size, height, bevelThickness, bevelSize, bevelEnabled, bevelOffset, curveSegments]);
  const txt = (0, import_react3.useMemo)(() => getTextFromChildren(children), [children]);
  const args = React15.useMemo(() => [txt, opts], [txt, opts]);
  return React15.createElement("mesh", _extends({}, props, {
    ref
  }), React15.createElement("renamedTextGeometry", {
    args
  }), children);
});
var Text3DSuspend = React15.forwardRef((_a, ref) => {
  var _b = _a, {
    font,
    loader
  } = _b, props = __objRest(_b, [
    "font",
    "loader"
  ]);
  const _font = suspend(async () => {
    const json = await (await fetch(font)).json();
    return json;
  }, [font]);
  return React15.createElement(Text3DBase, _extends({}, props, {
    ref,
    font: _font,
    loader
  }));
});
var Text3D = React15.forwardRef((props, ref) => {
  const loader = React15.useMemo(() => new FontLoader(), []);
  if (typeof props.font === "string") {
    return React15.createElement(Text3DSuspend, _extends({}, props, {
      ref,
      loader
    }));
  } else {
    return React15.createElement(Text3DBase, _extends({}, props, {
      ref,
      loader
    }));
  }
});

// node_modules/@react-three/drei/core/Effects.js
init_extends();
var React16 = __toESM(require_react());
init_three_module();
init_react_three_fiber_esm();
var isWebGL2Available = () => {
  try {
    var canvas = document.createElement("canvas");
    return !!(window.WebGL2RenderingContext && canvas.getContext("webgl2"));
  } catch (e3) {
    return false;
  }
};
var Effects = React16.forwardRef((_a, ref) => {
  var _b = _a, {
    children,
    multisamping = 8,
    renderIndex = 1,
    disableRender,
    disableGamma,
    disableRenderPass,
    depthBuffer = true,
    stencilBuffer = false,
    anisotropy = 1,
    encoding,
    type
  } = _b, props = __objRest(_b, [
    "children",
    "multisamping",
    "renderIndex",
    "disableRender",
    "disableGamma",
    "disableRenderPass",
    "depthBuffer",
    "stencilBuffer",
    "anisotropy",
    "encoding",
    "type"
  ]);
  React16.useMemo(() => extend({
    EffectComposer,
    RenderPass,
    ShaderPass
  }), []);
  const composer = React16.useRef();
  const {
    scene,
    camera,
    gl,
    size,
    viewport
  } = useThree();
  const [target2] = React16.useState(() => {
    const t2 = new WebGLRenderTarget(size.width, size.height, {
      type: type || HalfFloatType,
      format: RGBAFormat,
      encoding: encoding || gl.outputEncoding,
      depthBuffer,
      stencilBuffer,
      anisotropy
    });
    t2.samples = multisamping;
    return t2;
  });
  React16.useEffect(() => {
    var _composer$current, _composer$current2;
    (_composer$current = composer.current) == null ? void 0 : _composer$current.setSize(size.width, size.height);
    (_composer$current2 = composer.current) == null ? void 0 : _composer$current2.setPixelRatio(viewport.dpr);
  }, [gl, size, viewport.dpr]);
  useFrame(() => {
    var _composer$current3;
    if (!disableRender)
      (_composer$current3 = composer.current) == null ? void 0 : _composer$current3.render();
  }, renderIndex);
  const passes = [];
  if (!disableRenderPass)
    passes.push(React16.createElement("renderPass", {
      key: "renderpass",
      attach: `passes-${passes.length}`,
      args: [scene, camera]
    }));
  if (!disableGamma)
    passes.push(React16.createElement("shaderPass", {
      attach: `passes-${passes.length}`,
      key: "gammapass",
      args: [GammaCorrectionShader]
    }));
  React16.Children.forEach(children, (el) => {
    el && passes.push(React16.cloneElement(el, {
      key: passes.length,
      attach: `passes-${passes.length}`
    }));
  });
  return React16.createElement("effectComposer", _extends({
    ref: react_merge_refs_esm_default([ref, composer]),
    args: [gl, target2]
  }, props), passes);
});

// node_modules/@react-three/drei/core/GradientTexture.js
init_extends();
init_three_module();
var React17 = __toESM(require_react());
init_react_three_fiber_esm();
function GradientTexture(_a) {
  var _b = _a, {
    stops,
    colors: colors2,
    size = 1024
  } = _b, props = __objRest(_b, [
    "stops",
    "colors",
    "size"
  ]);
  const gl = useThree((state) => state.gl);
  const texture = React17.useMemo(() => {
    const canvas = document.createElement("canvas");
    const context7 = canvas.getContext("2d");
    canvas.width = 16;
    canvas.height = size;
    const gradient = context7.createLinearGradient(0, 0, 0, size);
    let i5 = stops.length;
    while (i5--) {
      gradient.addColorStop(stops[i5], colors2[i5]);
    }
    context7.fillStyle = gradient;
    context7.fillRect(0, 0, 16, size);
    const texture2 = new Texture(canvas);
    texture2.needsUpdate = true;
    return texture2;
  }, [stops]);
  React17.useEffect(() => () => void texture.dispose(), [texture]);
  return React17.createElement("primitive", _extends({
    object: texture,
    attach: "map",
    encoding: gl.outputEncoding
  }, props));
}

// node_modules/@react-three/drei/core/Image.js
init_extends();
var React18 = __toESM(require_react());
init_three_module();
init_react_three_fiber_esm();

// node_modules/@react-three/drei/core/shaderMaterial.js
init_three_module();
function shaderMaterial(uniforms, vertexShader2, fragmentShader2, onInit) {
  const material = class material extends ShaderMaterial {
    constructor() {
      const entries = Object.entries(uniforms);
      super({
        uniforms: entries.reduce((acc, [name, value]) => {
          const uniform = UniformsUtils.clone({
            [name]: {
              value
            }
          });
          return __spreadValues(__spreadValues({}, acc), uniform);
        }, {}),
        vertexShader: vertexShader2,
        fragmentShader: fragmentShader2
      });
      this.key = "";
      entries.forEach(([name]) => Object.defineProperty(this, name, {
        get: () => this.uniforms[name].value,
        set: (v4) => this.uniforms[name].value = v4
      }));
      if (onInit)
        onInit(this);
    }
  };
  material.key = MathUtils.generateUUID();
  return material;
}

// node_modules/@react-three/drei/core/useTexture.js
init_three_module();
init_react_three_fiber_esm();
var import_react4 = __toESM(require_react());
var IsObject = (url) => url === Object(url) && !Array.isArray(url) && typeof url !== "function";
function useTexture(input, onLoad) {
  const gl = useThree((state) => state.gl);
  const textures = useLoader(TextureLoader, IsObject(input) ? Object.values(input) : input);
  (0, import_react4.useLayoutEffect)(() => {
    onLoad == null ? void 0 : onLoad(textures);
  }, [onLoad]);
  (0, import_react4.useEffect)(() => {
    const array = Array.isArray(textures) ? textures : [textures];
    array.forEach(gl.initTexture);
  }, [gl, textures]);
  if (IsObject(input)) {
    const keys = Object.keys(input);
    const keyed = {};
    keys.forEach((key) => Object.assign(keyed, {
      [key]: textures[keys.indexOf(key)]
    }));
    return keyed;
  } else {
    return textures;
  }
}
useTexture.preload = (url) => useLoader.preload(TextureLoader, url);
useTexture.clear = (input) => useLoader.clear(TextureLoader, input);

// node_modules/@react-three/drei/core/Image.js
var ImageMaterialImpl = shaderMaterial({
  color: new Color("white"),
  scale: [1, 1],
  imageBounds: [1, 1],
  map: null,
  zoom: 1,
  grayscale: 0,
  opacity: 1
}, `
  varying vec2 vUv;
  void main() {
    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);
    vUv = uv;
  }
`, `
  // mostly from https://gist.github.com/statico/df64c5d167362ecf7b34fca0b1459a44
  varying vec2 vUv;
  uniform vec2 scale;
  uniform vec2 imageBounds;
  uniform vec3 color;
  uniform sampler2D map;
  uniform float zoom;
  uniform float grayscale;
  uniform float opacity;
  const vec3 luma = vec3(.299, 0.587, 0.114);
  vec4 toGrayscale(vec4 color, float intensity) {
    return vec4(mix(color.rgb, vec3(dot(color.rgb, luma)), intensity), color.a);
  }
  vec2 aspect(vec2 size) {
    return size / min(size.x, size.y);
  }
  void main() {
    vec2 s = aspect(scale);
    vec2 i = aspect(imageBounds);
    float rs = s.x / s.y;
    float ri = i.x / i.y;
    vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);
    vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;
    vec2 uv = vUv * s / new + offset;
    vec2 zUv = (uv - vec2(0.5, 0.5)) / zoom + vec2(0.5, 0.5);
    gl_FragColor = toGrayscale(texture2D(map, zUv) * vec4(color, opacity), grayscale);
    
    #include <tonemapping_fragment>
    #include <encodings_fragment>
  }
`);
var ImageBase = React18.forwardRef((_a, ref) => {
  var _b = _a, {
    children,
    color,
    segments = 1,
    scale: scale2 = 1,
    zoom = 1,
    grayscale = 0,
    opacity = 1,
    texture,
    toneMapped,
    transparent
  } = _b, props = __objRest(_b, [
    "children",
    "color",
    "segments",
    "scale",
    "zoom",
    "grayscale",
    "opacity",
    "texture",
    "toneMapped",
    "transparent"
  ]);
  extend({
    ImageMaterial: ImageMaterialImpl
  });
  const gl = useThree((state) => state.gl);
  const planeBounds = Array.isArray(scale2) ? [scale2[0], scale2[1]] : [scale2, scale2];
  const imageBounds = [texture.image.width, texture.image.height];
  return React18.createElement("mesh", _extends({
    ref,
    scale: scale2
  }, props), React18.createElement("planeGeometry", {
    args: [1, 1, segments, segments]
  }), React18.createElement("imageMaterial", {
    color,
    map: texture,
    "map-encoding": gl.outputEncoding,
    zoom,
    grayscale,
    opacity,
    scale: planeBounds,
    imageBounds,
    toneMapped,
    transparent
  }), children);
});
var ImageWithUrl = React18.forwardRef((_a, ref) => {
  var _b = _a, {
    url
  } = _b, props = __objRest(_b, [
    "url"
  ]);
  const texture = useTexture(url);
  return React18.createElement(ImageBase, _extends({}, props, {
    texture,
    ref
  }));
});
var ImageWithTexture = React18.forwardRef((_a, ref) => {
  var _b = _a, {
    url: _url
  } = _b, props = __objRest(_b, [
    "url"
  ]);
  return React18.createElement(ImageBase, _extends({}, props, {
    ref
  }));
});
var Image = React18.forwardRef((props, ref) => {
  if (props.url)
    return React18.createElement(ImageWithUrl, _extends({}, props, {
      ref
    }));
  else if (props.texture)
    return React18.createElement(ImageWithTexture, _extends({}, props, {
      ref
    }));
  else
    throw new Error("<Image /> requires a url or texture");
});

// node_modules/@react-three/drei/core/Edges.js
init_extends();
var React19 = __toESM(require_react());
init_three_module();
function Edges(_a) {
  var _b = _a, {
    userData,
    children,
    geometry,
    threshold = 15,
    color = "black"
  } = _b, props = __objRest(_b, [
    "userData",
    "children",
    "geometry",
    "threshold",
    "color"
  ]);
  const ref = React19.useRef(null);
  React19.useLayoutEffect(() => {
    const parent = ref.current.parent;
    if (parent) {
      const geom = geometry || parent.geometry;
      if (geom !== ref.current.userData.currentGeom || threshold !== ref.current.userData.currentThreshold) {
        ref.current.userData.currentGeom = geom;
        ref.current.userData.currentThreshold = threshold;
        ref.current.geometry = new EdgesGeometry(geom, threshold);
      }
    }
  });
  return React19.createElement("lineSegments", _extends({
    ref,
    raycast: () => null
  }, props), children ? children : React19.createElement("lineBasicMaterial", {
    color
  }));
}

// node_modules/@react-three/drei/core/Trail.js
init_react_three_fiber_esm();
var React20 = __toESM(require_react());
init_three_module();

// node_modules/meshline/dist/meshline.es.js
init_three_module();
function e(e3, i5) {
  const s3 = new Matrix4(), r3 = new Ray(), a2 = new Sphere(), o2 = new Vector3(), n2 = this.geometry;
  if (a2.copy(n2.boundingSphere), a2.applyMatrix4(this.matrixWorld), e3.ray.intersectSphere(a2, o2) === false)
    return;
  s3.copy(this.matrixWorld).invert(), r3.copy(e3.ray).applyMatrix4(s3);
  const u = new Vector3(), h = new Vector3(), l2 = new Vector3(), p = this instanceof LineSegments ? 2 : 1, c2 = n2.index, f2 = n2.attributes;
  if (c2 !== null) {
    const t2 = c2.array, s4 = f2.position.array, a3 = f2.width.array;
    for (let n3 = 0, c3 = t2.length - 1; n3 < c3; n3 += p) {
      const p2 = t2[n3], f3 = t2[n3 + 1];
      u.fromArray(s4, 3 * p2), h.fromArray(s4, 3 * f3);
      const d2 = a3[Math.floor(n3 / 3)] != null ? a3[Math.floor(n3 / 3)] : 1, v4 = e3.params.Line.threshold + this.material.lineWidth * d2 / 2, m = v4 * v4;
      if (r3.distanceSqToSegment(u, h, o2, l2) > m)
        continue;
      o2.applyMatrix4(this.matrixWorld);
      const y = e3.ray.origin.distanceTo(o2);
      y < e3.near || y > e3.far || (i5.push({ distance: y, point: l2.clone().applyMatrix4(this.matrixWorld), index: n3, face: null, faceIndex: null, object: this }), n3 = c3);
    }
  }
}
function i(t2, e3, i5, s3, r3) {
  let a2;
  if (t2 = t2.subarray || t2.slice ? t2 : t2.buffer, i5 = i5.subarray || i5.slice ? i5 : i5.buffer, t2 = e3 ? t2.subarray ? t2.subarray(e3, r3 && e3 + r3) : t2.slice(e3, r3 && e3 + r3) : t2, i5.set)
    i5.set(t2, s3);
  else
    for (a2 = 0; a2 < t2.length; a2++)
      i5[a2 + s3] = t2[a2];
  return i5;
}
var s = class extends BufferGeometry {
  constructor() {
    super(), this.type = "MeshLine", this.isMeshLine = true, this.positions = [], this.raycast = e, this.previous = [], this.next = [], this.side = [], this.width = [], this.indices_array = [], this.uvs = [], this.counters = [], this._points = [], this._geom = null, this.widthCallback = null, this.matrixWorld = new Matrix4(), Object.defineProperties(this, { geometry: { enumerable: true, get() {
      return this;
    } }, geom: { enumerable: true, get() {
      return this._geom;
    }, set(t2) {
      this.setGeometry(t2, this.widthCallback);
    } }, points: { enumerable: true, get() {
      return this._points;
    }, set(t2) {
      this.setPoints(t2, this.widthCallback);
    } } });
  }
  setMatrixWorld(t2) {
    this.matrixWorld = t2;
  }
  setGeometry(e3, i5) {
    this._geometry = e3, e3 instanceof BufferGeometry ? this.setPoints(e3.getAttribute("position").array, i5) : this.setPoints(e3, i5);
  }
  setPoints(e3, i5) {
    if (e3 instanceof Float32Array || e3 instanceof Array) {
      if (this._points = e3, this.widthCallback = i5, this.positions = [], this.counters = [], e3.length && e3[0] instanceof Vector3)
        for (var s3 = 0; s3 < e3.length; s3++) {
          const t2 = e3[s3];
          var r3 = s3 / e3.length;
          this.positions.push(t2.x, t2.y, t2.z), this.positions.push(t2.x, t2.y, t2.z), this.counters.push(r3), this.counters.push(r3);
        }
      else
        for (s3 = 0; s3 < e3.length; s3 += 3) {
          r3 = s3 / e3.length;
          this.positions.push(e3[s3], e3[s3 + 1], e3[s3 + 2]), this.positions.push(e3[s3], e3[s3 + 1], e3[s3 + 2]), this.counters.push(r3), this.counters.push(r3);
        }
      this.process();
    } else
      console.error("ERROR: The BufferArray of points is not instancied correctly.");
  }
  compareV3(t2, e3) {
    const i5 = 6 * t2, s3 = 6 * e3;
    return this.positions[i5] === this.positions[s3] && this.positions[i5 + 1] === this.positions[s3 + 1] && this.positions[i5 + 2] === this.positions[s3 + 2];
  }
  copyV3(t2) {
    const e3 = 6 * t2;
    return [this.positions[e3], this.positions[e3 + 1], this.positions[e3 + 2]];
  }
  process() {
    const e3 = this.positions.length / 6;
    let i5, s3;
    this.previous = [], this.next = [], this.side = [], this.width = [], this.indices_array = [], this.uvs = [], s3 = this.compareV3(0, e3 - 1) ? this.copyV3(e3 - 2) : this.copyV3(0), this.previous.push(s3[0], s3[1], s3[2]), this.previous.push(s3[0], s3[1], s3[2]);
    for (let t2 = 0; t2 < e3; t2++) {
      if (this.side.push(1), this.side.push(-1), i5 = this.widthCallback ? this.widthCallback(t2 / (e3 - 1)) : 1, this.width.push(i5), this.width.push(i5), this.uvs.push(t2 / (e3 - 1), 0), this.uvs.push(t2 / (e3 - 1), 1), t2 < e3 - 1) {
        s3 = this.copyV3(t2), this.previous.push(s3[0], s3[1], s3[2]), this.previous.push(s3[0], s3[1], s3[2]);
        const e4 = 2 * t2;
        this.indices_array.push(e4, e4 + 1, e4 + 2), this.indices_array.push(e4 + 2, e4 + 1, e4 + 3);
      }
      t2 > 0 && (s3 = this.copyV3(t2), this.next.push(s3[0], s3[1], s3[2]), this.next.push(s3[0], s3[1], s3[2]));
    }
    s3 = this.compareV3(e3 - 1, 0) ? this.copyV3(1) : this.copyV3(e3 - 1), this.next.push(s3[0], s3[1], s3[2]), this.next.push(s3[0], s3[1], s3[2]), this._attributes && this._attributes.position.count === this.positions.length ? (this._attributes.position.copyArray(new Float32Array(this.positions)), this._attributes.position.needsUpdate = true, this._attributes.previous.copyArray(new Float32Array(this.previous)), this._attributes.previous.needsUpdate = true, this._attributes.next.copyArray(new Float32Array(this.next)), this._attributes.next.needsUpdate = true, this._attributes.side.copyArray(new Float32Array(this.side)), this._attributes.side.needsUpdate = true, this._attributes.width.copyArray(new Float32Array(this.width)), this._attributes.width.needsUpdate = true, this._attributes.uv.copyArray(new Float32Array(this.uvs)), this._attributes.uv.needsUpdate = true, this._attributes.index.copyArray(new Uint16Array(this.indices_array)), this._attributes.index.needsUpdate = true) : this._attributes = { position: new BufferAttribute(new Float32Array(this.positions), 3), previous: new BufferAttribute(new Float32Array(this.previous), 3), next: new BufferAttribute(new Float32Array(this.next), 3), side: new BufferAttribute(new Float32Array(this.side), 1), width: new BufferAttribute(new Float32Array(this.width), 1), uv: new BufferAttribute(new Float32Array(this.uvs), 2), index: new BufferAttribute(new Uint16Array(this.indices_array), 1), counters: new BufferAttribute(new Float32Array(this.counters), 1) }, this.setAttribute("position", this._attributes.position), this.setAttribute("previous", this._attributes.previous), this.setAttribute("next", this._attributes.next), this.setAttribute("side", this._attributes.side), this.setAttribute("width", this._attributes.width), this.setAttribute("uv", this._attributes.uv), this.setAttribute("counters", this._attributes.counters), this.setIndex(this._attributes.index), this.computeBoundingSphere(), this.computeBoundingBox();
  }
  advance({ x: t2, y: e3, z: s3 }) {
    const r3 = this._attributes.position.array, a2 = this._attributes.previous.array, o2 = this._attributes.next.array, n2 = r3.length;
    i(r3, 0, a2, 0, n2), i(r3, 6, r3, 0, n2 - 6), r3[n2 - 6] = t2, r3[n2 - 5] = e3, r3[n2 - 4] = s3, r3[n2 - 3] = t2, r3[n2 - 2] = e3, r3[n2 - 1] = s3, i(r3, 6, o2, 0, n2 - 6), o2[n2 - 6] = t2, o2[n2 - 5] = e3, o2[n2 - 4] = s3, o2[n2 - 3] = t2, o2[n2 - 2] = e3, o2[n2 - 1] = s3, this._attributes.position.needsUpdate = true, this._attributes.previous.needsUpdate = true, this._attributes.next.needsUpdate = true;
  }
};
ShaderChunk.meshline_vert = ["", "#include <common>", "", ShaderChunk.logdepthbuf_pars_vertex, ShaderChunk.fog_pars_vertex, "", "attribute vec3 previous;", "attribute vec3 next;", "attribute float side;", "attribute float width;", "attribute float counters;", "", "uniform vec2 resolution;", "uniform float lineWidth;", "uniform vec3 color;", "uniform float opacity;", "uniform float sizeAttenuation;", "", "varying vec2 vUV;", "varying vec4 vColor;", "varying float vCounters;", "", "vec2 fix( vec4 i, float aspect ) {", "", "    vec2 res = i.xy / i.w;", "    res.x *= aspect;", "	 vCounters = counters;", "    return res;", "", "}", "", "void main() {", "", "    float aspect = resolution.x / resolution.y;", "", "    vColor = vec4( color, opacity );", "    vUV = uv;", "", "    mat4 m = projectionMatrix * modelViewMatrix;", "    vec4 finalPosition = m * vec4( position, 1.0 );", "    vec4 prevPos = m * vec4( previous, 1.0 );", "    vec4 nextPos = m * vec4( next, 1.0 );", "", "    vec2 currentP = fix( finalPosition, aspect );", "    vec2 prevP = fix( prevPos, aspect );", "    vec2 nextP = fix( nextPos, aspect );", "", "    float w = lineWidth * width;", "", "    vec2 dir;", "    if( nextP == currentP ) dir = normalize( currentP - prevP );", "    else if( prevP == currentP ) dir = normalize( nextP - currentP );", "    else {", "        vec2 dir1 = normalize( currentP - prevP );", "        vec2 dir2 = normalize( nextP - currentP );", "        dir = normalize( dir1 + dir2 );", "", "        vec2 perp = vec2( -dir1.y, dir1.x );", "        vec2 miter = vec2( -dir.y, dir.x );", "        //w = clamp( w / dot( miter, perp ), 0., 4. * lineWidth * width );", "", "    }", "", "    //vec2 normal = ( cross( vec3( dir, 0. ), vec3( 0., 0., 1. ) ) ).xy;", "    vec4 normal = vec4( -dir.y, dir.x, 0., 1. );", "    normal.xy *= .5 * w;", "    normal *= projectionMatrix;", "    if( sizeAttenuation == 0. ) {", "        normal.xy *= finalPosition.w;", "        normal.xy /= ( vec4( resolution, 0., 1. ) * projectionMatrix ).xy;", "    }", "", "    finalPosition.xy += normal.xy * side;", "", "    gl_Position = finalPosition;", "", ShaderChunk.logdepthbuf_vertex, ShaderChunk.fog_vertex && "    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );", ShaderChunk.fog_vertex, "}"].join("\n"), ShaderChunk.meshline_frag = ["", ShaderChunk.fog_pars_fragment, ShaderChunk.logdepthbuf_pars_fragment, "", "uniform sampler2D map;", "uniform sampler2D alphaMap;", "uniform float useMap;", "uniform float useAlphaMap;", "uniform float useDash;", "uniform float dashArray;", "uniform float dashOffset;", "uniform float dashRatio;", "uniform float visibility;", "uniform float alphaTest;", "uniform vec2 repeat;", "", "varying vec2 vUV;", "varying vec4 vColor;", "varying float vCounters;", "", "void main() {", "", ShaderChunk.logdepthbuf_fragment, "", "    vec4 c = vColor;", "    if( useMap == 1. ) c *= texture2D( map, vUV * repeat );", "    if( useAlphaMap == 1. ) c.a *= texture2D( alphaMap, vUV * repeat ).a;", "    if( c.a < alphaTest ) discard;", "    if( useDash == 1. ){", "        c.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));", "    }", "    gl_FragColor = c;", "    gl_FragColor.a *= step(vCounters, visibility);", "", ShaderChunk.fog_fragment, "}"].join("\n");
var r = class extends ShaderMaterial {
  constructor(e3) {
    super({ uniforms: Object.assign({}, UniformsLib.fog, { lineWidth: { value: 1 }, map: { value: null }, useMap: { value: 0 }, alphaMap: { value: null }, useAlphaMap: { value: 0 }, color: { value: new Color(16777215) }, opacity: { value: 1 }, resolution: { value: new Vector2(1, 1) }, sizeAttenuation: { value: 1 }, dashArray: { value: 0 }, dashOffset: { value: 0 }, dashRatio: { value: 0.5 }, useDash: { value: 0 }, visibility: { value: 1 }, alphaTest: { value: 0 }, repeat: { value: new Vector2(1, 1) } }), vertexShader: ShaderChunk.meshline_vert, fragmentShader: ShaderChunk.meshline_frag }), this.type = "MeshLineMaterial", Object.defineProperties(this, { lineWidth: { enumerable: true, get() {
      return this.uniforms.lineWidth.value;
    }, set(t2) {
      this.uniforms.lineWidth.value = t2;
    } }, map: { enumerable: true, get() {
      return this.uniforms.map.value;
    }, set(t2) {
      this.uniforms.map.value = t2;
    } }, useMap: { enumerable: true, get() {
      return this.uniforms.useMap.value;
    }, set(t2) {
      this.uniforms.useMap.value = t2;
    } }, alphaMap: { enumerable: true, get() {
      return this.uniforms.alphaMap.value;
    }, set(t2) {
      this.uniforms.alphaMap.value = t2;
    } }, useAlphaMap: { enumerable: true, get() {
      return this.uniforms.useAlphaMap.value;
    }, set(t2) {
      this.uniforms.useAlphaMap.value = t2;
    } }, color: { enumerable: true, get() {
      return this.uniforms.color.value;
    }, set(t2) {
      this.uniforms.color.value = t2;
    } }, opacity: { enumerable: true, get() {
      return this.uniforms.opacity.value;
    }, set(t2) {
      this.uniforms.opacity.value = t2;
    } }, resolution: { enumerable: true, get() {
      return this.uniforms.resolution.value;
    }, set(t2) {
      this.uniforms.resolution.value.copy(t2);
    } }, sizeAttenuation: { enumerable: true, get() {
      return this.uniforms.sizeAttenuation.value;
    }, set(t2) {
      this.uniforms.sizeAttenuation.value = t2;
    } }, dashArray: { enumerable: true, get() {
      return this.uniforms.dashArray.value;
    }, set(t2) {
      this.uniforms.dashArray.value = t2, this.useDash = t2 !== 0 ? 1 : 0;
    } }, dashOffset: { enumerable: true, get() {
      return this.uniforms.dashOffset.value;
    }, set(t2) {
      this.uniforms.dashOffset.value = t2;
    } }, dashRatio: { enumerable: true, get() {
      return this.uniforms.dashRatio.value;
    }, set(t2) {
      this.uniforms.dashRatio.value = t2;
    } }, useDash: { enumerable: true, get() {
      return this.uniforms.useDash.value;
    }, set(t2) {
      this.uniforms.useDash.value = t2;
    } }, visibility: { enumerable: true, get() {
      return this.uniforms.visibility.value;
    }, set(t2) {
      this.uniforms.visibility.value = t2;
    } }, alphaTest: { enumerable: true, get() {
      return this.uniforms.alphaTest.value;
    }, set(t2) {
      this.uniforms.alphaTest.value = t2;
    } }, repeat: { enumerable: true, get() {
      return this.uniforms.repeat.value;
    }, set(t2) {
      this.uniforms.repeat.value.copy(t2);
    } } }), this.setValues(e3);
  }
  copy(t2) {
    return super.copy(t2), this.lineWidth = t2.lineWidth, this.map = t2.map, this.useMap = t2.useMap, this.alphaMap = t2.alphaMap, this.useAlphaMap = t2.useAlphaMap, this.color.copy(t2.color), this.opacity = t2.opacity, this.resolution.copy(t2.resolution), this.sizeAttenuation = t2.sizeAttenuation, this.dashArray.copy(t2.dashArray), this.dashOffset.copy(t2.dashOffset), this.dashRatio.copy(t2.dashRatio), this.useDash = t2.useDash, this.visibility = t2.visibility, this.alphaTest = t2.alphaTest, this.repeat.copy(t2.repeat), this;
  }
};

// node_modules/@react-three/drei/core/Trail.js
var defaults = {
  width: 0.2,
  length: 1,
  decay: 1,
  local: false,
  stride: 0,
  interval: 1
};
var shiftLeft = (collection, steps = 1) => {
  collection.set(collection.subarray(steps));
  collection.fill(-Infinity, -steps);
  return collection;
};
function useTrail(target2, settings) {
  const {
    length,
    local,
    decay,
    interval,
    stride
  } = __spreadValues(__spreadValues({}, defaults), settings);
  const points = React20.useRef();
  const [worldPosition] = React20.useState(() => new Vector3());
  React20.useLayoutEffect(() => {
    if (target2) {
      points.current = Float32Array.from({
        length: length * 10 * 3
      }, (_, i5) => target2.position.getComponent(i5 % 3));
    }
  }, [length, target2]);
  const prevPosition = React20.useRef(new Vector3());
  const frameCount = React20.useRef(0);
  useFrame(() => {
    if (!target2)
      return;
    if (!points.current)
      return;
    if (frameCount.current === 0) {
      let newPosition;
      if (local) {
        newPosition = target2.position;
      } else {
        target2.getWorldPosition(worldPosition);
        newPosition = worldPosition;
      }
      const steps = 1 * decay;
      for (let i5 = 0; i5 < steps; i5++) {
        if (newPosition.distanceTo(prevPosition.current) < stride)
          continue;
        shiftLeft(points.current, 3);
        points.current.set(newPosition.toArray(), points.current.length - 3);
      }
      prevPosition.current.copy(newPosition);
    }
    frameCount.current++;
    frameCount.current = frameCount.current % interval;
  });
  return points;
}
var Trail = React20.forwardRef((props, forwardRef49) => {
  const {
    children
  } = props;
  const {
    width,
    length,
    decay,
    local,
    stride,
    interval
  } = __spreadValues(__spreadValues({}, defaults), props);
  const {
    color = "hotpink",
    attenuation,
    target: target2
  } = props;
  const size = useThree((s3) => s3.size);
  const ref = React20.useRef(null);
  const [anchor, setAnchor] = React20.useState(null);
  const points = useTrail(anchor, {
    length,
    decay,
    local,
    stride,
    interval
  });
  React20.useEffect(() => {
    const t2 = (target2 == null ? void 0 : target2.current) || ref.current.children.find((o2) => {
      return o2 instanceof Object3D;
    });
    if (t2) {
      setAnchor(t2);
    }
  }, [points, target2]);
  const geo = React20.useMemo(() => new s(), []);
  const mat = React20.useMemo(() => {
    var _matOverride;
    const m = new r({
      lineWidth: 0.1 * width,
      color,
      sizeAttenuation: 1,
      resolution: new Vector2(size.width, size.height)
    });
    let matOverride;
    if (children) {
      if (Array.isArray(children)) {
        matOverride = children.find((child) => {
          const c2 = child;
          return typeof c2.type === "string" && c2.type === "meshLineMaterial";
        });
      } else {
        const c2 = children;
        if (typeof c2.type === "string" && c2.type === "meshLineMaterial") {
          matOverride = c2;
        }
      }
    }
    if (typeof ((_matOverride = matOverride) == null ? void 0 : _matOverride.props) === "object") {
      m.setValues(matOverride.props);
    }
    return m;
  }, [width, color, size, children]);
  React20.useEffect(() => {
    mat.uniforms.resolution.value.set(size.width, size.height);
  }, [size]);
  useFrame(() => {
    if (!points.current)
      return;
    geo.setPoints(points.current, attenuation);
  });
  return React20.createElement("group", null, React20.createElement("mesh", {
    ref: forwardRef49,
    geometry: geo,
    material: mat
  }), React20.createElement("group", {
    ref
  }, children));
});

// node_modules/@react-three/drei/core/Sampler.js
init_extends();
var React21 = __toESM(require_react());
init_three_module();
var Sampler = (_a) => {
  var _b = _a, {
    children,
    weight,
    transform,
    instances,
    mesh
  } = _b, props = __objRest(_b, [
    "children",
    "weight",
    "transform",
    "instances",
    "mesh"
  ]);
  const group = React21.useRef(null);
  const instancedRef = React21.useRef(null);
  const meshToSampleRef = React21.useRef(null);
  React21.useEffect(() => {
    var _instances$current, _mesh$current;
    instancedRef.current = (_instances$current = instances == null ? void 0 : instances.current) !== null && _instances$current !== void 0 ? _instances$current : group.current.children.find((c2) => c2.hasOwnProperty("instanceMatrix"));
    meshToSampleRef.current = (_mesh$current = mesh == null ? void 0 : mesh.current) !== null && _mesh$current !== void 0 ? _mesh$current : group.current.children.find((c2) => c2.type === "Mesh");
  }, [children, mesh == null ? void 0 : mesh.current, instances == null ? void 0 : instances.current]);
  React21.useEffect(() => {
    if (typeof meshToSampleRef.current === "undefined")
      return;
    if (typeof instancedRef.current === "undefined")
      return;
    const sampler = new MeshSurfaceSampler(meshToSampleRef.current);
    if (weight) {
      sampler.setWeightAttribute(weight);
    }
    sampler.build();
    const position2 = new Vector3();
    const normal = new Vector3();
    const color = new Color();
    const dummy2 = new Object3D();
    meshToSampleRef.current.updateMatrixWorld(true);
    for (let i5 = 0; i5 < instancedRef.current.count; i5++) {
      sampler.sample(position2, normal, color);
      if (typeof transform === "function") {
        transform({
          dummy: dummy2,
          sampledMesh: meshToSampleRef.current,
          position: position2,
          normal,
          color
        }, i5);
      } else {
        dummy2.position.copy(position2);
      }
      dummy2.updateMatrix();
      instancedRef.current.setMatrixAt(i5, dummy2.matrix);
    }
    instancedRef.current.instanceMatrix.needsUpdate = true;
  }, [children, mesh == null ? void 0 : mesh.current, instances == null ? void 0 : instances.current]);
  return React21.createElement("group", _extends({
    ref: group
  }, props), children);
};

// node_modules/@react-three/drei/core/ComputedAttribute.js
init_extends();
var React22 = __toESM(require_react());
init_three_module();
var ComputedAttribute = (_a) => {
  var _b = _a, {
    compute,
    name
  } = _b, props = __objRest(_b, [
    "compute",
    "name"
  ]);
  const [bufferAttribute] = React22.useState(() => new BufferAttribute(new Float32Array(0), 1));
  const primitive = React22.useRef(null);
  React22.useLayoutEffect(() => {
    if (primitive.current) {
      var _ref;
      const parent = (_ref = primitive.current.parent) !== null && _ref !== void 0 ? _ref : primitive.current.__r3f.parent;
      const attr = compute(parent);
      primitive.current.copy(attr);
    }
  }, [compute]);
  return React22.createElement("primitive", _extends({
    ref: primitive,
    object: bufferAttribute,
    attach: `attributes-${name}`
  }, props));
};

// node_modules/@react-three/drei/core/Clone.js
init_extends();
var React23 = __toESM(require_react());
var import_lodash = __toESM(require_lodash());
function createSpread(child, {
  keys = ["near", "far", "color", "distance", "decay", "penumbra", "angle", "intensity", "skeleton", "visible", "castShadow", "receiveShadow", "morphTargetDictionary", "morphTargetInfluences", "name", "geometry", "material", "position", "rotation", "scale", "up", "userData"],
  deep,
  inject,
  castShadow,
  receiveShadow
}) {
  let spread = (0, import_lodash.default)(child, keys);
  if (deep) {
    if (spread.geometry && deep !== "materialsOnly")
      spread.geometry = spread.geometry.clone();
    if (spread.material && deep !== "geometriesOnly")
      spread.material = spread.material.clone();
  }
  if (inject) {
    if (typeof inject === "function")
      spread = __spreadProps(__spreadValues({}, spread), {
        children: inject(child)
      });
    else if (React23.isValidElement(inject))
      spread = __spreadProps(__spreadValues({}, spread), {
        children: inject
      });
    else
      spread = __spreadValues(__spreadValues({}, spread), inject);
  }
  if (child.type === "Mesh") {
    if (castShadow)
      spread.castShadow = true;
    if (receiveShadow)
      spread.receiveShadow = true;
  }
  return spread;
}
var Clone = React23.forwardRef((_a, forwardRef49) => {
  var _b = _a, {
    object,
    children,
    deep,
    castShadow,
    receiveShadow,
    inject,
    keys
  } = _b, props = __objRest(_b, [
    "object",
    "children",
    "deep",
    "castShadow",
    "receiveShadow",
    "inject",
    "keys"
  ]);
  const config = {
    keys,
    deep,
    inject,
    castShadow,
    receiveShadow
  };
  if (Array.isArray(object)) {
    return React23.createElement("group", _extends({}, props, {
      ref: forwardRef49
    }), object.map((o2) => React23.createElement(Clone, _extends({
      key: o2.uuid,
      object: o2
    }, config))), children);
  }
  const _a2 = createSpread(object, config), {
    children: injectChildren
  } = _a2, spread = __objRest(_a2, [
    "children"
  ]);
  const Element = object.type[0].toLowerCase() + object.type.slice(1);
  return React23.createElement(Element, _extends({}, spread, props, {
    ref: forwardRef49
  }), (object == null ? void 0 : object.children).map((child) => {
    let spread2 = {};
    let Element2 = child.type[0].toLowerCase() + child.type.slice(1);
    if (Element2 === "group" || Element2 === "object3D") {
      Element2 = Clone;
      spread2 = __spreadValues({
        object: child
      }, config);
    } else {
      spread2 = createSpread(child, config);
    }
    return React23.createElement(Element2, _extends({
      key: child.uuid
    }, spread2));
  }), children, injectChildren);
});

// node_modules/@react-three/drei/core/OrthographicCamera.js
init_extends();
var React24 = __toESM(require_react());
init_react_three_fiber_esm();
var OrthographicCamera2 = React24.forwardRef((_a, ref) => {
  var _b = _a, {
    makeDefault
  } = _b, props = __objRest(_b, [
    "makeDefault"
  ]);
  const set = useThree(({
    set: set2
  }) => set2);
  const camera = useThree(({
    camera: camera2
  }) => camera2);
  const size = useThree(({
    size: size2
  }) => size2);
  const cameraRef = React24.useRef();
  React24.useLayoutEffect(() => {
    if (cameraRef.current && !props.manual) {
      cameraRef.current.updateProjectionMatrix();
    }
  }, [size, props]);
  React24.useLayoutEffect(() => {
    if (makeDefault && cameraRef.current) {
      const oldCam = camera;
      set(() => ({
        camera: cameraRef.current
      }));
      return () => set(() => ({
        camera: oldCam
      }));
    }
  }, [cameraRef, makeDefault, set]);
  return React24.createElement("orthographicCamera", _extends({
    left: size.width / -2,
    right: size.width / 2,
    top: size.height / 2,
    bottom: size.height / -2,
    ref: react_merge_refs_esm_default([cameraRef, ref])
  }, props));
});

// node_modules/@react-three/drei/core/PerspectiveCamera.js
init_extends();
var React25 = __toESM(require_react());
init_react_three_fiber_esm();
var PerspectiveCamera2 = React25.forwardRef((_a, ref) => {
  var _b = _a, {
    makeDefault
  } = _b, props = __objRest(_b, [
    "makeDefault"
  ]);
  const set = useThree(({
    set: set2
  }) => set2);
  const camera = useThree(({
    camera: camera2
  }) => camera2);
  const size = useThree(({
    size: size2
  }) => size2);
  const cameraRef = React25.useRef();
  React25.useLayoutEffect(() => {
    const {
      current: cam
    } = cameraRef;
    if (cam && !props.manual) {
      cam.aspect = size.width / size.height;
      cam.updateProjectionMatrix();
    }
  }, [size, props]);
  React25.useLayoutEffect(() => {
    if (makeDefault && cameraRef.current) {
      const oldCam = camera;
      set(() => ({
        camera: cameraRef.current
      }));
      return () => set(() => ({
        camera: oldCam
      }));
    }
  }, [cameraRef, makeDefault, set]);
  return React25.createElement("perspectiveCamera", _extends({
    ref: react_merge_refs_esm_default([cameraRef, ref])
  }, props));
});

// node_modules/@react-three/drei/core/CubeCamera.js
init_three_module();
var React26 = __toESM(require_react());
init_react_three_fiber_esm();
function CubeCamera2(_a) {
  var _b = _a, {
    children,
    fog,
    frames = Infinity,
    resolution = 256,
    near = 0.1,
    far = 1e3
  } = _b, props = __objRest(_b, [
    "children",
    "fog",
    "frames",
    "resolution",
    "near",
    "far"
  ]);
  const ref = React26.useRef();
  const [camera, setCamera] = React26.useState(null);
  const scene = useThree(({
    scene: scene2
  }) => scene2);
  const gl = useThree(({
    gl: gl2
  }) => gl2);
  const fbo = React26.useMemo(() => {
    const fbo2 = new WebGLCubeRenderTarget(resolution);
    fbo2.texture.encoding = gl.outputEncoding;
    fbo2.texture.type = HalfFloatType;
    return fbo2;
  }, [resolution]);
  let count = 0;
  useFrame(() => {
    if (camera && ref.current && (frames === Infinity || count < frames)) {
      ref.current.traverse((obj) => obj.visible = false);
      const originalFog = scene.fog;
      scene.fog = fog || originalFog;
      camera.update(gl, scene);
      scene.fog = originalFog;
      ref.current.traverse((obj) => obj.visible = true);
      count++;
    }
  });
  return React26.createElement("group", props, React26.createElement("cubeCamera", {
    ref: setCamera,
    args: [near, far, fbo]
  }), React26.createElement("group", {
    ref
  }, children(fbo.texture)));
}

// node_modules/@react-three/drei/core/DeviceOrientationControls.js
init_extends();
init_react_three_fiber_esm();
var React27 = __toESM(require_react());
var DeviceOrientationControls2 = React27.forwardRef((props, ref) => {
  const _a = props, {
    camera,
    onChange
  } = _a, rest = __objRest(_a, [
    "camera",
    "onChange"
  ]);
  const defaultCamera = useThree((state) => state.camera);
  const invalidate = useThree((state) => state.invalidate);
  const explCamera = camera || defaultCamera;
  const [controls] = React27.useState(() => new DeviceOrientationControls(explCamera));
  React27.useEffect(() => {
    const callback = (e3) => {
      invalidate();
      if (onChange)
        onChange(e3);
    };
    controls == null ? void 0 : controls.addEventListener == null ? void 0 : controls.addEventListener("change", callback);
    return () => controls == null ? void 0 : controls.removeEventListener == null ? void 0 : controls.removeEventListener("change", callback);
  }, [onChange, controls, invalidate]);
  useFrame(() => controls == null ? void 0 : controls.update(), -1);
  React27.useEffect(() => {
    const current = controls;
    current == null ? void 0 : current.connect();
    return () => current == null ? void 0 : current.dispose();
  }, [controls]);
  return controls ? React27.createElement("primitive", _extends({
    ref,
    object: controls
  }, rest)) : null;
});

// node_modules/@react-three/drei/core/FlyControls.js
init_extends();
init_react_three_fiber_esm();
var React28 = __toESM(require_react());
var FlyControls2 = React28.forwardRef((_a, ref) => {
  var _b = _a, {
    domElement
  } = _b, props = __objRest(_b, [
    "domElement"
  ]);
  const _a2 = props, {
    onChange
  } = _a2, rest = __objRest(_a2, [
    "onChange"
  ]);
  const invalidate = useThree((state) => state.invalidate);
  const camera = useThree((state) => state.camera);
  const gl = useThree((state) => state.gl);
  const events = useThree((state) => state.events);
  const explDomElement = domElement || events.connected || gl.domElement;
  const [controls] = React28.useState(() => new FlyControls(camera, explDomElement));
  React28.useEffect(() => {
    const callback = (e3) => {
      invalidate();
      if (onChange)
        onChange(e3);
    };
    controls == null ? void 0 : controls.addEventListener == null ? void 0 : controls.addEventListener("change", callback);
    return () => controls == null ? void 0 : controls.removeEventListener == null ? void 0 : controls.removeEventListener("change", callback);
  }, [onChange, controls, invalidate]);
  useFrame((_, delta) => controls == null ? void 0 : controls.update(delta));
  return controls ? React28.createElement("primitive", _extends({
    ref,
    object: controls
  }, rest)) : null;
});

// node_modules/@react-three/drei/core/MapControls.js
init_extends();
init_react_three_fiber_esm();
var React29 = __toESM(require_react());
var MapControls2 = React29.forwardRef((props = {
  enableDamping: true
}, ref) => {
  const _a = props, {
    domElement,
    camera,
    onChange,
    onStart,
    onEnd
  } = _a, rest = __objRest(_a, [
    "domElement",
    "camera",
    "onChange",
    "onStart",
    "onEnd"
  ]);
  const invalidate = useThree((state) => state.invalidate);
  const defaultCamera = useThree((state) => state.camera);
  const gl = useThree((state) => state.gl);
  const events = useThree((state) => state.events);
  const explDomElement = domElement || events.connected || gl.domElement;
  const explCamera = camera || defaultCamera;
  const controls = React29.useMemo(() => new MapControls(explCamera), [explCamera]);
  React29.useEffect(() => {
    controls.connect(explDomElement);
    const callback = (e3) => {
      invalidate();
      if (onChange)
        onChange(e3);
    };
    controls.addEventListener("change", callback);
    if (onStart)
      controls.addEventListener("start", onStart);
    if (onEnd)
      controls.addEventListener("end", onEnd);
    return () => {
      controls.dispose();
      controls.removeEventListener("change", callback);
      if (onStart)
        controls.removeEventListener("start", onStart);
      if (onEnd)
        controls.removeEventListener("end", onEnd);
    };
  }, [onChange, onStart, onEnd, controls, invalidate, explDomElement]);
  useFrame(() => controls.update(), -1);
  return React29.createElement("primitive", _extends({
    ref,
    object: controls,
    enableDamping: true
  }, rest));
});

// node_modules/@react-three/drei/core/OrbitControls.js
init_extends();
init_react_three_fiber_esm();
var React30 = __toESM(require_react());
var OrbitControls2 = React30.forwardRef((_a, ref) => {
  var _b = _a, {
    makeDefault,
    camera,
    regress,
    domElement,
    enableDamping = true,
    onChange,
    onStart,
    onEnd
  } = _b, restProps = __objRest(_b, [
    "makeDefault",
    "camera",
    "regress",
    "domElement",
    "enableDamping",
    "onChange",
    "onStart",
    "onEnd"
  ]);
  const invalidate = useThree((state) => state.invalidate);
  const defaultCamera = useThree((state) => state.camera);
  const gl = useThree((state) => state.gl);
  const events = useThree((state) => state.events);
  const set = useThree((state) => state.set);
  const get = useThree((state) => state.get);
  const performance2 = useThree((state) => state.performance);
  const explCamera = camera || defaultCamera;
  const explDomElement = domElement || events.connected || gl.domElement;
  const controls = React30.useMemo(() => new OrbitControls(explCamera), [explCamera]);
  useFrame(() => {
    if (controls.enabled)
      controls.update();
  }, -1);
  React30.useEffect(() => {
    controls.connect(explDomElement);
    return () => void controls.dispose();
  }, [explDomElement, regress, controls, invalidate]);
  React30.useEffect(() => {
    const callback = (e3) => {
      invalidate();
      if (regress)
        performance2.regress();
      if (onChange)
        onChange(e3);
    };
    controls.addEventListener("change", callback);
    if (onStart)
      controls.addEventListener("start", onStart);
    if (onEnd)
      controls.addEventListener("end", onEnd);
    return () => {
      if (onStart)
        controls.removeEventListener("start", onStart);
      if (onEnd)
        controls.removeEventListener("end", onEnd);
      controls.removeEventListener("change", callback);
    };
  }, [onChange, onStart, onEnd, controls, invalidate]);
  React30.useEffect(() => {
    if (makeDefault) {
      const old = get().controls;
      set({
        controls
      });
      return () => set({
        controls: old
      });
    }
  }, [makeDefault, controls]);
  return React30.createElement("primitive", _extends({
    ref,
    object: controls,
    enableDamping
  }, restProps));
});

// node_modules/@react-three/drei/core/TrackballControls.js
init_extends();
init_react_three_fiber_esm();
var React31 = __toESM(require_react());
var TrackballControls2 = React31.forwardRef((_a, ref) => {
  var _b = _a, {
    makeDefault,
    camera,
    domElement,
    regress,
    onChange,
    onStart,
    onEnd
  } = _b, restProps = __objRest(_b, [
    "makeDefault",
    "camera",
    "domElement",
    "regress",
    "onChange",
    "onStart",
    "onEnd"
  ]);
  const {
    invalidate,
    camera: defaultCamera,
    gl,
    events,
    set,
    get,
    performance: performance2,
    viewport
  } = useThree();
  const explCamera = camera || defaultCamera;
  const explDomElement = domElement || events.connected || gl.domElement;
  const controls = React31.useMemo(() => new TrackballControls(explCamera), [explCamera]);
  useFrame(() => {
    if (controls.enabled)
      controls.update();
  }, -1);
  React31.useEffect(() => {
    controls.connect(explDomElement);
    return () => void controls.dispose();
  }, [explDomElement, regress, controls, invalidate]);
  React31.useEffect(() => {
    const callback = (e3) => {
      invalidate();
      if (regress)
        performance2.regress();
      if (onChange)
        onChange(e3);
    };
    controls.addEventListener("change", callback);
    if (onStart)
      controls.addEventListener("start", onStart);
    if (onEnd)
      controls.addEventListener("end", onEnd);
    return () => {
      if (onStart)
        controls.removeEventListener("start", onStart);
      if (onEnd)
        controls.removeEventListener("end", onEnd);
      controls.removeEventListener("change", callback);
    };
  }, [onChange, onStart, onEnd, controls, invalidate]);
  React31.useEffect(() => {
    controls.handleResize();
  }, [viewport]);
  React31.useEffect(() => {
    if (makeDefault) {
      const old = get().controls;
      set({
        controls
      });
      return () => set({
        controls: old
      });
    }
  }, [makeDefault, controls]);
  return React31.createElement("primitive", _extends({
    ref,
    object: controls
  }, restProps));
});

// node_modules/@react-three/drei/core/ArcballControls.js
init_extends();
init_react_three_fiber_esm();
var React32 = __toESM(require_react());
var import_react5 = __toESM(require_react());
var ArcballControls2 = (0, import_react5.forwardRef)((_a, ref) => {
  var _b = _a, {
    camera,
    makeDefault,
    regress,
    domElement,
    onChange,
    onStart,
    onEnd
  } = _b, restProps = __objRest(_b, [
    "camera",
    "makeDefault",
    "regress",
    "domElement",
    "onChange",
    "onStart",
    "onEnd"
  ]);
  const invalidate = useThree((state) => state.invalidate);
  const defaultCamera = useThree((state) => state.camera);
  const gl = useThree((state) => state.gl);
  const events = useThree((state) => state.events);
  const set = useThree((state) => state.set);
  const get = useThree((state) => state.get);
  const performance2 = useThree((state) => state.performance);
  const explCamera = camera || defaultCamera;
  const explDomElement = domElement || events.connected || gl.domElement;
  const controls = (0, import_react5.useMemo)(() => new ArcballControls(explCamera), [explCamera]);
  useFrame(() => {
    if (controls.enabled)
      controls.update();
  }, -1);
  (0, import_react5.useEffect)(() => {
    controls.connect(explDomElement);
    return () => void controls.dispose();
  }, [explDomElement, regress, controls, invalidate]);
  (0, import_react5.useEffect)(() => {
    const callback = (e3) => {
      invalidate();
      if (regress)
        performance2.regress();
      if (onChange)
        onChange(e3);
    };
    controls.addEventListener("change", callback);
    if (onStart)
      controls.addEventListener("start", onStart);
    if (onEnd)
      controls.addEventListener("end", onEnd);
    return () => {
      controls.removeEventListener("change", callback);
      if (onStart)
        controls.removeEventListener("start", onStart);
      if (onEnd)
        controls.removeEventListener("end", onEnd);
    };
  }, [onChange, onStart, onEnd]);
  (0, import_react5.useEffect)(() => {
    if (makeDefault) {
      const old = get().controls;
      set({
        controls
      });
      return () => set({
        controls: old
      });
    }
  }, [makeDefault, controls]);
  return React32.createElement("primitive", _extends({
    ref,
    object: controls
  }, restProps));
});

// node_modules/@react-three/drei/core/TransformControls.js
init_extends();
init_react_three_fiber_esm();
var import_lodash2 = __toESM(require_lodash2());
var import_lodash3 = __toESM(require_lodash());
var React33 = __toESM(require_react());
init_three_module();
var TransformControls2 = React33.forwardRef((_a, ref) => {
  var _b = _a, {
    children,
    domElement,
    onChange,
    onMouseDown,
    onMouseUp,
    onObjectChange,
    object
  } = _b, props = __objRest(_b, [
    "children",
    "domElement",
    "onChange",
    "onMouseDown",
    "onMouseUp",
    "onObjectChange",
    "object"
  ]);
  const transformOnlyPropNames = ["enabled", "axis", "mode", "translationSnap", "rotationSnap", "scaleSnap", "space", "size", "showX", "showY", "showZ"];
  const _a2 = props, {
    camera
  } = _a2, rest = __objRest(_a2, [
    "camera"
  ]);
  const transformProps = (0, import_lodash3.default)(rest, transformOnlyPropNames);
  const objectProps = (0, import_lodash2.default)(rest, transformOnlyPropNames);
  const defaultControls = useThree((state) => state.controls);
  const gl = useThree((state) => state.gl);
  const events = useThree((state) => state.events);
  const defaultCamera = useThree((state) => state.camera);
  const invalidate = useThree((state) => state.invalidate);
  const explCamera = camera || defaultCamera;
  const explDomElement = domElement || events.connected || gl.domElement;
  const controls = React33.useMemo(() => new TransformControls(explCamera, explDomElement), [explCamera, explDomElement]);
  const group = React33.useRef();
  React33.useLayoutEffect(() => {
    if (object) {
      controls.attach(object instanceof Object3D ? object : object.current);
    } else if (group.current instanceof Object3D) {
      controls.attach(group.current);
    }
    return () => void controls.detach();
  }, [object, children, controls]);
  React33.useEffect(() => {
    if (defaultControls) {
      const callback = (event) => defaultControls.enabled = !event.value;
      controls.addEventListener("dragging-changed", callback);
      return () => controls.removeEventListener("dragging-changed", callback);
    }
  }, [controls, defaultControls]);
  React33.useEffect(() => {
    const callback = (e3) => {
      invalidate();
      if (onChange)
        onChange(e3);
    };
    controls == null ? void 0 : controls.addEventListener == null ? void 0 : controls.addEventListener("change", callback);
    if (onMouseDown)
      controls == null ? void 0 : controls.addEventListener == null ? void 0 : controls.addEventListener("mouseDown", onMouseDown);
    if (onMouseUp)
      controls == null ? void 0 : controls.addEventListener == null ? void 0 : controls.addEventListener("mouseUp", onMouseUp);
    if (onObjectChange)
      controls == null ? void 0 : controls.addEventListener == null ? void 0 : controls.addEventListener("objectChange", onObjectChange);
    return () => {
      controls == null ? void 0 : controls.removeEventListener == null ? void 0 : controls.removeEventListener("change", callback);
      if (onMouseDown)
        controls == null ? void 0 : controls.removeEventListener == null ? void 0 : controls.removeEventListener("mouseDown", onMouseDown);
      if (onMouseUp)
        controls == null ? void 0 : controls.removeEventListener == null ? void 0 : controls.removeEventListener("mouseUp", onMouseUp);
      if (onObjectChange)
        controls == null ? void 0 : controls.removeEventListener == null ? void 0 : controls.removeEventListener("objectChange", onObjectChange);
    };
  }, [onChange, onMouseDown, onMouseUp, onObjectChange, controls, invalidate]);
  return controls ? React33.createElement(React33.Fragment, null, React33.createElement("primitive", _extends({
    ref,
    object: controls
  }, transformProps)), React33.createElement("group", _extends({
    ref: group
  }, objectProps), children)) : null;
});

// node_modules/@react-three/drei/core/PointerLockControls.js
init_extends();
init_react_three_fiber_esm();
var React34 = __toESM(require_react());
var PointerLockControls2 = React34.forwardRef((_a, ref) => {
  var _b = _a, {
    domElement,
    selector,
    onChange,
    onLock,
    onUnlock,
    enabled = true
  } = _b, props = __objRest(_b, [
    "domElement",
    "selector",
    "onChange",
    "onLock",
    "onUnlock",
    "enabled"
  ]);
  const _a2 = props, {
    camera
  } = _a2, rest = __objRest(_a2, [
    "camera"
  ]);
  const get = useThree((state) => state.get);
  const setEvents = useThree((state) => state.setEvents);
  const gl = useThree((state) => state.gl);
  const defaultCamera = useThree((state) => state.camera);
  const invalidate = useThree((state) => state.invalidate);
  const events = useThree((state) => state.events);
  const explCamera = camera || defaultCamera;
  const explDomElement = domElement || events.connected || gl.domElement;
  const [controls] = React34.useState(() => new PointerLockControls(explCamera));
  React34.useEffect(() => {
    if (enabled) {
      controls.connect(explDomElement);
      const oldComputeOffsets = get().events.compute;
      setEvents({
        compute(event, state) {
          const offsetX = state.size.width / 2;
          const offsetY = state.size.height / 2;
          state.pointer.set(offsetX / state.size.width * 2 - 1, -(offsetY / state.size.height) * 2 + 1);
          state.raycaster.setFromCamera(state.pointer, state.camera);
        }
      });
      return () => {
        controls.disconnect();
        setEvents({
          compute: oldComputeOffsets
        });
      };
    }
  }, [enabled, controls]);
  React34.useEffect(() => {
    const callback = (e3) => {
      invalidate();
      if (onChange)
        onChange(e3);
    };
    controls.addEventListener("change", callback);
    if (onLock)
      controls.addEventListener("lock", onLock);
    if (onUnlock)
      controls.addEventListener("unlock", onUnlock);
    const handler = () => controls.lock();
    const elements = selector ? Array.from(document.querySelectorAll(selector)) : [document];
    elements.forEach((element) => element && element.addEventListener("click", handler));
    return () => {
      controls.removeEventListener("change", callback);
      if (onLock)
        controls.addEventListener("lock", onLock);
      if (onUnlock)
        controls.addEventListener("unlock", onUnlock);
      elements.forEach((element) => element ? element.removeEventListener("click", handler) : void 0);
    };
  }, [onChange, onLock, onUnlock, selector, controls, invalidate]);
  return React34.createElement("primitive", _extends({
    ref,
    object: controls
  }, rest));
});

// node_modules/@react-three/drei/core/FirstPersonControls.js
init_extends();
var React35 = __toESM(require_react());
init_react_three_fiber_esm();
var FirstPersonControls2 = React35.forwardRef((_a, ref) => {
  var _b = _a, {
    domElement
  } = _b, props = __objRest(_b, [
    "domElement"
  ]);
  const camera = useThree((state) => state.camera);
  const gl = useThree((state) => state.gl);
  const events = useThree((state) => state.events);
  const explDomElement = domElement || events.connected || gl.domElement;
  const [controls] = React35.useState(() => new FirstPersonControls(camera, explDomElement));
  useFrame((_, delta) => {
    controls.update(delta);
  }, -1);
  return controls ? React35.createElement("primitive", _extends({
    ref,
    object: controls
  }, props)) : null;
});

// node_modules/@react-three/drei/core/GizmoHelper.js
var React37 = __toESM(require_react());
init_react_three_fiber_esm();
init_three_module();

// node_modules/@react-three/drei/core/useCamera.js
var React36 = __toESM(require_react());
init_three_module();
init_react_three_fiber_esm();
function useCamera(camera, props) {
  const pointer = useThree((state) => state.pointer);
  const [raycast2] = React36.useState(() => {
    const raycaster = new Raycaster();
    if (props)
      applyProps(raycaster, props, {});
    return function(_, intersects) {
      raycaster.setFromCamera(pointer, camera instanceof Camera ? camera : camera.current);
      const rc = this.constructor.prototype.raycast.bind(this);
      if (rc)
        rc(raycaster, intersects);
    };
  });
  return raycast2;
}

// node_modules/@react-three/drei/core/GizmoHelper.js
var Context = React37.createContext({});
var useGizmoContext = () => {
  return React37.useContext(Context);
};
var turnRate = 2 * Math.PI;
var dummy = new Object3D();
var matrix = new Matrix4();
var [q1, q2] = [new Quaternion(), new Quaternion()];
var target = new Vector3();
var targetPosition = new Vector3();
var GizmoHelper = ({
  alignment = "bottom-right",
  margin = [80, 80],
  renderPriority = 0,
  autoClear = true,
  onUpdate,
  onTarget,
  children: GizmoHelperComponent
}) => {
  const size = useThree(({
    size: size2
  }) => size2);
  const mainCamera = useThree(({
    camera
  }) => camera);
  const defaultControls = useThree(({
    controls
  }) => controls);
  const gl = useThree(({
    gl: gl2
  }) => gl2);
  const scene = useThree(({
    scene: scene2
  }) => scene2);
  const invalidate = useThree(({
    invalidate: invalidate2
  }) => invalidate2);
  const backgroundRef = React37.useRef();
  const gizmoRef = React37.useRef();
  const virtualCam = React37.useRef(null);
  const [virtualScene] = React37.useState(() => new Scene());
  const animating = React37.useRef(false);
  const radius = React37.useRef(0);
  const focusPoint = React37.useRef(new Vector3(0, 0, 0));
  const tweenCamera = React37.useCallback((direction) => {
    animating.current = true;
    if (defaultControls || onTarget)
      focusPoint.current = (defaultControls == null ? void 0 : defaultControls.target) || (onTarget == null ? void 0 : onTarget());
    radius.current = mainCamera.position.distanceTo(target);
    q1.copy(mainCamera.quaternion);
    targetPosition.copy(direction).multiplyScalar(radius.current).add(target);
    dummy.lookAt(targetPosition);
    q2.copy(dummy.quaternion);
    invalidate();
  }, [defaultControls, mainCamera, onTarget, invalidate]);
  React37.useEffect(() => {
    if (scene.background) {
      backgroundRef.current = scene.background;
      scene.background = null;
      virtualScene.background = backgroundRef.current;
    }
    return () => {
      if (backgroundRef.current)
        scene.background = backgroundRef.current;
    };
  }, []);
  useFrame((_, delta) => {
    if (virtualCam.current && gizmoRef.current) {
      var _gizmoRef$current;
      if (animating.current) {
        if (q1.angleTo(q2) < 0.01) {
          animating.current = false;
        } else {
          const step = delta * turnRate;
          q1.rotateTowards(q2, step);
          mainCamera.position.set(0, 0, 1).applyQuaternion(q1).multiplyScalar(radius.current).add(focusPoint.current);
          mainCamera.up.set(0, 1, 0).applyQuaternion(q1).normalize();
          mainCamera.quaternion.copy(q1);
          if (onUpdate)
            onUpdate();
          else if (defaultControls)
            defaultControls.update();
          invalidate();
        }
      }
      matrix.copy(mainCamera.matrix).invert();
      (_gizmoRef$current = gizmoRef.current) == null ? void 0 : _gizmoRef$current.quaternion.setFromRotationMatrix(matrix);
      if (autoClear)
        gl.autoClear = false;
      gl.clearDepth();
      gl.render(virtualScene, virtualCam.current);
    }
  }, renderPriority);
  const raycast2 = useCamera(virtualCam);
  const gizmoHelperContext = React37.useMemo(() => ({
    tweenCamera,
    raycast: raycast2
  }), [tweenCamera]);
  const [marginX, marginY] = margin;
  const x = alignment.endsWith("-left") ? -size.width / 2 + marginX : size.width / 2 - marginX;
  const y = alignment.startsWith("top-") ? size.height / 2 - marginY : -size.height / 2 + marginY;
  return createPortal(React37.createElement(Context.Provider, {
    value: gizmoHelperContext
  }, React37.createElement(OrthographicCamera2, {
    ref: virtualCam,
    position: [0, 0, 200]
  }), React37.createElement("group", {
    ref: gizmoRef,
    position: [x, y, 0]
  }, GizmoHelperComponent)), virtualScene);
};

// node_modules/@react-three/drei/core/GizmoViewcube.js
init_extends();
var React38 = __toESM(require_react());
init_react_three_fiber_esm();
init_three_module();
var colors = {
  bg: "#f0f0f0",
  hover: "#999",
  text: "black",
  stroke: "black"
};
var defaultFaces = ["Right", "Left", "Top", "Bottom", "Front", "Back"];
var makePositionVector = (xyz) => new Vector3(...xyz).multiplyScalar(0.38);
var corners = [[1, 1, 1], [1, 1, -1], [1, -1, 1], [1, -1, -1], [-1, 1, 1], [-1, 1, -1], [-1, -1, 1], [-1, -1, -1]].map(makePositionVector);
var cornerDimensions = [0.25, 0.25, 0.25];
var edges = [[1, 1, 0], [1, 0, 1], [1, 0, -1], [1, -1, 0], [0, 1, 1], [0, 1, -1], [0, -1, 1], [0, -1, -1], [-1, 1, 0], [-1, 0, 1], [-1, 0, -1], [-1, -1, 0]].map(makePositionVector);
var edgeDimensions = edges.map((edge) => edge.toArray().map((axis) => axis == 0 ? 0.5 : 0.25));
var FaceMaterial = ({
  hover,
  index,
  font = "20px Inter var, Arial, sans-serif",
  faces = defaultFaces,
  color = colors.bg,
  hoverColor = colors.hover,
  textColor = colors.text,
  strokeColor = colors.stroke,
  opacity = 1
}) => {
  const gl = useThree((state) => state.gl);
  const texture = React38.useMemo(() => {
    const canvas = document.createElement("canvas");
    canvas.width = 128;
    canvas.height = 128;
    const context7 = canvas.getContext("2d");
    context7.fillStyle = color;
    context7.fillRect(0, 0, canvas.width, canvas.height);
    context7.strokeStyle = strokeColor;
    context7.strokeRect(0, 0, canvas.width, canvas.height);
    context7.font = font;
    context7.textAlign = "center";
    context7.fillStyle = textColor;
    context7.fillText(faces[index].toUpperCase(), 64, 76);
    return new CanvasTexture(canvas);
  }, [index, faces, font, color, textColor, strokeColor]);
  return React38.createElement("meshLambertMaterial", {
    map: texture,
    "map-encoding": gl.outputEncoding,
    "map-anisotropy": gl.capabilities.getMaxAnisotropy() || 1,
    attach: `material-${index}`,
    color: hover ? hoverColor : "white",
    transparent: true,
    opacity
  });
};
var FaceCube = (props) => {
  const {
    tweenCamera,
    raycast: raycast2
  } = useGizmoContext();
  const [hover, setHover] = React38.useState(null);
  const handlePointerOut = (e3) => {
    e3.stopPropagation();
    setHover(null);
  };
  const handleClick = (e3) => {
    e3.stopPropagation();
    tweenCamera(e3.face.normal);
  };
  const handlePointerMove = (e3) => {
    e3.stopPropagation();
    setHover(Math.floor(e3.faceIndex / 2));
  };
  return React38.createElement("mesh", {
    raycast: raycast2,
    onPointerOut: handlePointerOut,
    onPointerMove: handlePointerMove,
    onClick: props.onClick || handleClick
  }, [...Array(6)].map((_, index) => React38.createElement(FaceMaterial, _extends({
    key: index,
    index,
    hover: hover === index
  }, props))), React38.createElement("boxGeometry", null));
};
var EdgeCube = ({
  onClick,
  dimensions,
  position: position2,
  hoverColor = colors.hover
}) => {
  const {
    tweenCamera,
    raycast: raycast2
  } = useGizmoContext();
  const [hover, setHover] = React38.useState(false);
  const handlePointerOut = (e3) => {
    e3.stopPropagation();
    setHover(false);
  };
  const handlePointerOver = (e3) => {
    e3.stopPropagation();
    setHover(true);
  };
  const handleClick = (e3) => {
    e3.stopPropagation();
    tweenCamera(position2);
  };
  return React38.createElement("mesh", {
    scale: 1.01,
    position: position2,
    raycast: raycast2,
    onPointerOver: handlePointerOver,
    onPointerOut: handlePointerOut,
    onClick: onClick || handleClick
  }, React38.createElement("meshBasicMaterial", {
    color: hover ? hoverColor : "white",
    transparent: true,
    opacity: 0.6,
    visible: hover
  }), React38.createElement("boxGeometry", {
    args: dimensions
  }));
};
var GizmoViewcube = (props) => {
  return React38.createElement("group", {
    scale: [60, 60, 60]
  }, React38.createElement(FaceCube, props), edges.map((edge, index) => React38.createElement(EdgeCube, _extends({
    key: index,
    position: edge,
    dimensions: edgeDimensions[index]
  }, props))), corners.map((corner, index) => React38.createElement(EdgeCube, _extends({
    key: index,
    position: corner,
    dimensions: cornerDimensions
  }, props))), React38.createElement("ambientLight", {
    intensity: 0.5
  }), React38.createElement("pointLight", {
    position: [10, 10, 10],
    intensity: 0.5
  }));
};

// node_modules/@react-three/drei/core/GizmoViewport.js
init_extends();
var React39 = __toESM(require_react());
init_react_three_fiber_esm();
init_three_module();
function Axis({
  scale: scale2 = [0.8, 0.05, 0.05],
  color,
  rotation: rotation2
}) {
  return React39.createElement("group", {
    rotation: rotation2
  }, React39.createElement("mesh", {
    position: [0.4, 0, 0]
  }, React39.createElement("boxGeometry", {
    args: scale2
  }), React39.createElement("meshBasicMaterial", {
    color,
    toneMapped: false
  })));
}
function AxisHead(_a) {
  var _b = _a, {
    onClick,
    font,
    disabled,
    arcStyle,
    label,
    labelColor,
    axisHeadScale = 1
  } = _b, props = __objRest(_b, [
    "onClick",
    "font",
    "disabled",
    "arcStyle",
    "label",
    "labelColor",
    "axisHeadScale"
  ]);
  const gl = useThree((state) => state.gl);
  const texture = React39.useMemo(() => {
    const canvas = document.createElement("canvas");
    canvas.width = 64;
    canvas.height = 64;
    const context7 = canvas.getContext("2d");
    context7.beginPath();
    context7.arc(32, 32, 16, 0, 2 * Math.PI);
    context7.closePath();
    context7.fillStyle = arcStyle;
    context7.fill();
    if (label) {
      context7.font = font;
      context7.textAlign = "center";
      context7.fillStyle = labelColor;
      context7.fillText(label, 32, 41);
    }
    return new CanvasTexture(canvas);
  }, [arcStyle, label, labelColor, font]);
  const [active, setActive] = React39.useState(false);
  const scale2 = (label ? 1 : 0.75) * (active ? 1.2 : 1) * axisHeadScale;
  const handlePointerOver = (e3) => {
    e3.stopPropagation();
    setActive(true);
  };
  const handlePointerOut = (e3) => {
    e3.stopPropagation();
    setActive(false);
  };
  return React39.createElement("sprite", _extends({
    scale: scale2,
    onPointerOver: !disabled ? handlePointerOver : void 0,
    onPointerOut: !disabled ? onClick || handlePointerOut : void 0
  }, props), React39.createElement("spriteMaterial", {
    map: texture,
    "map-encoding": gl.outputEncoding,
    "map-anisotropy": gl.capabilities.getMaxAnisotropy() || 1,
    alphaTest: 0.3,
    opacity: label ? 1 : 0.75,
    toneMapped: false
  }));
}
var GizmoViewport = (_a) => {
  var _b = _a, {
    hideNegativeAxes,
    hideAxisHeads,
    disabled,
    font = "18px Inter var, Arial, sans-serif",
    axisColors = ["#ff3653", "#0adb50", "#2c8fdf"],
    axisHeadScale = 1,
    axisScale,
    labels = ["X", "Y", "Z"],
    labelColor = "#000",
    onClick
  } = _b, props = __objRest(_b, [
    "hideNegativeAxes",
    "hideAxisHeads",
    "disabled",
    "font",
    "axisColors",
    "axisHeadScale",
    "axisScale",
    "labels",
    "labelColor",
    "onClick"
  ]);
  const [colorX, colorY, colorZ] = axisColors;
  const {
    tweenCamera,
    raycast: raycast2
  } = useGizmoContext();
  const axisHeadProps = {
    font,
    disabled,
    labelColor,
    raycast: raycast2,
    onClick,
    axisHeadScale,
    onPointerDown: !disabled ? (e3) => {
      tweenCamera(e3.object.position);
      e3.stopPropagation();
    } : void 0
  };
  return React39.createElement("group", _extends({
    scale: 40
  }, props), React39.createElement(Axis, {
    color: colorX,
    rotation: [0, 0, 0],
    scale: axisScale
  }), React39.createElement(Axis, {
    color: colorY,
    rotation: [0, 0, Math.PI / 2],
    scale: axisScale
  }), React39.createElement(Axis, {
    color: colorZ,
    rotation: [0, -Math.PI / 2, 0],
    scale: axisScale
  }), !hideAxisHeads && React39.createElement(React39.Fragment, null, React39.createElement(AxisHead, _extends({
    arcStyle: colorX,
    position: [1, 0, 0],
    label: labels[0]
  }, axisHeadProps)), React39.createElement(AxisHead, _extends({
    arcStyle: colorY,
    position: [0, 1, 0],
    label: labels[1]
  }, axisHeadProps)), React39.createElement(AxisHead, _extends({
    arcStyle: colorZ,
    position: [0, 0, 1],
    label: labels[2]
  }, axisHeadProps)), !hideNegativeAxes && React39.createElement(React39.Fragment, null, React39.createElement(AxisHead, _extends({
    arcStyle: colorX,
    position: [-1, 0, 0]
  }, axisHeadProps)), React39.createElement(AxisHead, _extends({
    arcStyle: colorY,
    position: [0, -1, 0]
  }, axisHeadProps)), React39.createElement(AxisHead, _extends({
    arcStyle: colorZ,
    position: [0, 0, -1]
  }, axisHeadProps)))), React39.createElement("ambientLight", {
    intensity: 0.5
  }), React39.createElement("pointLight", {
    position: [10, 10, 10],
    intensity: 0.5
  }));
};

// node_modules/@react-three/drei/core/useCubeTexture.js
init_three_module();
init_react_three_fiber_esm();
function useCubeTexture(files, {
  path
}) {
  const [cubeTexture] = useLoader(CubeTextureLoader, [files], (loader) => loader.setPath(path));
  return cubeTexture;
}
useCubeTexture.preload = (files, {
  path
}) => useLoader.preload(CubeTextureLoader, [files], (loader) => loader.setPath(path));

// node_modules/@react-three/drei/core/useFBX.js
init_react_three_fiber_esm();
function useFBX(path) {
  return useLoader(FBXLoader, path);
}
useFBX.preload = (path) => useLoader.preload(FBXLoader, path);
useFBX.clear = (input) => useLoader.clear(FBXLoader, input);

// node_modules/@react-three/drei/core/useGLTF.js
init_react_three_fiber_esm();
var dracoLoader = null;
function extensions(useDraco, useMeshopt, extendLoader) {
  return (loader) => {
    if (extendLoader) {
      extendLoader(loader);
    }
    if (useDraco) {
      if (!dracoLoader) {
        dracoLoader = new DRACOLoader();
      }
      dracoLoader.setDecoderPath(typeof useDraco === "string" ? useDraco : "https://www.gstatic.com/draco/versioned/decoders/1.4.3/");
      loader.setDRACOLoader(dracoLoader);
    }
    if (useMeshopt) {
      loader.setMeshoptDecoder(typeof MeshoptDecoder === "function" ? MeshoptDecoder() : MeshoptDecoder);
    }
  };
}
function useGLTF(path, useDraco = true, useMeshOpt = true, extendLoader) {
  const gltf = useLoader(GLTFLoader, path, extensions(useDraco, useMeshOpt, extendLoader));
  return gltf;
}
useGLTF.preload = (path, useDraco = true, useMeshOpt = true, extendLoader) => useLoader.preload(GLTFLoader, path, extensions(useDraco, useMeshOpt, extendLoader));
useGLTF.clear = (input) => useLoader.clear(GLTFLoader, input);

// node_modules/@react-three/drei/core/useKTX2.js
init_react_three_fiber_esm();
var import_react6 = __toESM(require_react());
var cdn = "https://cdn.jsdelivr.net/gh/pmndrs/drei-assets@master";
function useKTX2(input, basisPath = `${cdn}/basis/`) {
  const gl = useThree((state) => state.gl);
  const textures = useLoader(KTX2Loader, IsObject(input) ? Object.values(input) : input, (loader) => {
    loader.detectSupport(gl);
    loader.setTranscoderPath(basisPath);
  });
  (0, import_react6.useEffect)(() => {
    const array = Array.isArray(textures) ? textures : [textures];
    array.forEach(gl.initTexture);
  }, [gl, textures]);
  if (IsObject(input)) {
    const keys = Object.keys(input);
    const keyed = {};
    keys.forEach((key) => Object.assign(keyed, {
      [key]: textures[keys.indexOf(key)]
    }));
    return keyed;
  } else {
    return textures;
  }
}
useKTX2.preload = (url, basisPath = `${cdn}/basis/`) => useLoader.preload(KTX2Loader, url, (loader) => {
  loader.setTranscoderPath(basisPath);
});
useKTX2.clear = (input) => useLoader.clear(KTX2Loader, input);

// node_modules/@react-three/drei/core/Stats.js
var React41 = __toESM(require_react());
init_react_three_fiber_esm();
var import_stats = __toESM(require_stats_min());

// node_modules/@react-three/drei/helpers/useEffectfulState.js
var React40 = __toESM(require_react());
function call2(ref, value) {
  if (typeof ref === "function")
    ref(value);
  else if (ref != null)
    ref.current = value;
}
function useEffectfulState(fn, deps = [], cb) {
  const [state, set] = React40.useState();
  React40.useLayoutEffect(() => {
    const value = fn();
    set(value);
    call2(cb, value);
    return () => call2(cb, null);
  }, deps);
  return state;
}

// node_modules/@react-three/drei/core/Stats.js
function Stats({
  showPanel = 0,
  className,
  parent
}) {
  const stats = useEffectfulState(() => new import_stats.default(), []);
  React41.useEffect(() => {
    if (stats) {
      const node = parent && parent.current || document.body;
      stats.showPanel(showPanel);
      node == null ? void 0 : node.appendChild(stats.dom);
      if (className)
        stats.dom.classList.add(...className.split(" ").filter((cls) => cls));
      const begin = addEffect(() => stats.begin());
      const end = addAfterEffect(() => stats.end());
      return () => {
        node == null ? void 0 : node.removeChild(stats.dom);
        begin();
        end();
      };
    }
  }, [parent, stats, className, showPanel]);
  return null;
}

// node_modules/@react-three/drei/core/useDepthBuffer.js
init_three_module();
var React43 = __toESM(require_react());
init_react_three_fiber_esm();

// node_modules/@react-three/drei/core/useFBO.js
var React42 = __toESM(require_react());
init_three_module();
init_react_three_fiber_esm();
function useFBO(width, height, settings) {
  const {
    gl,
    size,
    viewport
  } = useThree();
  const _width = typeof width === "number" ? width : size.width * viewport.dpr;
  const _height = typeof height === "number" ? height : size.height * viewport.dpr;
  const _settings = (typeof width === "number" ? settings : width) || {};
  const _a = _settings, {
    samples
  } = _a, targetSettings = __objRest(_a, [
    "samples"
  ]);
  const target2 = React42.useMemo(() => {
    let target3;
    target3 = new WebGLRenderTarget(_width, _height, __spreadValues({
      minFilter: LinearFilter,
      magFilter: LinearFilter,
      encoding: gl.outputEncoding,
      type: HalfFloatType
    }, targetSettings));
    target3.samples = samples;
    return target3;
  }, []);
  React42.useLayoutEffect(() => {
    target2.setSize(_width, _height);
    if (samples)
      target2.samples = samples;
  }, [samples, target2, _width, _height]);
  React42.useEffect(() => {
    return () => target2.dispose();
  }, []);
  return target2;
}

// node_modules/@react-three/drei/core/useDepthBuffer.js
function useDepthBuffer({
  size = 256,
  frames = Infinity
} = {}) {
  const dpr = useThree((state) => state.viewport.dpr);
  const {
    width,
    height
  } = useThree((state) => state.size);
  const w = size || width * dpr;
  const h = size || height * dpr;
  const depthConfig = React43.useMemo(() => {
    const depthTexture = new DepthTexture(w, h);
    depthTexture.format = DepthFormat;
    depthTexture.type = UnsignedShortType;
    return {
      depthTexture
    };
  }, [w, h]);
  let count = 0;
  const depthFBO = useFBO(w, h, depthConfig);
  useFrame((state) => {
    if (frames === Infinity || count < frames) {
      state.gl.setRenderTarget(depthFBO);
      state.gl.render(state.scene, state.camera);
      state.gl.setRenderTarget(null);
      count++;
    }
  });
  return depthFBO.depthTexture;
}

// node_modules/@react-three/drei/core/useAspect.js
init_react_three_fiber_esm();
function useAspect(width, height, factor = 1) {
  const v4 = useThree((state) => state.viewport);
  const adaptedHeight = height * (v4.aspect > width / height ? v4.width / width : v4.height / height);
  const adaptedWidth = width * (v4.aspect > width / height ? v4.width / width : v4.height / height);
  return [adaptedWidth * factor, adaptedHeight * factor, 1];
}

// node_modules/detect-gpu/dist/detect-gpu.esm.js
function e2(e3, t2, r3, n2) {
  return new (r3 || (r3 = Promise))(function(o2, a2) {
    function i5(e4) {
      try {
        d2(n2.next(e4));
      } catch (e5) {
        a2(e5);
      }
    }
    function c2(e4) {
      try {
        d2(n2.throw(e4));
      } catch (e5) {
        a2(e5);
      }
    }
    function d2(e4) {
      var t3;
      e4.done ? o2(e4.value) : (t3 = e4.value, t3 instanceof r3 ? t3 : new r3(function(e5) {
        e5(t3);
      })).then(i5, c2);
    }
    d2((n2 = n2.apply(e3, t2 || [])).next());
  });
}
var t = ["geforce 320m", "geforce 8600", "geforce 8600m gt", "geforce 8800 gs", "geforce 8800 gt", "geforce 9400", "geforce 9400m g", "geforce 9400m", "geforce 9600m gt", "geforce 9600m", "geforce fx go5200", "geforce gt 120", "geforce gt 130", "geforce gt 330m", "geforce gtx 285", "google swiftshader", "intel g41", "intel g45", "intel gma 4500mhd", "intel gma x3100", "intel hd 3000", "intel q45", "legacy", "mali-2", "mali-3", "mali-4", "quadro fx 1500", "quadro fx 4", "quadro fx 5", "radeon hd 2400", "radeon hd 2600", "radeon hd 4670", "radeon hd 4850", "radeon hd 4870", "radeon hd 5670", "radeon hd 5750", "radeon hd 6290", "radeon hd 6300", "radeon hd 6310", "radeon hd 6320", "radeon hd 6490m", "radeon hd 6630m", "radeon hd 6750m", "radeon hd 6770m", "radeon hd 6970m", "sgx 543", "sgx543"];
function r2(e3) {
  return e3 = e3.toLowerCase().replace(/^angle ?\((.+)\)*$/, "$1").replace(/\s(\d{1,2}gb|direct3d.+$)|\(r\)| \([^)]+\)$/g, "");
}
var n = typeof window == "undefined";
var o = (() => {
  if (n)
    return;
  const { userAgent: e3, platform: t2, maxTouchPoints: r3 } = window.navigator, o2 = /(iphone|ipod|ipad)/i.test(e3), a2 = t2 === "iPad" || t2 === "MacIntel" && r3 > 0 && !window.MSStream;
  return { isIpad: a2, isMobile: /android/i.test(e3) || o2 || a2, isSafari12: /Version\/12.+Safari/.test(e3) };
})();
function a(e3, t2, r3) {
  if (!r3)
    return [t2];
  const n2 = function(e4) {
    const t3 = "\n    precision highp float;\n    attribute vec3 aPosition;\n    varying float vvv;\n    void main() {\n      vvv = 0.31622776601683794;\n      gl_Position = vec4(aPosition, 1.0);\n    }\n  ", r4 = "\n    precision highp float;\n    varying float vvv;\n    void main() {\n      vec4 enc = vec4(1.0, 255.0, 65025.0, 16581375.0) * vvv;\n      enc = fract(enc);\n      enc -= enc.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n      gl_FragColor = enc;\n    }\n  ", n3 = e4.createShader(35633), o2 = e4.createShader(35632), a3 = e4.createProgram();
    if (!(o2 && n3 && a3))
      return;
    e4.shaderSource(n3, t3), e4.shaderSource(o2, r4), e4.compileShader(n3), e4.compileShader(o2), e4.attachShader(a3, n3), e4.attachShader(a3, o2), e4.linkProgram(a3), e4.detachShader(a3, n3), e4.detachShader(a3, o2), e4.deleteShader(n3), e4.deleteShader(o2), e4.useProgram(a3);
    const i6 = e4.createBuffer();
    e4.bindBuffer(34962, i6), e4.bufferData(34962, new Float32Array([-1, -1, 0, 3, -1, 0, -1, 3, 0]), 35044);
    const c3 = e4.getAttribLocation(a3, "aPosition");
    e4.vertexAttribPointer(c3, 3, 5126, false, 0, 0), e4.enableVertexAttribArray(c3), e4.clearColor(1, 1, 1, 1), e4.clear(16384), e4.viewport(0, 0, 1, 1), e4.drawArrays(4, 0, 3);
    const d3 = new Uint8Array(4);
    return e4.readPixels(0, 0, 1, 1, 6408, 5121, d3), e4.deleteProgram(a3), e4.deleteBuffer(i6), d3.join("");
  }(e3), a2 = "801621810", i5 = "8016218135", c2 = "80162181161", d2 = (o == null ? void 0 : o.isIpad) ? [["a7", c2, 12], ["a8", i5, 15], ["a8x", i5, 15], ["a9", i5, 15], ["a9x", i5, 15], ["a10", i5, 15], ["a10x", i5, 15], ["a12", a2, 15], ["a12x", a2, 15], ["a12z", a2, 15], ["a14", a2, 15], ["m1", a2, 15]] : [["a7", c2, 12], ["a8", i5, 12], ["a9", i5, 15], ["a10", i5, 15], ["a11", a2, 15], ["a12", a2, 15], ["a13", a2, 15], ["a14", a2, 15]];
  let l2;
  n2 === "80162181255" ? l2 = d2.filter(([, , e4]) => e4 >= 14) : (l2 = d2.filter(([, e4]) => e4 === n2), l2.length || (l2 = d2));
  return l2.map(([e4]) => `apple ${e4} gpu`);
}
var i2 = [];
var c = [];
function d(e3, t2) {
  if (e3 === t2)
    return 0;
  const r3 = e3;
  e3.length > t2.length && (e3 = t2, t2 = r3);
  let n2 = e3.length, o2 = t2.length;
  for (; n2 > 0 && e3.charCodeAt(~-n2) === t2.charCodeAt(~-o2); )
    n2--, o2--;
  let a2, d2 = 0;
  for (; d2 < n2 && e3.charCodeAt(d2) === t2.charCodeAt(d2); )
    d2++;
  if (n2 -= d2, o2 -= d2, n2 === 0)
    return o2;
  let l2, s3, f2 = 0, u = 0, h = 0;
  for (; u < n2; )
    c[u] = e3.charCodeAt(d2 + u), i2[u] = ++u;
  for (; h < o2; )
    for (a2 = t2.charCodeAt(d2 + h), l2 = h++, f2 = h, u = 0; u < n2; u++)
      s3 = a2 === c[u] ? l2 : l2 + 1, l2 = i2[u], f2 = i2[u] = l2 > f2 ? s3 > f2 ? f2 + 1 : s3 : s3 > l2 ? l2 + 1 : s3;
  return f2;
}
function l(e3) {
  return e3 != null;
}
var s2 = class extends Error {
  constructor(e3) {
    super(e3), Object.setPrototypeOf(this, new.target.prototype);
  }
};
var f = ({ mobileTiers: i5 = [0, 15, 30, 60], desktopTiers: c2 = [0, 15, 30, 60], override: f2 = {}, glContext: u, failIfMajorPerformanceCaveat: h = false, benchmarksURL: g = "https://unpkg.com/detect-gpu@4.0.26/dist/benchmarks" } = {}) => e2(void 0, void 0, void 0, function* () {
  const p = {};
  if (n)
    return { tier: 0, type: "SSR" };
  const { isIpad: m = !!(o == null ? void 0 : o.isIpad), isMobile: v4 = !!(o == null ? void 0 : o.isMobile), screenSize: w = window.screen, loadBenchmarks: x = (t2) => e2(void 0, void 0, void 0, function* () {
    const e3 = yield fetch(`${g}/${t2}`).then((e4) => e4.json());
    if (parseInt(e3.shift().split(".")[0], 10) < 4)
      throw new s2("Detect GPU benchmark data is out of date. Please update to version 4x");
    return e3;
  }) } = f2;
  let { renderer: A } = f2;
  const P = (e3, t2, r3, n2, o2) => ({ device: o2, fps: n2, gpu: r3, isMobile: v4, tier: e3, type: t2 });
  let b, S = "";
  if (A)
    A = r2(A), b = [A];
  else {
    const e3 = u || function(e4, t3 = false) {
      const r3 = { alpha: false, antialias: false, depth: false, failIfMajorPerformanceCaveat: t3, powerPreference: "high-performance", stencil: false };
      e4 && delete r3.powerPreference;
      const n2 = window.document.createElement("canvas"), o2 = n2.getContext("webgl", r3) || n2.getContext("experimental-webgl", r3);
      return o2 != null ? o2 : void 0;
    }(o == null ? void 0 : o.isSafari12, h);
    if (!e3)
      return P(0, "WEBGL_UNSUPPORTED");
    const t2 = e3.getExtension("WEBGL_debug_renderer_info");
    if (t2 && (A = e3.getParameter(t2.UNMASKED_RENDERER_WEBGL)), !A)
      return P(1, "FALLBACK");
    S = A, A = r2(A), b = function(e4, t3, r3) {
      return t3 === "apple gpu" ? a(e4, t3, r3) : [t3];
    }(e3, A, v4);
  }
  const y = (yield Promise.all(b.map((t2) => e2(void 0, void 0, void 0, function* () {
    var e3;
    const r3 = ((e4) => {
      const t3 = v4 ? ["adreno", "apple", "mali-t", "mali", "nvidia", "powervr"] : ["intel", "apple", "amd", "radeon", "nvidia", "geforce"];
      for (const r4 of t3)
        if (e4.includes(r4))
          return r4;
    })(t2);
    if (!r3)
      return;
    const n2 = `${v4 ? "m" : "d"}-${r3}${m ? "-ipad" : ""}.json`, o2 = p[n2] = (e3 = p[n2]) !== null && e3 !== void 0 ? e3 : x(n2);
    let a2;
    try {
      a2 = yield o2;
    } catch (e4) {
      if (e4 instanceof s2)
        throw e4;
      return;
    }
    const i6 = function(e4) {
      var t3;
      const r4 = (e4 = e4.replace(/\([^)]+\)/, "")).match(/\d+/) || e4.match(/(\W|^)([A-Za-z]{1,3})(\W|$)/g);
      return (t3 = r4 == null ? void 0 : r4.join("").replace(/\W|amd/g, "")) !== null && t3 !== void 0 ? t3 : "";
    }(t2);
    let c3 = a2.filter(([, e4]) => e4 === i6);
    c3.length || (c3 = a2.filter(([e4]) => e4.includes(t2)));
    const l2 = c3.length;
    if (l2 === 0)
      return;
    let f3, [u2, , , h2] = l2 > 1 ? c3.map((e4) => [e4, d(t2, e4[0])]).sort(([, e4], [, t3]) => e4 - t3)[0][0] : c3[0], g2 = Number.MAX_VALUE;
    const { devicePixelRatio: A2 } = window, P2 = w.width * A2 * w.height * A2;
    for (const e4 of h2) {
      const [t3, r4] = e4, n3 = t3 * r4, o3 = Math.abs(P2 - n3);
      o3 < g2 && (g2 = o3, f3 = e4);
    }
    if (!f3)
      return;
    const [, , b2, S2] = f3;
    return [g2, b2, u2, S2];
  })))).filter(l).sort(([e3 = Number.MAX_VALUE, t2], [r3 = Number.MAX_VALUE, n2]) => e3 === r3 ? t2 - n2 : e3 - r3);
  if (!y.length) {
    const e3 = t.find((e4) => A.includes(e4));
    return e3 ? P(0, "BLOCKLISTED", e3) : P(1, "FALLBACK", `${A} (${S})`);
  }
  const [, C, E, L] = y[0];
  if (C === -1)
    return P(0, "BLOCKLISTED", E, C, L);
  const M = v4 ? i5 : c2;
  let $ = 0;
  for (let e3 = 0; e3 < M.length; e3++)
    C >= M[e3] && ($ = e3);
  return P($, "BENCHMARK", E, C, L);
});

// node_modules/@react-three/drei/core/useDetectGPU.js
init_dist();
var useDetectGPU = (props) => suspend(() => f(props), ["useDetectGPU"]);

// node_modules/@react-three/drei/core/useHelper.js
var React44 = __toESM(require_react());
init_react_three_fiber_esm();
function useHelper(object3D, helperConstructor, ...args) {
  const helper = React44.useRef();
  const scene = useThree((state) => state.scene);
  React44.useEffect(() => {
    if (object3D) {
      if (helperConstructor && object3D != null && object3D.current) {
        helper.current = new helperConstructor(object3D.current, ...args);
        if (helper.current) {
          scene.add(helper.current);
        }
      }
    }
    if (!object3D && helper.current) {
      scene.remove(helper.current);
    }
    return () => {
      if (helper.current) {
        scene.remove(helper.current);
      }
    };
  }, [scene, helperConstructor, object3D, args]);
  useFrame(() => {
    var _helper$current;
    if ((_helper$current = helper.current) != null && _helper$current.update) {
      helper.current.update();
    }
  });
  return helper;
}

// node_modules/@react-three/drei/core/useBVH.js
var React45 = __toESM(require_react());

// node_modules/three-mesh-bvh/src/core/MeshBVH.js
init_three_module();

// node_modules/three-mesh-bvh/src/core/Constants.js
var CENTER = 0;
var AVERAGE = 1;
var SAH = 2;
var CONTAINED = 2;
var TRIANGLE_INTERSECT_COST = 1.25;
var TRAVERSAL_COST = 1;
var BYTES_PER_NODE = 6 * 4 + 4 + 4;
var IS_LEAFNODE_FLAG = 65535;
var FLOAT32_EPSILON = Math.pow(2, -24);

// node_modules/three-mesh-bvh/src/core/buildFunctions.js
init_three_module();

// node_modules/three-mesh-bvh/src/core/MeshBVHNode.js
var MeshBVHNode = class {
  constructor() {
  }
};

// node_modules/three-mesh-bvh/src/utils/ArrayBoxUtilities.js
function arrayToBox(nodeIndex32, array, target2) {
  target2.min.x = array[nodeIndex32];
  target2.min.y = array[nodeIndex32 + 1];
  target2.min.z = array[nodeIndex32 + 2];
  target2.max.x = array[nodeIndex32 + 3];
  target2.max.y = array[nodeIndex32 + 4];
  target2.max.z = array[nodeIndex32 + 5];
  return target2;
}
function getLongestEdgeIndex(bounds) {
  let splitDimIdx = -1;
  let splitDist = -Infinity;
  for (let i5 = 0; i5 < 3; i5++) {
    const dist = bounds[i5 + 3] - bounds[i5];
    if (dist > splitDist) {
      splitDist = dist;
      splitDimIdx = i5;
    }
  }
  return splitDimIdx;
}
function copyBounds(source, target2) {
  target2.set(source);
}
function unionBounds(a2, b, target2) {
  let aVal, bVal;
  for (let d2 = 0; d2 < 3; d2++) {
    const d3 = d2 + 3;
    aVal = a2[d2];
    bVal = b[d2];
    target2[d2] = aVal < bVal ? aVal : bVal;
    aVal = a2[d3];
    bVal = b[d3];
    target2[d3] = aVal > bVal ? aVal : bVal;
  }
}
function expandByTriangleBounds(startIndex, triangleBounds, bounds) {
  for (let d2 = 0; d2 < 3; d2++) {
    const tCenter = triangleBounds[startIndex + 2 * d2];
    const tHalf = triangleBounds[startIndex + 2 * d2 + 1];
    const tMin = tCenter - tHalf;
    const tMax = tCenter + tHalf;
    if (tMin < bounds[d2]) {
      bounds[d2] = tMin;
    }
    if (tMax > bounds[d2 + 3]) {
      bounds[d2 + 3] = tMax;
    }
  }
}
function computeSurfaceArea(bounds) {
  const d0 = bounds[3] - bounds[0];
  const d1 = bounds[4] - bounds[1];
  const d2 = bounds[5] - bounds[2];
  return 2 * (d0 * d1 + d1 * d2 + d2 * d0);
}

// node_modules/three-mesh-bvh/src/core/buildFunctions.js
function ensureIndex(geo, options) {
  if (!geo.index) {
    const vertexCount = geo.attributes.position.count;
    const BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;
    let index;
    if (vertexCount > 65535) {
      index = new Uint32Array(new BufferConstructor(4 * vertexCount));
    } else {
      index = new Uint16Array(new BufferConstructor(2 * vertexCount));
    }
    geo.setIndex(new BufferAttribute(index, 1));
    for (let i5 = 0; i5 < vertexCount; i5++) {
      index[i5] = i5;
    }
  }
}
function getRootIndexRanges(geo) {
  if (!geo.groups || !geo.groups.length) {
    return [{ offset: 0, count: geo.index.count / 3 }];
  }
  const ranges = [];
  const rangeBoundaries = /* @__PURE__ */ new Set();
  for (const group of geo.groups) {
    rangeBoundaries.add(group.start);
    rangeBoundaries.add(group.start + group.count);
  }
  const sortedBoundaries = Array.from(rangeBoundaries.values()).sort((a2, b) => a2 - b);
  for (let i5 = 0; i5 < sortedBoundaries.length - 1; i5++) {
    const start = sortedBoundaries[i5], end = sortedBoundaries[i5 + 1];
    ranges.push({ offset: start / 3, count: (end - start) / 3 });
  }
  return ranges;
}
function getBounds(triangleBounds, offset, count, target2, centroidTarget = null) {
  let minx = Infinity;
  let miny = Infinity;
  let minz = Infinity;
  let maxx = -Infinity;
  let maxy = -Infinity;
  let maxz = -Infinity;
  let cminx = Infinity;
  let cminy = Infinity;
  let cminz = Infinity;
  let cmaxx = -Infinity;
  let cmaxy = -Infinity;
  let cmaxz = -Infinity;
  const includeCentroid = centroidTarget !== null;
  for (let i5 = offset * 6, end = (offset + count) * 6; i5 < end; i5 += 6) {
    const cx = triangleBounds[i5 + 0];
    const hx = triangleBounds[i5 + 1];
    const lx = cx - hx;
    const rx = cx + hx;
    if (lx < minx)
      minx = lx;
    if (rx > maxx)
      maxx = rx;
    if (includeCentroid && cx < cminx)
      cminx = cx;
    if (includeCentroid && cx > cmaxx)
      cmaxx = cx;
    const cy = triangleBounds[i5 + 2];
    const hy = triangleBounds[i5 + 3];
    const ly = cy - hy;
    const ry = cy + hy;
    if (ly < miny)
      miny = ly;
    if (ry > maxy)
      maxy = ry;
    if (includeCentroid && cy < cminy)
      cminy = cy;
    if (includeCentroid && cy > cmaxy)
      cmaxy = cy;
    const cz = triangleBounds[i5 + 4];
    const hz = triangleBounds[i5 + 5];
    const lz = cz - hz;
    const rz = cz + hz;
    if (lz < minz)
      minz = lz;
    if (rz > maxz)
      maxz = rz;
    if (includeCentroid && cz < cminz)
      cminz = cz;
    if (includeCentroid && cz > cmaxz)
      cmaxz = cz;
  }
  target2[0] = minx;
  target2[1] = miny;
  target2[2] = minz;
  target2[3] = maxx;
  target2[4] = maxy;
  target2[5] = maxz;
  if (includeCentroid) {
    centroidTarget[0] = cminx;
    centroidTarget[1] = cminy;
    centroidTarget[2] = cminz;
    centroidTarget[3] = cmaxx;
    centroidTarget[4] = cmaxy;
    centroidTarget[5] = cmaxz;
  }
}
function getCentroidBounds(triangleBounds, offset, count, centroidTarget) {
  let cminx = Infinity;
  let cminy = Infinity;
  let cminz = Infinity;
  let cmaxx = -Infinity;
  let cmaxy = -Infinity;
  let cmaxz = -Infinity;
  for (let i5 = offset * 6, end = (offset + count) * 6; i5 < end; i5 += 6) {
    const cx = triangleBounds[i5 + 0];
    if (cx < cminx)
      cminx = cx;
    if (cx > cmaxx)
      cmaxx = cx;
    const cy = triangleBounds[i5 + 2];
    if (cy < cminy)
      cminy = cy;
    if (cy > cmaxy)
      cmaxy = cy;
    const cz = triangleBounds[i5 + 4];
    if (cz < cminz)
      cminz = cz;
    if (cz > cmaxz)
      cmaxz = cz;
  }
  centroidTarget[0] = cminx;
  centroidTarget[1] = cminy;
  centroidTarget[2] = cminz;
  centroidTarget[3] = cmaxx;
  centroidTarget[4] = cmaxy;
  centroidTarget[5] = cmaxz;
}
function partition(index, triangleBounds, offset, count, split) {
  let left = offset;
  let right = offset + count - 1;
  const pos = split.pos;
  const axisOffset = split.axis * 2;
  while (true) {
    while (left <= right && triangleBounds[left * 6 + axisOffset] < pos) {
      left++;
    }
    while (left <= right && triangleBounds[right * 6 + axisOffset] >= pos) {
      right--;
    }
    if (left < right) {
      for (let i5 = 0; i5 < 3; i5++) {
        let t0 = index[left * 3 + i5];
        index[left * 3 + i5] = index[right * 3 + i5];
        index[right * 3 + i5] = t0;
        let t1 = triangleBounds[left * 6 + i5 * 2 + 0];
        triangleBounds[left * 6 + i5 * 2 + 0] = triangleBounds[right * 6 + i5 * 2 + 0];
        triangleBounds[right * 6 + i5 * 2 + 0] = t1;
        let t2 = triangleBounds[left * 6 + i5 * 2 + 1];
        triangleBounds[left * 6 + i5 * 2 + 1] = triangleBounds[right * 6 + i5 * 2 + 1];
        triangleBounds[right * 6 + i5 * 2 + 1] = t2;
      }
      left++;
      right--;
    } else {
      return left;
    }
  }
}
var BIN_COUNT = 32;
var binsSort = (a2, b) => a2.candidate - b.candidate;
var sahBins = new Array(BIN_COUNT).fill().map(() => {
  return {
    count: 0,
    bounds: new Float32Array(6),
    rightCacheBounds: new Float32Array(6),
    leftCacheBounds: new Float32Array(6),
    candidate: 0
  };
});
var leftBounds = new Float32Array(6);
function getOptimalSplit(nodeBoundingData, centroidBoundingData, triangleBounds, offset, count, strategy) {
  let axis = -1;
  let pos = 0;
  if (strategy === CENTER) {
    axis = getLongestEdgeIndex(centroidBoundingData);
    if (axis !== -1) {
      pos = (centroidBoundingData[axis] + centroidBoundingData[axis + 3]) / 2;
    }
  } else if (strategy === AVERAGE) {
    axis = getLongestEdgeIndex(nodeBoundingData);
    if (axis !== -1) {
      pos = getAverage(triangleBounds, offset, count, axis);
    }
  } else if (strategy === SAH) {
    const rootSurfaceArea = computeSurfaceArea(nodeBoundingData);
    let bestCost = TRIANGLE_INTERSECT_COST * count;
    const cStart = offset * 6;
    const cEnd = (offset + count) * 6;
    for (let a2 = 0; a2 < 3; a2++) {
      const axisLeft = centroidBoundingData[a2];
      const axisRight = centroidBoundingData[a2 + 3];
      const axisLength = axisRight - axisLeft;
      const binWidth = axisLength / BIN_COUNT;
      if (count < BIN_COUNT / 4) {
        const truncatedBins = [...sahBins];
        truncatedBins.length = count;
        let b = 0;
        for (let c2 = cStart; c2 < cEnd; c2 += 6, b++) {
          const bin = truncatedBins[b];
          bin.candidate = triangleBounds[c2 + 2 * a2];
          bin.count = 0;
          const {
            bounds,
            leftCacheBounds,
            rightCacheBounds
          } = bin;
          for (let d2 = 0; d2 < 3; d2++) {
            rightCacheBounds[d2] = Infinity;
            rightCacheBounds[d2 + 3] = -Infinity;
            leftCacheBounds[d2] = Infinity;
            leftCacheBounds[d2 + 3] = -Infinity;
            bounds[d2] = Infinity;
            bounds[d2 + 3] = -Infinity;
          }
          expandByTriangleBounds(c2, triangleBounds, bounds);
        }
        truncatedBins.sort(binsSort);
        let splitCount = count;
        for (let bi = 0; bi < splitCount; bi++) {
          const bin = truncatedBins[bi];
          while (bi + 1 < splitCount && truncatedBins[bi + 1].candidate === bin.candidate) {
            truncatedBins.splice(bi + 1, 1);
            splitCount--;
          }
        }
        for (let c2 = cStart; c2 < cEnd; c2 += 6) {
          const center = triangleBounds[c2 + 2 * a2];
          for (let bi = 0; bi < splitCount; bi++) {
            const bin = truncatedBins[bi];
            if (center >= bin.candidate) {
              expandByTriangleBounds(c2, triangleBounds, bin.rightCacheBounds);
            } else {
              expandByTriangleBounds(c2, triangleBounds, bin.leftCacheBounds);
              bin.count++;
            }
          }
        }
        for (let bi = 0; bi < splitCount; bi++) {
          const bin = truncatedBins[bi];
          const leftCount = bin.count;
          const rightCount = count - bin.count;
          const leftBounds2 = bin.leftCacheBounds;
          const rightBounds = bin.rightCacheBounds;
          let leftProb = 0;
          if (leftCount !== 0) {
            leftProb = computeSurfaceArea(leftBounds2) / rootSurfaceArea;
          }
          let rightProb = 0;
          if (rightCount !== 0) {
            rightProb = computeSurfaceArea(rightBounds) / rootSurfaceArea;
          }
          const cost = TRAVERSAL_COST + TRIANGLE_INTERSECT_COST * (leftProb * leftCount + rightProb * rightCount);
          if (cost < bestCost) {
            axis = a2;
            bestCost = cost;
            pos = bin.candidate;
          }
        }
      } else {
        for (let i5 = 0; i5 < BIN_COUNT; i5++) {
          const bin = sahBins[i5];
          bin.count = 0;
          bin.candidate = axisLeft + binWidth + i5 * binWidth;
          const bounds = bin.bounds;
          for (let d2 = 0; d2 < 3; d2++) {
            bounds[d2] = Infinity;
            bounds[d2 + 3] = -Infinity;
          }
        }
        for (let c2 = cStart; c2 < cEnd; c2 += 6) {
          const triCenter = triangleBounds[c2 + 2 * a2];
          const relativeCenter = triCenter - axisLeft;
          let binIndex = ~~(relativeCenter / binWidth);
          if (binIndex >= BIN_COUNT)
            binIndex = BIN_COUNT - 1;
          const bin = sahBins[binIndex];
          bin.count++;
          expandByTriangleBounds(c2, triangleBounds, bin.bounds);
        }
        const lastBin = sahBins[BIN_COUNT - 1];
        copyBounds(lastBin.bounds, lastBin.rightCacheBounds);
        for (let i5 = BIN_COUNT - 2; i5 >= 0; i5--) {
          const bin = sahBins[i5];
          const nextBin = sahBins[i5 + 1];
          unionBounds(bin.bounds, nextBin.rightCacheBounds, bin.rightCacheBounds);
        }
        let leftCount = 0;
        for (let i5 = 0; i5 < BIN_COUNT - 1; i5++) {
          const bin = sahBins[i5];
          const binCount = bin.count;
          const bounds = bin.bounds;
          const nextBin = sahBins[i5 + 1];
          const rightBounds = nextBin.rightCacheBounds;
          if (binCount !== 0) {
            if (leftCount === 0) {
              copyBounds(bounds, leftBounds);
            } else {
              unionBounds(bounds, leftBounds, leftBounds);
            }
          }
          leftCount += binCount;
          let leftProb = 0;
          let rightProb = 0;
          if (leftCount !== 0) {
            leftProb = computeSurfaceArea(leftBounds) / rootSurfaceArea;
          }
          const rightCount = count - leftCount;
          if (rightCount !== 0) {
            rightProb = computeSurfaceArea(rightBounds) / rootSurfaceArea;
          }
          const cost = TRAVERSAL_COST + TRIANGLE_INTERSECT_COST * (leftProb * leftCount + rightProb * rightCount);
          if (cost < bestCost) {
            axis = a2;
            bestCost = cost;
            pos = bin.candidate;
          }
        }
      }
    }
  } else {
    console.warn(`MeshBVH: Invalid build strategy value ${strategy} used.`);
  }
  return { axis, pos };
}
function getAverage(triangleBounds, offset, count, axis) {
  let avg = 0;
  for (let i5 = offset, end = offset + count; i5 < end; i5++) {
    avg += triangleBounds[i5 * 6 + axis * 2];
  }
  return avg / count;
}
function computeTriangleBounds(geo, fullBounds) {
  const posAttr = geo.attributes.position;
  const posArr = posAttr.array;
  const index = geo.index.array;
  const triCount = index.length / 3;
  const triangleBounds = new Float32Array(triCount * 6);
  const bufferOffset = posAttr.offset || 0;
  let stride = 3;
  if (posAttr.isInterleavedBufferAttribute) {
    stride = posAttr.data.stride;
  }
  for (let tri = 0; tri < triCount; tri++) {
    const tri3 = tri * 3;
    const tri6 = tri * 6;
    const ai = index[tri3 + 0] * stride + bufferOffset;
    const bi = index[tri3 + 1] * stride + bufferOffset;
    const ci = index[tri3 + 2] * stride + bufferOffset;
    for (let el = 0; el < 3; el++) {
      const a2 = posArr[ai + el];
      const b = posArr[bi + el];
      const c2 = posArr[ci + el];
      let min = a2;
      if (b < min)
        min = b;
      if (c2 < min)
        min = c2;
      let max = a2;
      if (b > max)
        max = b;
      if (c2 > max)
        max = c2;
      const halfExtents = (max - min) / 2;
      const el2 = el * 2;
      triangleBounds[tri6 + el2 + 0] = min + halfExtents;
      triangleBounds[tri6 + el2 + 1] = halfExtents + (Math.abs(min) + halfExtents) * FLOAT32_EPSILON;
      if (min < fullBounds[el])
        fullBounds[el] = min;
      if (max > fullBounds[el + 3])
        fullBounds[el + 3] = max;
    }
  }
  return triangleBounds;
}
function buildTree(geo, options) {
  function triggerProgress(trianglesProcessed) {
    if (onProgress) {
      onProgress(trianglesProcessed / totalTriangles);
    }
  }
  function splitNode(node, offset, count, centroidBoundingData = null, depth = 0) {
    if (!reachedMaxDepth && depth >= maxDepth) {
      reachedMaxDepth = true;
      if (verbose) {
        console.warn(`MeshBVH: Max depth of ${maxDepth} reached when generating BVH. Consider increasing maxDepth.`);
        console.warn(geo);
      }
    }
    if (count <= maxLeafTris || depth >= maxDepth) {
      triggerProgress(offset + count);
      node.offset = offset;
      node.count = count;
      return node;
    }
    const split = getOptimalSplit(node.boundingData, centroidBoundingData, triangleBounds, offset, count, strategy);
    if (split.axis === -1) {
      triggerProgress(offset + count);
      node.offset = offset;
      node.count = count;
      return node;
    }
    const splitOffset = partition(indexArray, triangleBounds, offset, count, split);
    if (splitOffset === offset || splitOffset === offset + count) {
      triggerProgress(offset + count);
      node.offset = offset;
      node.count = count;
    } else {
      node.splitAxis = split.axis;
      const left = new MeshBVHNode();
      const lstart = offset;
      const lcount = splitOffset - offset;
      node.left = left;
      left.boundingData = new Float32Array(6);
      getBounds(triangleBounds, lstart, lcount, left.boundingData, cacheCentroidBoundingData);
      splitNode(left, lstart, lcount, cacheCentroidBoundingData, depth + 1);
      const right = new MeshBVHNode();
      const rstart = splitOffset;
      const rcount = count - lcount;
      node.right = right;
      right.boundingData = new Float32Array(6);
      getBounds(triangleBounds, rstart, rcount, right.boundingData, cacheCentroidBoundingData);
      splitNode(right, rstart, rcount, cacheCentroidBoundingData, depth + 1);
    }
    return node;
  }
  ensureIndex(geo, options);
  const fullBounds = new Float32Array(6);
  const cacheCentroidBoundingData = new Float32Array(6);
  const triangleBounds = computeTriangleBounds(geo, fullBounds);
  const indexArray = geo.index.array;
  const maxDepth = options.maxDepth;
  const verbose = options.verbose;
  const maxLeafTris = options.maxLeafTris;
  const strategy = options.strategy;
  const onProgress = options.onProgress;
  const totalTriangles = geo.index.count / 3;
  let reachedMaxDepth = false;
  const roots = [];
  const ranges = getRootIndexRanges(geo);
  if (ranges.length === 1) {
    const range = ranges[0];
    const root = new MeshBVHNode();
    root.boundingData = fullBounds;
    getCentroidBounds(triangleBounds, range.offset, range.count, cacheCentroidBoundingData);
    splitNode(root, range.offset, range.count, cacheCentroidBoundingData);
    roots.push(root);
  } else {
    for (let range of ranges) {
      const root = new MeshBVHNode();
      root.boundingData = new Float32Array(6);
      getBounds(triangleBounds, range.offset, range.count, root.boundingData, cacheCentroidBoundingData);
      splitNode(root, range.offset, range.count, cacheCentroidBoundingData);
      roots.push(root);
    }
  }
  return roots;
}
function buildPackedTree(geo, options) {
  const roots = buildTree(geo, options);
  let float32Array;
  let uint32Array;
  let uint16Array;
  const packedRoots = [];
  const BufferConstructor = options.useSharedArrayBuffer ? SharedArrayBuffer : ArrayBuffer;
  for (let i5 = 0; i5 < roots.length; i5++) {
    const root = roots[i5];
    let nodeCount = countNodes(root);
    const buffer = new BufferConstructor(BYTES_PER_NODE * nodeCount);
    float32Array = new Float32Array(buffer);
    uint32Array = new Uint32Array(buffer);
    uint16Array = new Uint16Array(buffer);
    populateBuffer(0, root);
    packedRoots.push(buffer);
  }
  return packedRoots;
  function countNodes(node) {
    if (node.count) {
      return 1;
    } else {
      return 1 + countNodes(node.left) + countNodes(node.right);
    }
  }
  function populateBuffer(byteOffset, node) {
    const stride4Offset = byteOffset / 4;
    const stride2Offset = byteOffset / 2;
    const isLeaf = !!node.count;
    const boundingData = node.boundingData;
    for (let i5 = 0; i5 < 6; i5++) {
      float32Array[stride4Offset + i5] = boundingData[i5];
    }
    if (isLeaf) {
      const offset = node.offset;
      const count = node.count;
      uint32Array[stride4Offset + 6] = offset;
      uint16Array[stride2Offset + 14] = count;
      uint16Array[stride2Offset + 15] = IS_LEAFNODE_FLAG;
      return byteOffset + BYTES_PER_NODE;
    } else {
      const left = node.left;
      const right = node.right;
      const splitAxis = node.splitAxis;
      let nextUnusedPointer;
      nextUnusedPointer = populateBuffer(byteOffset + BYTES_PER_NODE, left);
      if (nextUnusedPointer / 4 > Math.pow(2, 32)) {
        throw new Error("MeshBVH: Cannot store child pointer greater than 32 bits.");
      }
      uint32Array[stride4Offset + 6] = nextUnusedPointer / 4;
      nextUnusedPointer = populateBuffer(nextUnusedPointer, right);
      uint32Array[stride4Offset + 7] = splitAxis;
      return nextUnusedPointer;
    }
  }
}

// node_modules/three-mesh-bvh/src/core/castFunctions.js
init_three_module();

// node_modules/three-mesh-bvh/src/math/OrientedBox.js
init_three_module();

// node_modules/three-mesh-bvh/src/math/SeparatingAxisBounds.js
init_three_module();
var SeparatingAxisBounds = class {
  constructor() {
    this.min = Infinity;
    this.max = -Infinity;
  }
  setFromPointsField(points, field) {
    let min = Infinity;
    let max = -Infinity;
    for (let i5 = 0, l2 = points.length; i5 < l2; i5++) {
      const p = points[i5];
      const val = p[field];
      min = val < min ? val : min;
      max = val > max ? val : max;
    }
    this.min = min;
    this.max = max;
  }
  setFromPoints(axis, points) {
    let min = Infinity;
    let max = -Infinity;
    for (let i5 = 0, l2 = points.length; i5 < l2; i5++) {
      const p = points[i5];
      const val = axis.dot(p);
      min = val < min ? val : min;
      max = val > max ? val : max;
    }
    this.min = min;
    this.max = max;
  }
  isSeparated(other) {
    return this.min > other.max || other.min > this.max;
  }
};
SeparatingAxisBounds.prototype.setFromBox = function() {
  const p = new Vector3();
  return function setFromBox(axis, box) {
    const boxMin = box.min;
    const boxMax = box.max;
    let min = Infinity;
    let max = -Infinity;
    for (let x = 0; x <= 1; x++) {
      for (let y = 0; y <= 1; y++) {
        for (let z = 0; z <= 1; z++) {
          p.x = boxMin.x * x + boxMax.x * (1 - x);
          p.y = boxMin.y * y + boxMax.y * (1 - y);
          p.z = boxMin.z * z + boxMax.z * (1 - z);
          const val = axis.dot(p);
          min = Math.min(val, min);
          max = Math.max(val, max);
        }
      }
    }
    this.min = min;
    this.max = max;
  };
}();
var areIntersecting = function() {
  const cacheSatBounds = new SeparatingAxisBounds();
  return function areIntersecting2(shape1, shape2) {
    const points1 = shape1.points;
    const satAxes1 = shape1.satAxes;
    const satBounds1 = shape1.satBounds;
    const points2 = shape2.points;
    const satAxes2 = shape2.satAxes;
    const satBounds2 = shape2.satBounds;
    for (let i5 = 0; i5 < 3; i5++) {
      const sb = satBounds1[i5];
      const sa = satAxes1[i5];
      cacheSatBounds.setFromPoints(sa, points2);
      if (sb.isSeparated(cacheSatBounds))
        return false;
    }
    for (let i5 = 0; i5 < 3; i5++) {
      const sb = satBounds2[i5];
      const sa = satAxes2[i5];
      cacheSatBounds.setFromPoints(sa, points1);
      if (sb.isSeparated(cacheSatBounds))
        return false;
    }
  };
}();

// node_modules/three-mesh-bvh/src/math/ExtendedTriangle.js
init_three_module();

// node_modules/three-mesh-bvh/src/math/MathUtilities.js
init_three_module();
var closestPointLineToLine = function() {
  const dir1 = new Vector3();
  const dir2 = new Vector3();
  const v02 = new Vector3();
  return function closestPointLineToLine2(l1, l2, result) {
    const v0 = l1.start;
    const v10 = dir1;
    const v22 = l2.start;
    const v32 = dir2;
    v02.subVectors(v0, v22);
    dir1.subVectors(l1.end, l2.start);
    dir2.subVectors(l2.end, l2.start);
    const d0232 = v02.dot(v32);
    const d3210 = v32.dot(v10);
    const d3232 = v32.dot(v32);
    const d0210 = v02.dot(v10);
    const d1010 = v10.dot(v10);
    const denom = d1010 * d3232 - d3210 * d3210;
    let d2, d22;
    if (denom !== 0) {
      d2 = (d0232 * d3210 - d0210 * d3232) / denom;
    } else {
      d2 = 0;
    }
    d22 = (d0232 + d2 * d3210) / d3232;
    result.x = d2;
    result.y = d22;
  };
}();
var closestPointsSegmentToSegment = function() {
  const paramResult = new Vector2();
  const temp12 = new Vector3();
  const temp22 = new Vector3();
  return function closestPointsSegmentToSegment2(l1, l2, target1, target2) {
    closestPointLineToLine(l1, l2, paramResult);
    let d2 = paramResult.x;
    let d22 = paramResult.y;
    if (d2 >= 0 && d2 <= 1 && d22 >= 0 && d22 <= 1) {
      l1.at(d2, target1);
      l2.at(d22, target2);
      return;
    } else if (d2 >= 0 && d2 <= 1) {
      if (d22 < 0) {
        l2.at(0, target2);
      } else {
        l2.at(1, target2);
      }
      l1.closestPointToPoint(target2, true, target1);
      return;
    } else if (d22 >= 0 && d22 <= 1) {
      if (d2 < 0) {
        l1.at(0, target1);
      } else {
        l1.at(1, target1);
      }
      l2.closestPointToPoint(target1, true, target2);
      return;
    } else {
      let p;
      if (d2 < 0) {
        p = l1.start;
      } else {
        p = l1.end;
      }
      let p2;
      if (d22 < 0) {
        p2 = l2.start;
      } else {
        p2 = l2.end;
      }
      const closestPoint = temp12;
      const closestPoint2 = temp22;
      l1.closestPointToPoint(p2, true, temp12);
      l2.closestPointToPoint(p, true, temp22);
      if (closestPoint.distanceToSquared(p2) <= closestPoint2.distanceToSquared(p)) {
        target1.copy(closestPoint);
        target2.copy(p2);
        return;
      } else {
        target1.copy(p);
        target2.copy(closestPoint2);
        return;
      }
    }
  };
}();
var sphereIntersectTriangle = function() {
  const closestPointTemp = new Vector3();
  const projectedPointTemp = new Vector3();
  const planeTemp = new Plane();
  const lineTemp = new Line3();
  return function sphereIntersectTriangle2(sphere, triangle) {
    const { radius, center } = sphere;
    const { a: a2, b, c: c2 } = triangle;
    lineTemp.start = a2;
    lineTemp.end = b;
    const closestPoint1 = lineTemp.closestPointToPoint(center, true, closestPointTemp);
    if (closestPoint1.distanceTo(center) <= radius)
      return true;
    lineTemp.start = a2;
    lineTemp.end = c2;
    const closestPoint2 = lineTemp.closestPointToPoint(center, true, closestPointTemp);
    if (closestPoint2.distanceTo(center) <= radius)
      return true;
    lineTemp.start = b;
    lineTemp.end = c2;
    const closestPoint3 = lineTemp.closestPointToPoint(center, true, closestPointTemp);
    if (closestPoint3.distanceTo(center) <= radius)
      return true;
    const plane = triangle.getPlane(planeTemp);
    const dp = Math.abs(plane.distanceToPoint(center));
    if (dp <= radius) {
      const pp = plane.projectPoint(center, projectedPointTemp);
      const cp = triangle.containsPoint(pp);
      if (cp)
        return true;
    }
    return false;
  };
}();

// node_modules/three-mesh-bvh/src/math/ExtendedTriangle.js
var ExtendedTriangle = class extends Triangle {
  constructor(...args) {
    super(...args);
    this.isExtendedTriangle = true;
    this.satAxes = new Array(4).fill().map(() => new Vector3());
    this.satBounds = new Array(4).fill().map(() => new SeparatingAxisBounds());
    this.points = [this.a, this.b, this.c];
    this.sphere = new Sphere();
    this.plane = new Plane();
    this.needsUpdate = false;
  }
  intersectsSphere(sphere) {
    return sphereIntersectTriangle(sphere, this);
  }
  update() {
    const a2 = this.a;
    const b = this.b;
    const c2 = this.c;
    const points = this.points;
    const satAxes = this.satAxes;
    const satBounds = this.satBounds;
    const axis0 = satAxes[0];
    const sab0 = satBounds[0];
    this.getNormal(axis0);
    sab0.setFromPoints(axis0, points);
    const axis1 = satAxes[1];
    const sab1 = satBounds[1];
    axis1.subVectors(a2, b);
    sab1.setFromPoints(axis1, points);
    const axis2 = satAxes[2];
    const sab2 = satBounds[2];
    axis2.subVectors(b, c2);
    sab2.setFromPoints(axis2, points);
    const axis3 = satAxes[3];
    const sab3 = satBounds[3];
    axis3.subVectors(c2, a2);
    sab3.setFromPoints(axis3, points);
    this.sphere.setFromPoints(this.points);
    this.plane.setFromNormalAndCoplanarPoint(axis0, a2);
    this.needsUpdate = false;
  }
};
ExtendedTriangle.prototype.closestPointToSegment = function() {
  const point1 = new Vector3();
  const point2 = new Vector3();
  const edge = new Line3();
  return function distanceToSegment(segment, target1 = null, target2 = null) {
    const { start, end } = segment;
    const points = this.points;
    let distSq;
    let closestDistanceSq = Infinity;
    for (let i5 = 0; i5 < 3; i5++) {
      const nexti = (i5 + 1) % 3;
      edge.start.copy(points[i5]);
      edge.end.copy(points[nexti]);
      closestPointsSegmentToSegment(edge, segment, point1, point2);
      distSq = point1.distanceToSquared(point2);
      if (distSq < closestDistanceSq) {
        closestDistanceSq = distSq;
        if (target1)
          target1.copy(point1);
        if (target2)
          target2.copy(point2);
      }
    }
    this.closestPointToPoint(start, point1);
    distSq = start.distanceToSquared(point1);
    if (distSq < closestDistanceSq) {
      closestDistanceSq = distSq;
      if (target1)
        target1.copy(point1);
      if (target2)
        target2.copy(start);
    }
    this.closestPointToPoint(end, point1);
    distSq = end.distanceToSquared(point1);
    if (distSq < closestDistanceSq) {
      closestDistanceSq = distSq;
      if (target1)
        target1.copy(point1);
      if (target2)
        target2.copy(end);
    }
    return Math.sqrt(closestDistanceSq);
  };
}();
ExtendedTriangle.prototype.intersectsTriangle = function() {
  const saTri2 = new ExtendedTriangle();
  const arr1 = new Array(3);
  const arr2 = new Array(3);
  const cachedSatBounds = new SeparatingAxisBounds();
  const cachedSatBounds2 = new SeparatingAxisBounds();
  const cachedAxis = new Vector3();
  const dir1 = new Vector3();
  const dir2 = new Vector3();
  const tempDir = new Vector3();
  const edge = new Line3();
  const edge1 = new Line3();
  const edge2 = new Line3();
  return function intersectsTriangle(other, target2 = null) {
    if (this.needsUpdate) {
      this.update();
    }
    if (!other.isExtendedTriangle) {
      saTri2.copy(other);
      saTri2.update();
      other = saTri2;
    } else if (other.needsUpdate) {
      other.update();
    }
    const plane1 = this.plane;
    const plane2 = other.plane;
    if (Math.abs(plane1.normal.dot(plane2.normal)) > 1 - 1e-10) {
      const satBounds1 = this.satBounds;
      const satAxes1 = this.satAxes;
      arr2[0] = other.a;
      arr2[1] = other.b;
      arr2[2] = other.c;
      for (let i5 = 0; i5 < 4; i5++) {
        const sb = satBounds1[i5];
        const sa = satAxes1[i5];
        cachedSatBounds.setFromPoints(sa, arr2);
        if (sb.isSeparated(cachedSatBounds))
          return false;
      }
      const satBounds2 = other.satBounds;
      const satAxes2 = other.satAxes;
      arr1[0] = this.a;
      arr1[1] = this.b;
      arr1[2] = this.c;
      for (let i5 = 0; i5 < 4; i5++) {
        const sb = satBounds2[i5];
        const sa = satAxes2[i5];
        cachedSatBounds.setFromPoints(sa, arr1);
        if (sb.isSeparated(cachedSatBounds))
          return false;
      }
      for (let i5 = 0; i5 < 4; i5++) {
        const sa1 = satAxes1[i5];
        for (let i22 = 0; i22 < 4; i22++) {
          const sa2 = satAxes2[i22];
          cachedAxis.crossVectors(sa1, sa2);
          cachedSatBounds.setFromPoints(cachedAxis, arr1);
          cachedSatBounds2.setFromPoints(cachedAxis, arr2);
          if (cachedSatBounds.isSeparated(cachedSatBounds2))
            return false;
        }
      }
      if (target2) {
        console.warn("ExtendedTriangle.intersectsTriangle: Triangles are coplanar which does not support an output edge. Setting edge to 0, 0, 0.");
        target2.start.set(0, 0, 0);
        target2.end.set(0, 0, 0);
      }
      return true;
    } else {
      const points1 = this.points;
      let found1 = false;
      let count1 = 0;
      for (let i5 = 0; i5 < 3; i5++) {
        const p1 = points1[i5];
        const p2 = points1[(i5 + 1) % 3];
        edge.start.copy(p1);
        edge.end.copy(p2);
        edge.delta(dir1);
        if (plane2.normal.dot(dir1) === 0 && plane2.distanceToPoint(edge.start) === 0) {
          edge1.copy(edge);
          count1 = 2;
          break;
        } else if (plane2.intersectLine(edge, found1 ? edge1.start : edge1.end)) {
          count1++;
          if (found1) {
            break;
          }
          found1 = true;
        }
      }
      if (count1 !== 2) {
        return false;
      }
      const points2 = other.points;
      let found2 = false;
      let count2 = 0;
      for (let i5 = 0; i5 < 3; i5++) {
        const p1 = points2[i5];
        const p2 = points2[(i5 + 1) % 3];
        edge.start.copy(p1);
        edge.end.copy(p2);
        edge.delta(dir2);
        if (plane1.normal.dot(dir2) === 0 && plane1.distanceToPoint(edge.start) === 0) {
          edge2.copy(edge);
          count2 = 2;
          break;
        } else if (plane1.intersectLine(edge, found2 ? edge2.start : edge2.end)) {
          count2++;
          if (found2) {
            break;
          }
          found2 = true;
        }
      }
      if (count2 !== 2) {
        return false;
      }
      edge1.delta(dir1);
      edge2.delta(dir2);
      if (dir1.dot(dir2) < 0) {
        let tmp = edge2.start;
        edge2.start = edge2.end;
        edge2.end = tmp;
      }
      const s1 = edge1.start.dot(dir1);
      const e1 = edge1.end.dot(dir1);
      const s22 = edge2.start.dot(dir1);
      const e22 = edge2.end.dot(dir1);
      const separated1 = e1 < s22;
      const separated2 = s1 < e22;
      if (s1 !== e22 && s22 !== e1 && separated1 === separated2) {
        return false;
      }
      if (target2) {
        tempDir.subVectors(edge1.start, edge2.start);
        if (tempDir.dot(dir1) > 0) {
          target2.start.copy(edge1.start);
        } else {
          target2.start.copy(edge2.start);
        }
        tempDir.subVectors(edge1.end, edge2.end);
        if (tempDir.dot(dir1) < 0) {
          target2.end.copy(edge1.end);
        } else {
          target2.end.copy(edge2.end);
        }
      }
      return true;
    }
  };
}();
ExtendedTriangle.prototype.distanceToPoint = function() {
  const target2 = new Vector3();
  return function distanceToPoint(point) {
    this.closestPointToPoint(point, target2);
    return point.distanceTo(target2);
  };
}();
ExtendedTriangle.prototype.distanceToTriangle = function() {
  const point = new Vector3();
  const point2 = new Vector3();
  const cornerFields = ["a", "b", "c"];
  const line1 = new Line3();
  const line2 = new Line3();
  return function distanceToTriangle(other, target1 = null, target2 = null) {
    const lineTarget = target1 || target2 ? line1 : null;
    if (this.intersectsTriangle(other, lineTarget)) {
      if (target1 || target2) {
        if (target1)
          lineTarget.getCenter(target1);
        if (target2)
          lineTarget.getCenter(target2);
      }
      return 0;
    }
    let closestDistanceSq = Infinity;
    for (let i5 = 0; i5 < 3; i5++) {
      let dist;
      const field = cornerFields[i5];
      const otherVec = other[field];
      this.closestPointToPoint(otherVec, point);
      dist = otherVec.distanceToSquared(point);
      if (dist < closestDistanceSq) {
        closestDistanceSq = dist;
        if (target1)
          target1.copy(point);
        if (target2)
          target2.copy(otherVec);
      }
      const thisVec = this[field];
      other.closestPointToPoint(thisVec, point);
      dist = thisVec.distanceToSquared(point);
      if (dist < closestDistanceSq) {
        closestDistanceSq = dist;
        if (target1)
          target1.copy(thisVec);
        if (target2)
          target2.copy(point);
      }
    }
    for (let i5 = 0; i5 < 3; i5++) {
      const f11 = cornerFields[i5];
      const f12 = cornerFields[(i5 + 1) % 3];
      line1.set(this[f11], this[f12]);
      for (let i22 = 0; i22 < 3; i22++) {
        const f21 = cornerFields[i22];
        const f22 = cornerFields[(i22 + 1) % 3];
        line2.set(other[f21], other[f22]);
        closestPointsSegmentToSegment(line1, line2, point, point2);
        const dist = point.distanceToSquared(point2);
        if (dist < closestDistanceSq) {
          closestDistanceSq = dist;
          if (target1)
            target1.copy(point);
          if (target2)
            target2.copy(point2);
        }
      }
    }
    return Math.sqrt(closestDistanceSq);
  };
}();

// node_modules/three-mesh-bvh/src/math/OrientedBox.js
var OrientedBox = class extends Box3 {
  constructor(...args) {
    super(...args);
    this.isOrientedBox = true;
    this.matrix = new Matrix4();
    this.invMatrix = new Matrix4();
    this.points = new Array(8).fill().map(() => new Vector3());
    this.satAxes = new Array(3).fill().map(() => new Vector3());
    this.satBounds = new Array(3).fill().map(() => new SeparatingAxisBounds());
    this.alignedSatBounds = new Array(3).fill().map(() => new SeparatingAxisBounds());
    this.needsUpdate = false;
  }
  set(min, max, matrix2) {
    super.set(min, max);
    this.matrix.copy(matrix2);
    this.needsUpdate = true;
  }
  copy(other) {
    super.copy(other);
    this.matrix.copy(other.matrix);
    this.needsUpdate = true;
  }
};
OrientedBox.prototype.update = function() {
  return function update() {
    const matrix2 = this.matrix;
    const min = this.min;
    const max = this.max;
    const points = this.points;
    for (let x = 0; x <= 1; x++) {
      for (let y = 0; y <= 1; y++) {
        for (let z = 0; z <= 1; z++) {
          const i5 = (1 << 0) * x | (1 << 1) * y | (1 << 2) * z;
          const v4 = points[i5];
          v4.x = x ? max.x : min.x;
          v4.y = y ? max.y : min.y;
          v4.z = z ? max.z : min.z;
          v4.applyMatrix4(matrix2);
        }
      }
    }
    const satBounds = this.satBounds;
    const satAxes = this.satAxes;
    const minVec = points[0];
    for (let i5 = 0; i5 < 3; i5++) {
      const axis = satAxes[i5];
      const sb = satBounds[i5];
      const index = 1 << i5;
      const pi = points[index];
      axis.subVectors(minVec, pi);
      sb.setFromPoints(axis, points);
    }
    const alignedSatBounds = this.alignedSatBounds;
    alignedSatBounds[0].setFromPointsField(points, "x");
    alignedSatBounds[1].setFromPointsField(points, "y");
    alignedSatBounds[2].setFromPointsField(points, "z");
    this.invMatrix.copy(this.matrix).invert();
    this.needsUpdate = false;
  };
}();
OrientedBox.prototype.intersectsBox = function() {
  const aabbBounds = new SeparatingAxisBounds();
  return function intersectsBox(box) {
    if (this.needsUpdate) {
      this.update();
    }
    const min = box.min;
    const max = box.max;
    const satBounds = this.satBounds;
    const satAxes = this.satAxes;
    const alignedSatBounds = this.alignedSatBounds;
    aabbBounds.min = min.x;
    aabbBounds.max = max.x;
    if (alignedSatBounds[0].isSeparated(aabbBounds))
      return false;
    aabbBounds.min = min.y;
    aabbBounds.max = max.y;
    if (alignedSatBounds[1].isSeparated(aabbBounds))
      return false;
    aabbBounds.min = min.z;
    aabbBounds.max = max.z;
    if (alignedSatBounds[2].isSeparated(aabbBounds))
      return false;
    for (let i5 = 0; i5 < 3; i5++) {
      const axis = satAxes[i5];
      const sb = satBounds[i5];
      aabbBounds.setFromBox(axis, box);
      if (sb.isSeparated(aabbBounds))
        return false;
    }
    return true;
  };
}();
OrientedBox.prototype.intersectsTriangle = function() {
  const saTri = new ExtendedTriangle();
  const pointsArr = new Array(3);
  const cachedSatBounds = new SeparatingAxisBounds();
  const cachedSatBounds2 = new SeparatingAxisBounds();
  const cachedAxis = new Vector3();
  return function intersectsTriangle(triangle) {
    if (this.needsUpdate) {
      this.update();
    }
    if (!triangle.isExtendedTriangle) {
      saTri.copy(triangle);
      saTri.update();
      triangle = saTri;
    } else if (triangle.needsUpdate) {
      triangle.update();
    }
    const satBounds = this.satBounds;
    const satAxes = this.satAxes;
    pointsArr[0] = triangle.a;
    pointsArr[1] = triangle.b;
    pointsArr[2] = triangle.c;
    for (let i5 = 0; i5 < 3; i5++) {
      const sb = satBounds[i5];
      const sa = satAxes[i5];
      cachedSatBounds.setFromPoints(sa, pointsArr);
      if (sb.isSeparated(cachedSatBounds))
        return false;
    }
    const triSatBounds = triangle.satBounds;
    const triSatAxes = triangle.satAxes;
    const points = this.points;
    for (let i5 = 0; i5 < 3; i5++) {
      const sb = triSatBounds[i5];
      const sa = triSatAxes[i5];
      cachedSatBounds.setFromPoints(sa, points);
      if (sb.isSeparated(cachedSatBounds))
        return false;
    }
    for (let i5 = 0; i5 < 3; i5++) {
      const sa1 = satAxes[i5];
      for (let i22 = 0; i22 < 4; i22++) {
        const sa2 = triSatAxes[i22];
        cachedAxis.crossVectors(sa1, sa2);
        cachedSatBounds.setFromPoints(cachedAxis, pointsArr);
        cachedSatBounds2.setFromPoints(cachedAxis, points);
        if (cachedSatBounds.isSeparated(cachedSatBounds2))
          return false;
      }
    }
    return true;
  };
}();
OrientedBox.prototype.closestPointToPoint = function() {
  return function closestPointToPoint(point, target1) {
    if (this.needsUpdate) {
      this.update();
    }
    target1.copy(point).applyMatrix4(this.invMatrix).clamp(this.min, this.max).applyMatrix4(this.matrix);
    return target1;
  };
}();
OrientedBox.prototype.distanceToPoint = function() {
  const target2 = new Vector3();
  return function distanceToPoint(point) {
    this.closestPointToPoint(point, target2);
    return point.distanceTo(target2);
  };
}();
OrientedBox.prototype.distanceToBox = function() {
  const xyzFields2 = ["x", "y", "z"];
  const segments1 = new Array(12).fill().map(() => new Line3());
  const segments2 = new Array(12).fill().map(() => new Line3());
  const point1 = new Vector3();
  const point2 = new Vector3();
  return function distanceToBox(box, threshold = 0, target1 = null, target2 = null) {
    if (this.needsUpdate) {
      this.update();
    }
    if (this.intersectsBox(box)) {
      if (target1 || target2) {
        box.getCenter(point2);
        this.closestPointToPoint(point2, point1);
        box.closestPointToPoint(point1, point2);
        if (target1)
          target1.copy(point1);
        if (target2)
          target2.copy(point2);
      }
      return 0;
    }
    const threshold2 = threshold * threshold;
    const min = box.min;
    const max = box.max;
    const points = this.points;
    let closestDistanceSq = Infinity;
    for (let i5 = 0; i5 < 8; i5++) {
      const p = points[i5];
      point2.copy(p).clamp(min, max);
      const dist = p.distanceToSquared(point2);
      if (dist < closestDistanceSq) {
        closestDistanceSq = dist;
        if (target1)
          target1.copy(p);
        if (target2)
          target2.copy(point2);
        if (dist < threshold2)
          return Math.sqrt(dist);
      }
    }
    let count = 0;
    for (let i5 = 0; i5 < 3; i5++) {
      for (let i1 = 0; i1 <= 1; i1++) {
        for (let i22 = 0; i22 <= 1; i22++) {
          const nextIndex = (i5 + 1) % 3;
          const nextIndex2 = (i5 + 2) % 3;
          const index = i1 << nextIndex | i22 << nextIndex2;
          const index2 = 1 << i5 | i1 << nextIndex | i22 << nextIndex2;
          const p1 = points[index];
          const p2 = points[index2];
          const line1 = segments1[count];
          line1.set(p1, p2);
          const f1 = xyzFields2[i5];
          const f2 = xyzFields2[nextIndex];
          const f3 = xyzFields2[nextIndex2];
          const line2 = segments2[count];
          const start = line2.start;
          const end = line2.end;
          start[f1] = min[f1];
          start[f2] = i1 ? min[f2] : max[f2];
          start[f3] = i22 ? min[f3] : max[f2];
          end[f1] = max[f1];
          end[f2] = i1 ? min[f2] : max[f2];
          end[f3] = i22 ? min[f3] : max[f2];
          count++;
        }
      }
    }
    for (let x = 0; x <= 1; x++) {
      for (let y = 0; y <= 1; y++) {
        for (let z = 0; z <= 1; z++) {
          point2.x = x ? max.x : min.x;
          point2.y = y ? max.y : min.y;
          point2.z = z ? max.z : min.z;
          this.closestPointToPoint(point2, point1);
          const dist = point2.distanceToSquared(point1);
          if (dist < closestDistanceSq) {
            closestDistanceSq = dist;
            if (target1)
              target1.copy(point1);
            if (target2)
              target2.copy(point2);
            if (dist < threshold2)
              return Math.sqrt(dist);
          }
        }
      }
    }
    for (let i5 = 0; i5 < 12; i5++) {
      const l1 = segments1[i5];
      for (let i22 = 0; i22 < 12; i22++) {
        const l2 = segments2[i22];
        closestPointsSegmentToSegment(l1, l2, point1, point2);
        const dist = point1.distanceToSquared(point2);
        if (dist < closestDistanceSq) {
          closestDistanceSq = dist;
          if (target1)
            target1.copy(point1);
          if (target2)
            target2.copy(point2);
          if (dist < threshold2)
            return Math.sqrt(dist);
        }
      }
    }
    return Math.sqrt(closestDistanceSq);
  };
}();

// node_modules/three-mesh-bvh/src/utils/ThreeRayIntersectUtilities.js
init_three_module();
var vA = new Vector3();
var vB = new Vector3();
var vC = new Vector3();
var uvA = new Vector2();
var uvB = new Vector2();
var uvC = new Vector2();
var intersectionPoint = new Vector3();
function checkIntersection(ray2, pA, pB, pC, point, side) {
  let intersect;
  if (side === BackSide) {
    intersect = ray2.intersectTriangle(pC, pB, pA, true, point);
  } else {
    intersect = ray2.intersectTriangle(pA, pB, pC, side !== DoubleSide, point);
  }
  if (intersect === null)
    return null;
  const distance = ray2.origin.distanceTo(point);
  return {
    distance,
    point: point.clone()
  };
}
function checkBufferGeometryIntersection(ray2, position2, uv, a2, b, c2, side) {
  vA.fromBufferAttribute(position2, a2);
  vB.fromBufferAttribute(position2, b);
  vC.fromBufferAttribute(position2, c2);
  const intersection = checkIntersection(ray2, vA, vB, vC, intersectionPoint, side);
  if (intersection) {
    if (uv) {
      uvA.fromBufferAttribute(uv, a2);
      uvB.fromBufferAttribute(uv, b);
      uvC.fromBufferAttribute(uv, c2);
      intersection.uv = Triangle.getUV(intersectionPoint, vA, vB, vC, uvA, uvB, uvC, new Vector2());
    }
    const face = {
      a: a2,
      b,
      c: c2,
      normal: new Vector3(),
      materialIndex: 0
    };
    Triangle.getNormal(vA, vB, vC, face.normal);
    intersection.face = face;
    intersection.faceIndex = a2;
  }
  return intersection;
}
function intersectTri(geo, side, ray2, tri, intersections) {
  const triOffset = tri * 3;
  const a2 = geo.index.getX(triOffset);
  const b = geo.index.getX(triOffset + 1);
  const c2 = geo.index.getX(triOffset + 2);
  const intersection = checkBufferGeometryIntersection(ray2, geo.attributes.position, geo.attributes.uv, a2, b, c2, side);
  if (intersection) {
    intersection.faceIndex = tri;
    if (intersections)
      intersections.push(intersection);
    return intersection;
  }
  return null;
}

// node_modules/three-mesh-bvh/src/utils/GeometryRayIntersectUtilities.js
function intersectTris(geo, side, ray2, offset, count, intersections) {
  for (let i5 = offset, end = offset + count; i5 < end; i5++) {
    intersectTri(geo, side, ray2, i5, intersections);
  }
}
function intersectClosestTri(geo, side, ray2, offset, count) {
  let dist = Infinity;
  let res = null;
  for (let i5 = offset, end = offset + count; i5 < end; i5++) {
    const intersection = intersectTri(geo, side, ray2, i5);
    if (intersection && intersection.distance < dist) {
      res = intersection;
      dist = intersection.distance;
    }
  }
  return res;
}
function convertRaycastIntersect(hit, object, raycaster) {
  if (hit === null) {
    return null;
  }
  hit.point.applyMatrix4(object.matrixWorld);
  hit.distance = hit.point.distanceTo(raycaster.ray.origin);
  hit.object = object;
  if (hit.distance < raycaster.near || hit.distance > raycaster.far) {
    return null;
  } else {
    return hit;
  }
}

// node_modules/three-mesh-bvh/src/utils/TriangleUtilities.js
init_three_module();
function setTriangle(tri, i5, index, pos) {
  const ta = tri.a;
  const tb = tri.b;
  const tc = tri.c;
  let i0 = i5;
  let i1 = i5 + 1;
  let i22 = i5 + 2;
  if (index) {
    i0 = index.getX(i5);
    i1 = index.getX(i5 + 1);
    i22 = index.getX(i5 + 2);
  }
  ta.x = pos.getX(i0);
  ta.y = pos.getY(i0);
  ta.z = pos.getZ(i0);
  tb.x = pos.getX(i1);
  tb.y = pos.getY(i1);
  tb.z = pos.getZ(i1);
  tc.x = pos.getX(i22);
  tc.y = pos.getY(i22);
  tc.z = pos.getZ(i22);
}
function iterateOverTriangles(offset, count, geometry, intersectsTriangleFunc, contained, depth, triangle) {
  const index = geometry.index;
  const pos = geometry.attributes.position;
  for (let i5 = offset, l2 = count + offset; i5 < l2; i5++) {
    setTriangle(triangle, i5 * 3, index, pos);
    triangle.needsUpdate = true;
    if (intersectsTriangleFunc(triangle, i5, contained, depth)) {
      return true;
    }
  }
  return false;
}
var tempV1 = new Vector3();
var tempV2 = new Vector3();
var tempV3 = new Vector3();
var tempUV1 = new Vector2();
var tempUV2 = new Vector2();
var tempUV3 = new Vector2();

// node_modules/three-mesh-bvh/src/utils/PrimitivePool.js
var PrimitivePool = class {
  constructor(getNewPrimitive) {
    this._getNewPrimitive = getNewPrimitive;
    this._primitives = [];
  }
  getPrimitive() {
    const primitives = this._primitives;
    if (primitives.length === 0) {
      return this._getNewPrimitive();
    } else {
      return primitives.pop();
    }
  }
  releasePrimitive(primitive) {
    this._primitives.push(primitive);
  }
};

// node_modules/three-mesh-bvh/src/core/nodeBufferFunctions.js
function IS_LEAF(n16, uint16Array) {
  return uint16Array[n16 + 15] === 65535;
}
function OFFSET(n32, uint32Array) {
  return uint32Array[n32 + 6];
}
function COUNT(n16, uint16Array) {
  return uint16Array[n16 + 14];
}
function LEFT_NODE(n32) {
  return n32 + 8;
}
function RIGHT_NODE(n32, uint32Array) {
  return uint32Array[n32 + 6];
}
function SPLIT_AXIS(n32, uint32Array) {
  return uint32Array[n32 + 7];
}
function BOUNDING_DATA_INDEX(n32) {
  return n32;
}

// node_modules/three-mesh-bvh/src/core/castFunctions.js
var boundingBox = new Box3();
var boxIntersection = new Vector3();
var xyzFields = ["x", "y", "z"];
function raycast(nodeIndex32, geometry, side, ray2, intersects) {
  let nodeIndex16 = nodeIndex32 * 2, float32Array = _float32Array, uint16Array = _uint16Array, uint32Array = _uint32Array;
  const isLeaf = IS_LEAF(nodeIndex16, uint16Array);
  if (isLeaf) {
    const offset = OFFSET(nodeIndex32, uint32Array);
    const count = COUNT(nodeIndex16, uint16Array);
    intersectTris(geometry, side, ray2, offset, count, intersects);
  } else {
    const leftIndex = LEFT_NODE(nodeIndex32);
    if (intersectRay(leftIndex, float32Array, ray2, boxIntersection)) {
      raycast(leftIndex, geometry, side, ray2, intersects);
    }
    const rightIndex = RIGHT_NODE(nodeIndex32, uint32Array);
    if (intersectRay(rightIndex, float32Array, ray2, boxIntersection)) {
      raycast(rightIndex, geometry, side, ray2, intersects);
    }
  }
}
function raycastFirst(nodeIndex32, geometry, side, ray2) {
  let nodeIndex16 = nodeIndex32 * 2, float32Array = _float32Array, uint16Array = _uint16Array, uint32Array = _uint32Array;
  const isLeaf = IS_LEAF(nodeIndex16, uint16Array);
  if (isLeaf) {
    const offset = OFFSET(nodeIndex32, uint32Array);
    const count = COUNT(nodeIndex16, uint16Array);
    return intersectClosestTri(geometry, side, ray2, offset, count);
  } else {
    const splitAxis = SPLIT_AXIS(nodeIndex32, uint32Array);
    const xyzAxis = xyzFields[splitAxis];
    const rayDir = ray2.direction[xyzAxis];
    const leftToRight = rayDir >= 0;
    let c1, c2;
    if (leftToRight) {
      c1 = LEFT_NODE(nodeIndex32);
      c2 = RIGHT_NODE(nodeIndex32, uint32Array);
    } else {
      c1 = RIGHT_NODE(nodeIndex32, uint32Array);
      c2 = LEFT_NODE(nodeIndex32);
    }
    const c1Intersection = intersectRay(c1, float32Array, ray2, boxIntersection);
    const c1Result = c1Intersection ? raycastFirst(c1, geometry, side, ray2) : null;
    if (c1Result) {
      const point = c1Result.point[xyzAxis];
      const isOutside = leftToRight ? point <= float32Array[c2 + splitAxis] : point >= float32Array[c2 + splitAxis + 3];
      if (isOutside) {
        return c1Result;
      }
    }
    const c2Intersection = intersectRay(c2, float32Array, ray2, boxIntersection);
    const c2Result = c2Intersection ? raycastFirst(c2, geometry, side, ray2) : null;
    if (c1Result && c2Result) {
      return c1Result.distance <= c2Result.distance ? c1Result : c2Result;
    } else {
      return c1Result || c2Result || null;
    }
  }
}
var shapecast = function() {
  let _box12, _box22;
  const boxStack = [];
  const boxPool = new PrimitivePool(() => new Box3());
  return function shapecast2(...args) {
    _box12 = boxPool.getPrimitive();
    _box22 = boxPool.getPrimitive();
    boxStack.push(_box12, _box22);
    const result = shapecastTraverse(...args);
    boxPool.releasePrimitive(_box12);
    boxPool.releasePrimitive(_box22);
    boxStack.pop();
    boxStack.pop();
    const length = boxStack.length;
    if (length > 0) {
      _box22 = boxStack[length - 1];
      _box12 = boxStack[length - 2];
    }
    return result;
  };
  function shapecastTraverse(nodeIndex32, geometry, intersectsBoundsFunc, intersectsRangeFunc, nodeScoreFunc = null, nodeIndexByteOffset = 0, depth = 0) {
    function getLeftOffset(nodeIndex322) {
      let nodeIndex162 = nodeIndex322 * 2, uint16Array2 = _uint16Array, uint32Array2 = _uint32Array;
      while (!IS_LEAF(nodeIndex162, uint16Array2)) {
        nodeIndex322 = LEFT_NODE(nodeIndex322);
        nodeIndex162 = nodeIndex322 * 2;
      }
      return OFFSET(nodeIndex322, uint32Array2);
    }
    function getRightEndOffset(nodeIndex322) {
      let nodeIndex162 = nodeIndex322 * 2, uint16Array2 = _uint16Array, uint32Array2 = _uint32Array;
      while (!IS_LEAF(nodeIndex162, uint16Array2)) {
        nodeIndex322 = RIGHT_NODE(nodeIndex322, uint32Array2);
        nodeIndex162 = nodeIndex322 * 2;
      }
      return OFFSET(nodeIndex322, uint32Array2) + COUNT(nodeIndex162, uint16Array2);
    }
    let nodeIndex16 = nodeIndex32 * 2, float32Array = _float32Array, uint16Array = _uint16Array, uint32Array = _uint32Array;
    const isLeaf = IS_LEAF(nodeIndex16, uint16Array);
    if (isLeaf) {
      const offset = OFFSET(nodeIndex32, uint32Array);
      const count = COUNT(nodeIndex16, uint16Array);
      arrayToBox(BOUNDING_DATA_INDEX(nodeIndex32), float32Array, _box12);
      return intersectsRangeFunc(offset, count, false, depth, nodeIndexByteOffset + nodeIndex32, _box12);
    } else {
      const left = LEFT_NODE(nodeIndex32);
      const right = RIGHT_NODE(nodeIndex32, uint32Array);
      let c1 = left;
      let c2 = right;
      let score1, score2;
      let box1, box2;
      if (nodeScoreFunc) {
        box1 = _box12;
        box2 = _box22;
        arrayToBox(BOUNDING_DATA_INDEX(c1), float32Array, box1);
        arrayToBox(BOUNDING_DATA_INDEX(c2), float32Array, box2);
        score1 = nodeScoreFunc(box1);
        score2 = nodeScoreFunc(box2);
        if (score2 < score1) {
          c1 = right;
          c2 = left;
          const temp5 = score1;
          score1 = score2;
          score2 = temp5;
          box1 = box2;
        }
      }
      if (!box1) {
        box1 = _box12;
        arrayToBox(BOUNDING_DATA_INDEX(c1), float32Array, box1);
      }
      const isC1Leaf = IS_LEAF(c1 * 2, uint16Array);
      const c1Intersection = intersectsBoundsFunc(box1, isC1Leaf, score1, depth + 1, nodeIndexByteOffset + c1);
      let c1StopTraversal;
      if (c1Intersection === CONTAINED) {
        const offset = getLeftOffset(c1);
        const end = getRightEndOffset(c1);
        const count = end - offset;
        c1StopTraversal = intersectsRangeFunc(offset, count, true, depth + 1, nodeIndexByteOffset + c1, box1);
      } else {
        c1StopTraversal = c1Intersection && shapecastTraverse(c1, geometry, intersectsBoundsFunc, intersectsRangeFunc, nodeScoreFunc, nodeIndexByteOffset, depth + 1);
      }
      if (c1StopTraversal)
        return true;
      box2 = _box22;
      arrayToBox(BOUNDING_DATA_INDEX(c2), float32Array, box2);
      const isC2Leaf = IS_LEAF(c2 * 2, uint16Array);
      const c2Intersection = intersectsBoundsFunc(box2, isC2Leaf, score2, depth + 1, nodeIndexByteOffset + c2);
      let c2StopTraversal;
      if (c2Intersection === CONTAINED) {
        const offset = getLeftOffset(c2);
        const end = getRightEndOffset(c2);
        const count = end - offset;
        c2StopTraversal = intersectsRangeFunc(offset, count, true, depth + 1, nodeIndexByteOffset + c2, box2);
      } else {
        c2StopTraversal = c2Intersection && shapecastTraverse(c2, geometry, intersectsBoundsFunc, intersectsRangeFunc, nodeScoreFunc, nodeIndexByteOffset, depth + 1);
      }
      if (c2StopTraversal)
        return true;
      return false;
    }
  }
}();
var intersectsGeometry = function() {
  const triangle = new ExtendedTriangle();
  const triangle2 = new ExtendedTriangle();
  const invertedMat = new Matrix4();
  const obb3 = new OrientedBox();
  const obb22 = new OrientedBox();
  return function intersectsGeometry2(nodeIndex32, geometry, otherGeometry, geometryToBvh, cachedObb = null) {
    let nodeIndex16 = nodeIndex32 * 2, float32Array = _float32Array, uint16Array = _uint16Array, uint32Array = _uint32Array;
    if (cachedObb === null) {
      if (!otherGeometry.boundingBox) {
        otherGeometry.computeBoundingBox();
      }
      obb3.set(otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh);
      cachedObb = obb3;
    }
    const isLeaf = IS_LEAF(nodeIndex16, uint16Array);
    if (isLeaf) {
      const thisGeometry = geometry;
      const thisIndex = thisGeometry.index;
      const thisPos = thisGeometry.attributes.position;
      const index = otherGeometry.index;
      const pos = otherGeometry.attributes.position;
      const offset = OFFSET(nodeIndex32, uint32Array);
      const count = COUNT(nodeIndex16, uint16Array);
      invertedMat.copy(geometryToBvh).invert();
      if (otherGeometry.boundsTree) {
        arrayToBox(BOUNDING_DATA_INDEX(nodeIndex32), float32Array, obb22);
        obb22.matrix.copy(invertedMat);
        obb22.needsUpdate = true;
        const res = otherGeometry.boundsTree.shapecast({
          intersectsBounds: (box) => obb22.intersectsBox(box),
          intersectsTriangle: (tri) => {
            tri.a.applyMatrix4(geometryToBvh);
            tri.b.applyMatrix4(geometryToBvh);
            tri.c.applyMatrix4(geometryToBvh);
            tri.needsUpdate = true;
            for (let i5 = offset * 3, l2 = (count + offset) * 3; i5 < l2; i5 += 3) {
              setTriangle(triangle2, i5, thisIndex, thisPos);
              triangle2.needsUpdate = true;
              if (tri.intersectsTriangle(triangle2)) {
                return true;
              }
            }
            return false;
          }
        });
        return res;
      } else {
        for (let i5 = offset * 3, l2 = count + offset * 3; i5 < l2; i5 += 3) {
          setTriangle(triangle, i5, thisIndex, thisPos);
          triangle.a.applyMatrix4(invertedMat);
          triangle.b.applyMatrix4(invertedMat);
          triangle.c.applyMatrix4(invertedMat);
          triangle.needsUpdate = true;
          for (let i22 = 0, l22 = index.count; i22 < l22; i22 += 3) {
            setTriangle(triangle2, i22, index, pos);
            triangle2.needsUpdate = true;
            if (triangle.intersectsTriangle(triangle2)) {
              return true;
            }
          }
        }
      }
    } else {
      const left = nodeIndex32 + 8;
      const right = uint32Array[nodeIndex32 + 6];
      arrayToBox(BOUNDING_DATA_INDEX(left), float32Array, boundingBox);
      const leftIntersection = cachedObb.intersectsBox(boundingBox) && intersectsGeometry2(left, geometry, otherGeometry, geometryToBvh, cachedObb);
      if (leftIntersection)
        return true;
      arrayToBox(BOUNDING_DATA_INDEX(right), float32Array, boundingBox);
      const rightIntersection = cachedObb.intersectsBox(boundingBox) && intersectsGeometry2(right, geometry, otherGeometry, geometryToBvh, cachedObb);
      if (rightIntersection)
        return true;
      return false;
    }
  };
}();
function intersectRay(nodeIndex32, array, ray2, target2) {
  arrayToBox(nodeIndex32, array, boundingBox);
  return ray2.intersectBox(boundingBox, target2);
}
var bufferStack = [];
var _prevBuffer;
var _float32Array;
var _uint16Array;
var _uint32Array;
function setBuffer(buffer) {
  if (_prevBuffer) {
    bufferStack.push(_prevBuffer);
  }
  _prevBuffer = buffer;
  _float32Array = new Float32Array(buffer);
  _uint16Array = new Uint16Array(buffer);
  _uint32Array = new Uint32Array(buffer);
}
function clearBuffer() {
  _prevBuffer = null;
  _float32Array = null;
  _uint16Array = null;
  _uint32Array = null;
  if (bufferStack.length) {
    setBuffer(bufferStack.pop());
  }
}

// node_modules/three-mesh-bvh/src/core/MeshBVH.js
var SKIP_GENERATION = Symbol("skip tree generation");
var aabb = new Box3();
var aabb2 = new Box3();
var tempMatrix = new Matrix4();
var obb = new OrientedBox();
var obb2 = new OrientedBox();
var temp = new Vector3();
var temp1 = new Vector3();
var temp2 = new Vector3();
var temp3 = new Vector3();
var temp4 = new Vector3();
var tempBox = new Box3();
var trianglePool = new PrimitivePool(() => new ExtendedTriangle());
var MeshBVH = class {
  static serialize(bvh, options = {}) {
    if (options.isBufferGeometry) {
      console.warn("MeshBVH.serialize: The arguments for the function have changed. See documentation for new signature.");
      return MeshBVH.serialize(arguments[0], {
        cloneBuffers: arguments[2] === void 0 ? true : arguments[2]
      });
    }
    options = __spreadValues({
      cloneBuffers: true
    }, options);
    const geometry = bvh.geometry;
    const rootData = bvh._roots;
    const indexAttribute = geometry.getIndex();
    let result;
    if (options.cloneBuffers) {
      result = {
        roots: rootData.map((root) => root.slice()),
        index: indexAttribute.array.slice()
      };
    } else {
      result = {
        roots: rootData,
        index: indexAttribute.array
      };
    }
    return result;
  }
  static deserialize(data, geometry, options = {}) {
    if (typeof options === "boolean") {
      console.warn("MeshBVH.deserialize: The arguments for the function have changed. See documentation for new signature.");
      return MeshBVH.deserialize(arguments[0], arguments[1], {
        setIndex: arguments[2] === void 0 ? true : arguments[2]
      });
    }
    options = __spreadValues({
      setIndex: true
    }, options);
    const { index, roots } = data;
    const bvh = new MeshBVH(geometry, __spreadProps(__spreadValues({}, options), { [SKIP_GENERATION]: true }));
    bvh._roots = roots;
    if (options.setIndex) {
      const indexAttribute = geometry.getIndex();
      if (indexAttribute === null) {
        const newIndex = new BufferAttribute(data.index, 1, false);
        geometry.setIndex(newIndex);
      } else if (indexAttribute.array !== index) {
        indexAttribute.array.set(index);
        indexAttribute.needsUpdate = true;
      }
    }
    return bvh;
  }
  constructor(geometry, options = {}) {
    if (!geometry.isBufferGeometry) {
      throw new Error("MeshBVH: Only BufferGeometries are supported.");
    } else if (geometry.index && geometry.index.isInterleavedBufferAttribute) {
      throw new Error("MeshBVH: InterleavedBufferAttribute is not supported for the index attribute.");
    }
    options = Object.assign({
      strategy: CENTER,
      maxDepth: 40,
      maxLeafTris: 10,
      verbose: true,
      useSharedArrayBuffer: false,
      setBoundingBox: true,
      onProgress: null,
      [SKIP_GENERATION]: false
    }, options);
    if (options.useSharedArrayBuffer && typeof SharedArrayBuffer === "undefined") {
      throw new Error("MeshBVH: SharedArrayBuffer is not available.");
    }
    this._roots = null;
    if (!options[SKIP_GENERATION]) {
      this._roots = buildPackedTree(geometry, options);
      if (!geometry.boundingBox && options.setBoundingBox) {
        geometry.boundingBox = this.getBoundingBox(new Box3());
      }
    }
    this.geometry = geometry;
  }
  refit(nodeIndices = null) {
    if (nodeIndices && Array.isArray(nodeIndices)) {
      nodeIndices = new Set(nodeIndices);
    }
    const geometry = this.geometry;
    const indexArr = geometry.index.array;
    const posAttr = geometry.attributes.position;
    const posArr = posAttr.array;
    const bufferOffset = posAttr.offset || 0;
    let stride = 3;
    if (posAttr.isInterleavedBufferAttribute) {
      stride = posAttr.data.stride;
    }
    let buffer, uint32Array, uint16Array, float32Array;
    let byteOffset = 0;
    const roots = this._roots;
    for (let i5 = 0, l2 = roots.length; i5 < l2; i5++) {
      buffer = roots[i5];
      uint32Array = new Uint32Array(buffer);
      uint16Array = new Uint16Array(buffer);
      float32Array = new Float32Array(buffer);
      _traverse(0, byteOffset);
      byteOffset += buffer.byteLength;
    }
    function _traverse(node32Index, byteOffset2, force = false) {
      const node16Index = node32Index * 2;
      const isLeaf = uint16Array[node16Index + 15] === IS_LEAFNODE_FLAG;
      if (isLeaf) {
        const offset = uint32Array[node32Index + 6];
        const count = uint16Array[node16Index + 14];
        let minx = Infinity;
        let miny = Infinity;
        let minz = Infinity;
        let maxx = -Infinity;
        let maxy = -Infinity;
        let maxz = -Infinity;
        for (let i5 = 3 * offset, l2 = 3 * (offset + count); i5 < l2; i5++) {
          const index = indexArr[i5] * stride + bufferOffset;
          const x = posArr[index + 0];
          const y = posArr[index + 1];
          const z = posArr[index + 2];
          if (x < minx)
            minx = x;
          if (x > maxx)
            maxx = x;
          if (y < miny)
            miny = y;
          if (y > maxy)
            maxy = y;
          if (z < minz)
            minz = z;
          if (z > maxz)
            maxz = z;
        }
        if (float32Array[node32Index + 0] !== minx || float32Array[node32Index + 1] !== miny || float32Array[node32Index + 2] !== minz || float32Array[node32Index + 3] !== maxx || float32Array[node32Index + 4] !== maxy || float32Array[node32Index + 5] !== maxz) {
          float32Array[node32Index + 0] = minx;
          float32Array[node32Index + 1] = miny;
          float32Array[node32Index + 2] = minz;
          float32Array[node32Index + 3] = maxx;
          float32Array[node32Index + 4] = maxy;
          float32Array[node32Index + 5] = maxz;
          return true;
        } else {
          return false;
        }
      } else {
        const left = node32Index + 8;
        const right = uint32Array[node32Index + 6];
        const offsetLeft = left + byteOffset2;
        const offsetRight = right + byteOffset2;
        let forceChildren = force;
        let includesLeft = false;
        let includesRight = false;
        if (nodeIndices) {
          if (!forceChildren) {
            includesLeft = nodeIndices.has(offsetLeft);
            includesRight = nodeIndices.has(offsetRight);
            forceChildren = !includesLeft && !includesRight;
          }
        } else {
          includesLeft = true;
          includesRight = true;
        }
        const traverseLeft = forceChildren || includesLeft;
        const traverseRight = forceChildren || includesRight;
        let leftChange = false;
        if (traverseLeft) {
          leftChange = _traverse(left, byteOffset2, forceChildren);
        }
        let rightChange = false;
        if (traverseRight) {
          rightChange = _traverse(right, byteOffset2, forceChildren);
        }
        const didChange = leftChange || rightChange;
        if (didChange) {
          for (let i5 = 0; i5 < 3; i5++) {
            const lefti = left + i5;
            const righti = right + i5;
            const minLeftValue = float32Array[lefti];
            const maxLeftValue = float32Array[lefti + 3];
            const minRightValue = float32Array[righti];
            const maxRightValue = float32Array[righti + 3];
            float32Array[node32Index + i5] = minLeftValue < minRightValue ? minLeftValue : minRightValue;
            float32Array[node32Index + i5 + 3] = maxLeftValue > maxRightValue ? maxLeftValue : maxRightValue;
          }
        }
        return didChange;
      }
    }
  }
  traverse(callback, rootIndex = 0) {
    const buffer = this._roots[rootIndex];
    const uint32Array = new Uint32Array(buffer);
    const uint16Array = new Uint16Array(buffer);
    _traverse(0);
    function _traverse(node32Index, depth = 0) {
      const node16Index = node32Index * 2;
      const isLeaf = uint16Array[node16Index + 15] === IS_LEAFNODE_FLAG;
      if (isLeaf) {
        const offset = uint32Array[node32Index + 6];
        const count = uint16Array[node16Index + 14];
        callback(depth, isLeaf, new Float32Array(buffer, node32Index * 4, 6), offset, count);
      } else {
        const left = node32Index + BYTES_PER_NODE / 4;
        const right = uint32Array[node32Index + 6];
        const splitAxis = uint32Array[node32Index + 7];
        const stopTraversal = callback(depth, isLeaf, new Float32Array(buffer, node32Index * 4, 6), splitAxis);
        if (!stopTraversal) {
          _traverse(left, depth + 1);
          _traverse(right, depth + 1);
        }
      }
    }
  }
  raycast(ray2, materialOrSide = FrontSide) {
    const roots = this._roots;
    const geometry = this.geometry;
    const intersects = [];
    const isMaterial = materialOrSide.isMaterial;
    const isArrayMaterial = Array.isArray(materialOrSide);
    const groups = geometry.groups;
    const side = isMaterial ? materialOrSide.side : materialOrSide;
    for (let i5 = 0, l2 = roots.length; i5 < l2; i5++) {
      const materialSide = isArrayMaterial ? materialOrSide[groups[i5].materialIndex].side : side;
      const startCount = intersects.length;
      setBuffer(roots[i5]);
      raycast(0, geometry, materialSide, ray2, intersects);
      clearBuffer();
      if (isArrayMaterial) {
        const materialIndex = groups[i5].materialIndex;
        for (let j = startCount, jl = intersects.length; j < jl; j++) {
          intersects[j].face.materialIndex = materialIndex;
        }
      }
    }
    return intersects;
  }
  raycastFirst(ray2, materialOrSide = FrontSide) {
    const roots = this._roots;
    const geometry = this.geometry;
    const isMaterial = materialOrSide.isMaterial;
    const isArrayMaterial = Array.isArray(materialOrSide);
    let closestResult = null;
    const groups = geometry.groups;
    const side = isMaterial ? materialOrSide.side : materialOrSide;
    for (let i5 = 0, l2 = roots.length; i5 < l2; i5++) {
      const materialSide = isArrayMaterial ? materialOrSide[groups[i5].materialIndex].side : side;
      setBuffer(roots[i5]);
      const result = raycastFirst(0, geometry, materialSide, ray2);
      clearBuffer();
      if (result != null && (closestResult == null || result.distance < closestResult.distance)) {
        closestResult = result;
        if (isArrayMaterial) {
          result.face.materialIndex = groups[i5].materialIndex;
        }
      }
    }
    return closestResult;
  }
  intersectsGeometry(otherGeometry, geomToMesh) {
    const geometry = this.geometry;
    let result = false;
    for (const root of this._roots) {
      setBuffer(root);
      result = intersectsGeometry(0, geometry, otherGeometry, geomToMesh);
      clearBuffer();
      if (result) {
        break;
      }
    }
    return result;
  }
  shapecast(callbacks, _intersectsTriangleFunc, _orderNodesFunc) {
    const geometry = this.geometry;
    if (callbacks instanceof Function) {
      if (_intersectsTriangleFunc) {
        const originalTriangleFunc = _intersectsTriangleFunc;
        _intersectsTriangleFunc = (tri, index, contained, depth) => {
          const i32 = index * 3;
          return originalTriangleFunc(tri, i32, i32 + 1, i32 + 2, contained, depth);
        };
      }
      callbacks = {
        boundsTraverseOrder: _orderNodesFunc,
        intersectsBounds: callbacks,
        intersectsTriangle: _intersectsTriangleFunc,
        intersectsRange: null
      };
      console.warn("MeshBVH: Shapecast function signature has changed and now takes an object of callbacks as a second argument. See docs for new signature.");
    }
    const triangle = trianglePool.getPrimitive();
    let {
      boundsTraverseOrder,
      intersectsBounds,
      intersectsRange,
      intersectsTriangle
    } = callbacks;
    if (intersectsRange && intersectsTriangle) {
      const originalIntersectsRange = intersectsRange;
      intersectsRange = (offset, count, contained, depth, nodeIndex) => {
        if (!originalIntersectsRange(offset, count, contained, depth, nodeIndex)) {
          return iterateOverTriangles(offset, count, geometry, intersectsTriangle, contained, depth, triangle);
        }
        return true;
      };
    } else if (!intersectsRange) {
      if (intersectsTriangle) {
        intersectsRange = (offset, count, contained, depth) => {
          return iterateOverTriangles(offset, count, geometry, intersectsTriangle, contained, depth, triangle);
        };
      } else {
        intersectsRange = (offset, count, contained) => {
          return contained;
        };
      }
    }
    let result = false;
    let byteOffset = 0;
    for (const root of this._roots) {
      setBuffer(root);
      result = shapecast(0, geometry, intersectsBounds, intersectsRange, boundsTraverseOrder, byteOffset);
      clearBuffer();
      if (result) {
        break;
      }
      byteOffset += root.byteLength;
    }
    trianglePool.releasePrimitive(triangle);
    return result;
  }
  bvhcast(otherBvh, matrixToLocal, callbacks) {
    let {
      intersectsRanges,
      intersectsTriangles
    } = callbacks;
    const indexAttr = this.geometry.index;
    const positionAttr = this.geometry.attributes.position;
    const otherIndexAttr = otherBvh.geometry.index;
    const otherPositionAttr = otherBvh.geometry.attributes.position;
    tempMatrix.copy(matrixToLocal).invert();
    const triangle = trianglePool.getPrimitive();
    const triangle2 = trianglePool.getPrimitive();
    if (intersectsTriangles) {
      let iterateOverDoubleTriangles = function(offset1, count1, offset2, count2, depth1, index1, depth2, index2) {
        for (let i22 = offset2, l2 = offset2 + count2; i22 < l2; i22++) {
          setTriangle(triangle2, i22 * 3, otherIndexAttr, otherPositionAttr);
          triangle2.a.applyMatrix4(matrixToLocal);
          triangle2.b.applyMatrix4(matrixToLocal);
          triangle2.c.applyMatrix4(matrixToLocal);
          triangle2.needsUpdate = true;
          for (let i1 = offset1, l1 = offset1 + count1; i1 < l1; i1++) {
            setTriangle(triangle, i1 * 3, indexAttr, positionAttr);
            triangle.needsUpdate = true;
            if (intersectsTriangles(triangle, triangle2, i1, i22, depth1, index1, depth2, index2)) {
              return true;
            }
          }
        }
        return false;
      };
      if (intersectsRanges) {
        const originalIntersectsRanges = intersectsRanges;
        intersectsRanges = function(offset1, count1, offset2, count2, depth1, index1, depth2, index2) {
          if (!originalIntersectsRanges(offset1, count1, offset2, count2, depth1, index1, depth2, index2)) {
            return iterateOverDoubleTriangles(offset1, count1, offset2, count2, depth1, index1, depth2, index2);
          }
          return true;
        };
      } else {
        intersectsRanges = iterateOverDoubleTriangles;
      }
    }
    this.getBoundingBox(aabb2);
    aabb2.applyMatrix4(matrixToLocal);
    const result = this.shapecast({
      intersectsBounds: (box) => aabb2.intersectsBox(box),
      intersectsRange: (offset1, count1, contained, depth1, nodeIndex1, box) => {
        aabb.copy(box);
        aabb.applyMatrix4(tempMatrix);
        return otherBvh.shapecast({
          intersectsBounds: (box2) => aabb.intersectsBox(box2),
          intersectsRange: (offset2, count2, contained2, depth2, nodeIndex2) => {
            return intersectsRanges(offset1, count1, offset2, count2, depth1, nodeIndex1, depth2, nodeIndex2);
          }
        });
      }
    });
    trianglePool.releasePrimitive(triangle);
    trianglePool.releasePrimitive(triangle2);
    return result;
  }
  intersectsBox(box, boxToMesh) {
    obb.set(box.min, box.max, boxToMesh);
    obb.needsUpdate = true;
    return this.shapecast({
      intersectsBounds: (box2) => obb.intersectsBox(box2),
      intersectsTriangle: (tri) => obb.intersectsTriangle(tri)
    });
  }
  intersectsSphere(sphere) {
    return this.shapecast({
      intersectsBounds: (box) => sphere.intersectsBox(box),
      intersectsTriangle: (tri) => tri.intersectsSphere(sphere)
    });
  }
  closestPointToGeometry(otherGeometry, geometryToBvh, target1 = {}, target2 = {}, minThreshold = 0, maxThreshold = Infinity) {
    if (!otherGeometry.boundingBox) {
      otherGeometry.computeBoundingBox();
    }
    obb.set(otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh);
    obb.needsUpdate = true;
    const geometry = this.geometry;
    const pos = geometry.attributes.position;
    const index = geometry.index;
    const otherPos = otherGeometry.attributes.position;
    const otherIndex = otherGeometry.index;
    const triangle = trianglePool.getPrimitive();
    const triangle2 = trianglePool.getPrimitive();
    let tempTarget1 = temp1;
    let tempTargetDest1 = temp2;
    let tempTarget2 = null;
    let tempTargetDest2 = null;
    if (target2) {
      tempTarget2 = temp3;
      tempTargetDest2 = temp4;
    }
    let closestDistance = Infinity;
    let closestDistanceTriIndex = null;
    let closestDistanceOtherTriIndex = null;
    tempMatrix.copy(geometryToBvh).invert();
    obb2.matrix.copy(tempMatrix);
    this.shapecast({
      boundsTraverseOrder: (box) => {
        return obb.distanceToBox(box);
      },
      intersectsBounds: (box, isLeaf, score) => {
        if (score < closestDistance && score < maxThreshold) {
          if (isLeaf) {
            obb2.min.copy(box.min);
            obb2.max.copy(box.max);
            obb2.needsUpdate = true;
          }
          return true;
        }
        return false;
      },
      intersectsRange: (offset, count) => {
        if (otherGeometry.boundsTree) {
          return otherGeometry.boundsTree.shapecast({
            boundsTraverseOrder: (box) => {
              return obb2.distanceToBox(box);
            },
            intersectsBounds: (box, isLeaf, score) => {
              return score < closestDistance && score < maxThreshold;
            },
            intersectsRange: (otherOffset, otherCount) => {
              for (let i22 = otherOffset * 3, l2 = (otherOffset + otherCount) * 3; i22 < l2; i22 += 3) {
                setTriangle(triangle2, i22, otherIndex, otherPos);
                triangle2.a.applyMatrix4(geometryToBvh);
                triangle2.b.applyMatrix4(geometryToBvh);
                triangle2.c.applyMatrix4(geometryToBvh);
                triangle2.needsUpdate = true;
                for (let i5 = offset * 3, l3 = (offset + count) * 3; i5 < l3; i5 += 3) {
                  setTriangle(triangle, i5, index, pos);
                  triangle.needsUpdate = true;
                  const dist = triangle.distanceToTriangle(triangle2, tempTarget1, tempTarget2);
                  if (dist < closestDistance) {
                    tempTargetDest1.copy(tempTarget1);
                    if (tempTargetDest2) {
                      tempTargetDest2.copy(tempTarget2);
                    }
                    closestDistance = dist;
                    closestDistanceTriIndex = i5 / 3;
                    closestDistanceOtherTriIndex = i22 / 3;
                  }
                  if (dist < minThreshold) {
                    return true;
                  }
                }
              }
            }
          });
        } else {
          const triCount = otherIndex ? otherIndex.count : otherPos.count;
          for (let i22 = 0, l2 = triCount; i22 < l2; i22 += 3) {
            setTriangle(triangle2, i22, otherIndex, otherPos);
            triangle2.a.applyMatrix4(geometryToBvh);
            triangle2.b.applyMatrix4(geometryToBvh);
            triangle2.c.applyMatrix4(geometryToBvh);
            triangle2.needsUpdate = true;
            for (let i5 = offset * 3, l3 = (offset + count) * 3; i5 < l3; i5 += 3) {
              setTriangle(triangle, i5, index, pos);
              triangle.needsUpdate = true;
              const dist = triangle.distanceToTriangle(triangle2, tempTarget1, tempTarget2);
              if (dist < closestDistance) {
                tempTargetDest1.copy(tempTarget1);
                if (tempTargetDest2) {
                  tempTargetDest2.copy(tempTarget2);
                }
                closestDistance = dist;
                closestDistanceTriIndex = i5 / 3;
                closestDistanceOtherTriIndex = i22 / 3;
              }
              if (dist < minThreshold) {
                return true;
              }
            }
          }
        }
      }
    });
    trianglePool.releasePrimitive(triangle);
    trianglePool.releasePrimitive(triangle2);
    if (closestDistance === Infinity)
      return null;
    if (!target1.point)
      target1.point = tempTargetDest1.clone();
    else
      target1.point.copy(tempTargetDest1);
    target1.distance = closestDistance, target1.faceIndex = closestDistanceTriIndex;
    if (target2) {
      if (!target2.point)
        target2.point = tempTargetDest2.clone();
      else
        target2.point.copy(tempTargetDest2);
      target2.point.applyMatrix4(tempMatrix);
      tempTargetDest1.applyMatrix4(tempMatrix);
      target2.distance = tempTargetDest1.sub(target2.point).length();
      target2.faceIndex = closestDistanceOtherTriIndex;
    }
    return target1;
  }
  closestPointToPoint(point, target2 = {}, minThreshold = 0, maxThreshold = Infinity) {
    const minThresholdSq = minThreshold * minThreshold;
    const maxThresholdSq = maxThreshold * maxThreshold;
    let closestDistanceSq = Infinity;
    let closestDistanceTriIndex = null;
    this.shapecast({
      boundsTraverseOrder: (box) => {
        temp.copy(point).clamp(box.min, box.max);
        return temp.distanceToSquared(point);
      },
      intersectsBounds: (box, isLeaf, score) => {
        return score < closestDistanceSq && score < maxThresholdSq;
      },
      intersectsTriangle: (tri, triIndex) => {
        tri.closestPointToPoint(point, temp);
        const distSq = point.distanceToSquared(temp);
        if (distSq < closestDistanceSq) {
          temp1.copy(temp);
          closestDistanceSq = distSq;
          closestDistanceTriIndex = triIndex;
        }
        if (distSq < minThresholdSq) {
          return true;
        } else {
          return false;
        }
      }
    });
    if (closestDistanceSq === Infinity)
      return null;
    const closestDistance = Math.sqrt(closestDistanceSq);
    if (!target2.point)
      target2.point = temp1.clone();
    else
      target2.point.copy(temp1);
    target2.distance = closestDistance, target2.faceIndex = closestDistanceTriIndex;
    return target2;
  }
  getBoundingBox(target2) {
    target2.makeEmpty();
    const roots = this._roots;
    roots.forEach((buffer) => {
      arrayToBox(0, new Float32Array(buffer), tempBox);
      target2.union(tempBox);
    });
    return target2;
  }
};
var originalRaycast = MeshBVH.prototype.raycast;
MeshBVH.prototype.raycast = function(...args) {
  if (args[0].isMesh) {
    console.warn('MeshBVH: The function signature and results frame for "raycast" has changed. See docs for new signature.');
    const [
      mesh,
      raycaster,
      ray2,
      intersects
    ] = args;
    const results = originalRaycast.call(this, ray2, mesh.material);
    results.forEach((hit) => {
      hit = convertRaycastIntersect(hit, mesh, raycaster);
      if (hit) {
        intersects.push(hit);
      }
    });
    return intersects;
  } else {
    return originalRaycast.apply(this, args);
  }
};
var originalRaycastFirst = MeshBVH.prototype.raycastFirst;
MeshBVH.prototype.raycastFirst = function(...args) {
  if (args[0].isMesh) {
    console.warn('MeshBVH: The function signature and results frame for "raycastFirst" has changed. See docs for new signature.');
    const [
      mesh,
      raycaster,
      ray2
    ] = args;
    return convertRaycastIntersect(originalRaycastFirst.call(this, ray2, mesh.material), mesh, raycaster);
  } else {
    return originalRaycastFirst.apply(this, args);
  }
};
var originalClosestPointToPoint = MeshBVH.prototype.closestPointToPoint;
MeshBVH.prototype.closestPointToPoint = function(...args) {
  if (args[0].isMesh) {
    console.warn('MeshBVH: The function signature and results frame for "closestPointToPoint" has changed. See docs for new signature.');
    args.unshift();
    const target2 = args[1];
    const result = {};
    args[1] = result;
    originalClosestPointToPoint.apply(this, args);
    if (target2) {
      target2.copy(result.point);
    }
    return result.distance;
  } else {
    return originalClosestPointToPoint.apply(this, args);
  }
};
var originalClosestPointToGeometry = MeshBVH.prototype.closestPointToGeometry;
MeshBVH.prototype.closestPointToGeometry = function(...args) {
  const target1 = args[2];
  const target2 = args[3];
  if (target1 && target1.isVector3 || target2 && target2.isVector3) {
    console.warn('MeshBVH: The function signature and results frame for "closestPointToGeometry" has changed. See docs for new signature.');
    const result1 = {};
    const result2 = {};
    const geometryToBvh = args[1];
    args[2] = result1;
    args[3] = result2;
    originalClosestPointToGeometry.apply(this, args);
    if (target1) {
      target1.copy(result1.point);
    }
    if (target2) {
      target2.copy(result2.point).applyMatrix4(geometryToBvh);
    }
    return result1.distance;
  } else {
    return originalClosestPointToGeometry.apply(this, args);
  }
};
var originalRefit = MeshBVH.prototype.refit;
MeshBVH.prototype.refit = function(...args) {
  const nodeIndices = args[0];
  const terminationIndices = args[1];
  if (terminationIndices && (terminationIndices instanceof Set || Array.isArray(terminationIndices))) {
    console.warn('MeshBVH: The function signature for "refit" has changed. See docs for new signature.');
    const newNodeIndices = /* @__PURE__ */ new Set();
    terminationIndices.forEach((v4) => newNodeIndices.add(v4));
    if (nodeIndices) {
      nodeIndices.forEach((v4) => newNodeIndices.add(v4));
    }
    originalRefit.call(this, newNodeIndices);
  } else {
    originalRefit.apply(this, args);
  }
};
[
  "intersectsGeometry",
  "shapecast",
  "intersectsBox",
  "intersectsSphere"
].forEach((name) => {
  const originalFunc = MeshBVH.prototype[name];
  MeshBVH.prototype[name] = function(...args) {
    if (args[0] === null || args[0].isMesh) {
      args.shift();
      console.warn(`MeshBVH: The function signature for "${name}" has changed and no longer takes Mesh. See docs for new signature.`);
    }
    return originalFunc.apply(this, args);
  };
});

// node_modules/three-mesh-bvh/src/objects/MeshBVHVisualizer.js
init_three_module();
var boundingBox2 = new Box3();

// node_modules/three-mesh-bvh/src/debug/Debug.js
init_three_module();
var _box1 = new Box3();
var _box2 = new Box3();
var _vec = new Vector3();

// node_modules/three-mesh-bvh/src/utils/ExtensionUtilities.js
init_three_module();
var ray = new Ray();
var tmpInverseMatrix = new Matrix4();
var origMeshRaycastFunc = Mesh.prototype.raycast;
function acceleratedRaycast(raycaster, intersects) {
  if (this.geometry.boundsTree) {
    if (this.material === void 0)
      return;
    tmpInverseMatrix.copy(this.matrixWorld).invert();
    ray.copy(raycaster.ray).applyMatrix4(tmpInverseMatrix);
    const bvh = this.geometry.boundsTree;
    if (raycaster.firstHitOnly === true) {
      const hit = convertRaycastIntersect(bvh.raycastFirst(ray, this.material), this, raycaster);
      if (hit) {
        intersects.push(hit);
      }
    } else {
      const hits = bvh.raycast(ray, this.material);
      for (let i5 = 0, l2 = hits.length; i5 < l2; i5++) {
        const hit = convertRaycastIntersect(hits[i5], this, raycaster);
        if (hit) {
          intersects.push(hit);
        }
      }
    }
  } else {
    origMeshRaycastFunc.call(this, raycaster, intersects);
  }
}
function computeBoundsTree(options) {
  this.boundsTree = new MeshBVH(this, options);
  return this.boundsTree;
}
function disposeBoundsTree() {
  this.boundsTree = null;
}

// node_modules/three-mesh-bvh/src/gpu/MeshBVHUniformStruct.js
init_three_module();

// node_modules/three-mesh-bvh/src/gpu/VertexAttributeTexture.js
init_three_module();

// node_modules/three-mesh-bvh/src/utils/StaticGeometryGenerator.js
init_three_module();
var _positionVector = new Vector3();
var _normalVector = new Vector3();
var _tangentVector = new Vector3();
var _tangentVector4 = new Vector4();
var _morphVector = new Vector3();
var _temp = new Vector3();
var _skinIndex = new Vector4();
var _skinWeight = new Vector4();
var _matrix = new Matrix4();
var _boneMatrix = new Matrix4();

// node_modules/@react-three/drei/core/useBVH.js
function useBVH(mesh, options) {
  React45.useEffect(() => {
    if (mesh.current) {
      mesh.current.raycast = acceleratedRaycast;
      const geometry = mesh.current.geometry;
      geometry.computeBoundsTree = computeBoundsTree;
      geometry.disposeBoundsTree = disposeBoundsTree;
      geometry.computeBoundsTree(options);
      return () => {
        if (geometry.boundsTree) {
          geometry.disposeBoundsTree();
        }
      };
    }
  }, [mesh, options]);
}

// node_modules/@react-three/drei/core/useContextBridge.js
var React46 = __toESM(require_react());
function useContextBridge(...contexts) {
  const cRef = React46.useRef([]);
  cRef.current = contexts.map((context7) => React46.useContext(context7));
  return React46.useMemo(() => ({
    children
  }) => contexts.reduceRight((acc, Context2, i5) => React46.createElement(Context2.Provider, {
    value: cRef.current[i5],
    children: acc
  }), children), []);
}

// node_modules/@react-three/drei/core/useAnimations.js
var React47 = __toESM(require_react());
init_three_module();
init_react_three_fiber_esm();
function useAnimations(clips, root) {
  const ref = React47.useRef();
  const [actualRef] = React47.useState(() => root ? root instanceof Object3D ? {
    current: root
  } : root : ref);
  const [mixer] = React47.useState(() => new AnimationMixer(void 0));
  const lazyActions = React47.useRef({});
  const [api] = React47.useState(() => {
    const actions = {};
    clips.forEach((clip) => Object.defineProperty(actions, clip.name, {
      enumerable: true,
      get() {
        if (actualRef.current) {
          return lazyActions.current[clip.name] || (lazyActions.current[clip.name] = mixer.clipAction(clip, actualRef.current));
        }
      }
    }));
    return {
      ref: actualRef,
      clips,
      actions,
      names: clips.map((c2) => c2.name),
      mixer
    };
  });
  useFrame((state, delta) => mixer.update(delta));
  React47.useEffect(() => {
    const currentRoot = actualRef.current;
    return () => {
      lazyActions.current = {};
      Object.values(api.actions).forEach((action) => {
        if (currentRoot) {
          mixer.uncacheAction(action, currentRoot);
        }
      });
    };
  }, [clips]);
  return api;
}

// node_modules/@react-three/drei/core/useIntersect.js
var React48 = __toESM(require_react());
init_react_three_fiber_esm();
function useIntersect(onChange) {
  const ref = React48.useRef(null);
  const check = React48.useRef(false);
  const temp5 = React48.useRef(false);
  React48.useEffect(() => {
    const obj = ref.current;
    if (obj) {
      const unsub1 = addEffect(() => {
        check.current = false;
        return true;
      });
      const oldOnRender = obj.onBeforeRender;
      obj.onBeforeRender = () => check.current = true;
      const unsub2 = addAfterEffect(() => {
        if (check.current !== temp5.current)
          onChange(temp5.current = check.current);
        return true;
      });
      return () => {
        obj.onBeforeRender = oldOnRender;
        unsub1();
        unsub2();
      };
    }
  }, []);
  return ref;
}

// node_modules/@react-three/drei/core/useBoxProjectedEnv.js
init_three_module();
var React49 = __toESM(require_react());
init_react_three_fiber_esm();
var worldposReplace = `
#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )
  vec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );
  #ifdef BOX_PROJECTED_ENV_MAP
    vWorldPosition = worldPosition.xyz;
  #endif
#endif
`;
var boxProjectDefinitions = `
#ifdef BOX_PROJECTED_ENV_MAP
  uniform vec3 envMapSize;
  uniform vec3 envMapPosition;
  varying vec3 vWorldPosition;
    
  vec3 parallaxCorrectNormal( vec3 v, vec3 cubeSize, vec3 cubePos ) {
    vec3 nDir = normalize( v );
    vec3 rbmax = ( .5 * cubeSize + cubePos - vWorldPosition ) / nDir;
    vec3 rbmin = ( -.5 * cubeSize + cubePos - vWorldPosition ) / nDir;
    vec3 rbminmax;
    rbminmax.x = ( nDir.x > 0. ) ? rbmax.x : rbmin.x;
    rbminmax.y = ( nDir.y > 0. ) ? rbmax.y : rbmin.y;
    rbminmax.z = ( nDir.z > 0. ) ? rbmax.z : rbmin.z;
    float correction = min( min( rbminmax.x, rbminmax.y ), rbminmax.z );
    vec3 boxIntersection = vWorldPosition + nDir * correction;    
    return boxIntersection - cubePos;
  }
#endif
`;
var getIBLIrradiance_patch = `
#ifdef BOX_PROJECTED_ENV_MAP
  worldNormal = parallaxCorrectNormal( worldNormal, envMapSize, envMapPosition );
#endif
`;
var getIBLRadiance_patch = `
#ifdef BOX_PROJECTED_ENV_MAP
  reflectVec = parallaxCorrectNormal( reflectVec, envMapSize, envMapPosition );
#endif
`;
function boxProjectedEnvMap(shader, envMapPosition, envMapSize) {
  shader.defines.BOX_PROJECTED_ENV_MAP = true;
  shader.uniforms.envMapPosition = {
    value: envMapPosition
  };
  shader.uniforms.envMapSize = {
    value: envMapSize
  };
  shader.vertexShader = `
  varying vec3 vWorldPosition;
  ${shader.vertexShader.replace("#include <worldpos_vertex>", worldposReplace)}`;
  shader.fragmentShader = `
    ${boxProjectDefinitions}
    ${shader.fragmentShader.replace("#include <envmap_physical_pars_fragment>", ShaderChunk.envmap_physical_pars_fragment).replace("vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );", `vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
         ${getIBLIrradiance_patch}
         `).replace("reflectVec = inverseTransformDirection( reflectVec, viewMatrix );", `reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
         ${getIBLRadiance_patch}
        `)}`;
}
function useBoxProjectedEnv(position2 = new Vector3(), size = new Vector3()) {
  const [config] = React49.useState(() => ({
    position: new Vector3(),
    size: new Vector3()
  }));
  applyProps(config, {
    position: position2,
    size
  });
  const ref = React49.useRef(null);
  const spread = React49.useMemo(() => ({
    ref,
    onBeforeCompile: (shader) => boxProjectedEnvMap(shader, config.position, config.size),
    customProgramCacheKey: () => JSON.stringify(config.position.toArray()) + JSON.stringify(config.size.toArray())
  }), [...config.position.toArray(), ...config.size.toArray()]);
  React49.useLayoutEffect(() => void (ref.current.needsUpdate = true), [config]);
  return spread;
}

// node_modules/@react-three/drei/core/BBAnchor.js
init_extends();
var React50 = __toESM(require_react());
init_three_module();
init_react_three_fiber_esm();
var boundingBox3 = new Box3();
var boundingBoxSize = new Vector3();
var BBAnchor = (_a) => {
  var _b = _a, {
    anchor
  } = _b, props = __objRest(_b, [
    "anchor"
  ]);
  const ref = React50.useRef(null);
  const parentRef = React50.useRef(null);
  React50.useEffect(() => {
    var _ref$current, _ref$current$parent;
    if ((_ref$current = ref.current) != null && (_ref$current$parent = _ref$current.parent) != null && _ref$current$parent.parent) {
      parentRef.current = ref.current.parent;
      ref.current.parent.parent.add(ref.current);
    }
  }, []);
  useFrame(() => {
    if (parentRef.current) {
      boundingBox3.setFromObject(parentRef.current);
      boundingBox3.getSize(boundingBoxSize);
      ref.current.position.set(parentRef.current.position.x + boundingBoxSize.x * anchor[0] / 2, parentRef.current.position.y + boundingBoxSize.y * anchor[1] / 2, parentRef.current.position.z + boundingBoxSize.z * anchor[2] / 2);
    }
  });
  return React50.createElement("group", _extends({
    ref
  }, props));
};

// node_modules/@react-three/drei/core/CurveModifier.js
var React51 = __toESM(require_react());
init_three_module();
init_react_three_fiber_esm();
var CurveModifier = React51.forwardRef(({
  children,
  curve
}, ref) => {
  const [scene] = React51.useState(() => new Scene());
  const [obj, set] = React51.useState();
  const modifier = React51.useRef();
  React51.useEffect(() => {
    modifier.current = new Flow(scene.children[0]);
    set(modifier.current.object3D);
  }, [children]);
  React51.useEffect(() => {
    var _modifier$current;
    if (curve)
      (_modifier$current = modifier.current) == null ? void 0 : _modifier$current.updateCurve(0, curve);
  }, [curve]);
  React51.useImperativeHandle(ref, () => ({
    moveAlongCurve: (val) => {
      var _modifier$current2;
      (_modifier$current2 = modifier.current) == null ? void 0 : _modifier$current2.moveAlongCurve(val);
    }
  }));
  return React51.createElement(React51.Fragment, null, createPortal(children, scene), obj && React51.createElement("primitive", {
    object: obj
  }));
});

// node_modules/@react-three/drei/core/MeshDistortMaterial.js
init_extends();
var React52 = __toESM(require_react());
init_three_module();
init_react_three_fiber_esm();

// node_modules/@react-three/drei/helpers/glsl/distort.vert.glsl.js
var distort = "#define GLSLIFY 1\nvec3 mod289(vec3 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 mod289(vec4 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 permute(vec4 x){return mod289(((x*34.0)+1.0)*x);}vec4 taylorInvSqrt(vec4 r){return 1.79284291400159-0.85373472095314*r;}float snoise(vec3 v){const vec2 C=vec2(1.0/6.0,1.0/3.0);const vec4 D=vec4(0.0,0.5,1.0,2.0);vec3 i=floor(v+dot(v,C.yyy));vec3 x0=v-i+dot(i,C.xxx);vec3 g=step(x0.yzx,x0.xyz);vec3 l=1.0-g;vec3 i1=min(g.xyz,l.zxy);vec3 i2=max(g.xyz,l.zxy);vec3 x1=x0-i1+C.xxx;vec3 x2=x0-i2+C.yyy;vec3 x3=x0-D.yyy;i=mod289(i);vec4 p=permute(permute(permute(i.z+vec4(0.0,i1.z,i2.z,1.0))+i.y+vec4(0.0,i1.y,i2.y,1.0))+i.x+vec4(0.0,i1.x,i2.x,1.0));float n_=0.142857142857;vec3 ns=n_*D.wyz-D.xzx;vec4 j=p-49.0*floor(p*ns.z*ns.z);vec4 x_=floor(j*ns.z);vec4 y_=floor(j-7.0*x_);vec4 x=x_*ns.x+ns.yyyy;vec4 y=y_*ns.x+ns.yyyy;vec4 h=1.0-abs(x)-abs(y);vec4 b0=vec4(x.xy,y.xy);vec4 b1=vec4(x.zw,y.zw);vec4 s0=floor(b0)*2.0+1.0;vec4 s1=floor(b1)*2.0+1.0;vec4 sh=-step(h,vec4(0.0));vec4 a0=b0.xzyw+s0.xzyw*sh.xxyy;vec4 a1=b1.xzyw+s1.xzyw*sh.zzww;vec3 p0=vec3(a0.xy,h.x);vec3 p1=vec3(a0.zw,h.y);vec3 p2=vec3(a1.xy,h.z);vec3 p3=vec3(a1.zw,h.w);vec4 norm=taylorInvSqrt(vec4(dot(p0,p0),dot(p1,p1),dot(p2,p2),dot(p3,p3)));p0*=norm.x;p1*=norm.y;p2*=norm.z;p3*=norm.w;vec4 m=max(0.6-vec4(dot(x0,x0),dot(x1,x1),dot(x2,x2),dot(x3,x3)),0.0);m=m*m;return 42.0*dot(m*m,vec4(dot(p0,x0),dot(p1,x1),dot(p2,x2),dot(p3,x3)));}";

// node_modules/@react-three/drei/core/MeshDistortMaterial.js
var DistortMaterialImpl = class extends MeshPhysicalMaterial {
  constructor(parameters = {}) {
    super(parameters);
    this.setValues(parameters);
    this._time = {
      value: 0
    };
    this._distort = {
      value: 0.4
    };
    this._radius = {
      value: 1
    };
  }
  onBeforeCompile(shader) {
    shader.uniforms.time = this._time;
    shader.uniforms.radius = this._radius;
    shader.uniforms.distort = this._distort;
    shader.vertexShader = `
      uniform float time;
      uniform float radius;
      uniform float distort;
      ${distort}
      ${shader.vertexShader}
    `;
    shader.vertexShader = shader.vertexShader.replace("#include <begin_vertex>", `
        float updateTime = time / 50.0;
        float noise = snoise(vec3(position / 2.0 + updateTime * 5.0));
        vec3 transformed = vec3(position * (noise * pow(distort, 2.0) + radius));
        `);
  }
  get time() {
    return this._time.value;
  }
  set time(v4) {
    this._time.value = v4;
  }
  get distort() {
    return this._distort.value;
  }
  set distort(v4) {
    this._distort.value = v4;
  }
  get radius() {
    return this._radius.value;
  }
  set radius(v4) {
    this._radius.value = v4;
  }
};
var MeshDistortMaterial = React52.forwardRef((_a, ref) => {
  var _b = _a, {
    speed = 1
  } = _b, props = __objRest(_b, [
    "speed"
  ]);
  const [material] = React52.useState(() => new DistortMaterialImpl());
  useFrame((state) => material && (material.time = state.clock.getElapsedTime() * speed));
  return React52.createElement("primitive", _extends({
    object: material,
    ref,
    attach: "material"
  }, props));
});

// node_modules/@react-three/drei/core/MeshWobbleMaterial.js
init_extends();
var React53 = __toESM(require_react());
init_three_module();
init_react_three_fiber_esm();
var WobbleMaterialImpl = class extends MeshStandardMaterial {
  constructor(parameters = {}) {
    super(parameters);
    this.setValues(parameters);
    this._time = {
      value: 0
    };
    this._factor = {
      value: 1
    };
  }
  onBeforeCompile(shader) {
    shader.uniforms.time = this._time;
    shader.uniforms.factor = this._factor;
    shader.vertexShader = `
      uniform float time;
      uniform float factor;
      ${shader.vertexShader}
    `;
    shader.vertexShader = shader.vertexShader.replace("#include <begin_vertex>", `float theta = sin( time + position.y ) / 2.0 * factor;
        float c = cos( theta );
        float s = sin( theta );
        mat3 m = mat3( c, 0, s, 0, 1, 0, -s, 0, c );
        vec3 transformed = vec3( position ) * m;
        vNormal = vNormal * m;`);
  }
  get time() {
    return this._time.value;
  }
  set time(v4) {
    this._time.value = v4;
  }
  get factor() {
    return this._factor.value;
  }
  set factor(v4) {
    this._factor.value = v4;
  }
};
var MeshWobbleMaterial = React53.forwardRef((_a, ref) => {
  var _b = _a, {
    speed = 1
  } = _b, props = __objRest(_b, [
    "speed"
  ]);
  const [material] = React53.useState(() => new WobbleMaterialImpl());
  useFrame((state) => material && (material.time = state.clock.getElapsedTime() * speed));
  return React53.createElement("primitive", _extends({
    object: material,
    ref,
    attach: "material"
  }, props));
});

// node_modules/@react-three/drei/core/MeshReflectorMaterial.js
init_extends();
var React54 = __toESM(require_react());
init_three_module();
init_react_three_fiber_esm();

// node_modules/@react-three/drei/materials/BlurPass.js
init_three_module();

// node_modules/@react-three/drei/materials/ConvolutionMaterial.js
init_three_module();
var ConvolutionMaterial = class extends ShaderMaterial {
  constructor(texelSize = new Vector2()) {
    super({
      uniforms: {
        inputBuffer: new Uniform(null),
        depthBuffer: new Uniform(null),
        resolution: new Uniform(new Vector2()),
        texelSize: new Uniform(new Vector2()),
        halfTexelSize: new Uniform(new Vector2()),
        kernel: new Uniform(0),
        scale: new Uniform(1),
        cameraNear: new Uniform(0),
        cameraFar: new Uniform(1),
        minDepthThreshold: new Uniform(0),
        maxDepthThreshold: new Uniform(1),
        depthScale: new Uniform(0),
        depthToBlurRatioBias: new Uniform(0.25)
      },
      fragmentShader: `#include <common>
        #include <dithering_pars_fragment>      
        uniform sampler2D inputBuffer;
        uniform sampler2D depthBuffer;
        uniform float cameraNear;
        uniform float cameraFar;
        uniform float minDepthThreshold;
        uniform float maxDepthThreshold;
        uniform float depthScale;
        uniform float depthToBlurRatioBias;
        varying vec2 vUv;
        varying vec2 vUv0;
        varying vec2 vUv1;
        varying vec2 vUv2;
        varying vec2 vUv3;

        void main() {
          float depthFactor = 0.0;
          
          #ifdef USE_DEPTH
            vec4 depth = texture2D(depthBuffer, vUv);
            depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));
            depthFactor *= depthScale;
            depthFactor = max(0.0, min(1.0, depthFactor + 0.25));
          #endif
          
          vec4 sum = texture2D(inputBuffer, mix(vUv0, vUv, depthFactor));
          sum += texture2D(inputBuffer, mix(vUv1, vUv, depthFactor));
          sum += texture2D(inputBuffer, mix(vUv2, vUv, depthFactor));
          sum += texture2D(inputBuffer, mix(vUv3, vUv, depthFactor));
          gl_FragColor = sum * 0.25 ;

          #include <dithering_fragment>
          #include <tonemapping_fragment>
          #include <encodings_fragment>
        }`,
      vertexShader: `uniform vec2 texelSize;
        uniform vec2 halfTexelSize;
        uniform float kernel;
        uniform float scale;
        varying vec2 vUv;
        varying vec2 vUv0;
        varying vec2 vUv1;
        varying vec2 vUv2;
        varying vec2 vUv3;

        void main() {
          vec2 uv = position.xy * 0.5 + 0.5;
          vUv = uv;

          vec2 dUv = (texelSize * vec2(kernel) + halfTexelSize) * scale;
          vUv0 = vec2(uv.x - dUv.x, uv.y + dUv.y);
          vUv1 = vec2(uv.x + dUv.x, uv.y + dUv.y);
          vUv2 = vec2(uv.x + dUv.x, uv.y - dUv.y);
          vUv3 = vec2(uv.x - dUv.x, uv.y - dUv.y);

          gl_Position = vec4(position.xy, 1.0, 1.0);
        }`,
      blending: NoBlending,
      depthWrite: false,
      depthTest: false
    });
    this.toneMapped = false;
    this.setTexelSize(texelSize.x, texelSize.y);
    this.kernel = new Float32Array([0, 1, 2, 2, 3]);
  }
  setTexelSize(x, y) {
    this.uniforms.texelSize.value.set(x, y);
    this.uniforms.halfTexelSize.value.set(x, y).multiplyScalar(0.5);
  }
  setResolution(resolution) {
    this.uniforms.resolution.value.copy(resolution);
  }
};

// node_modules/@react-three/drei/materials/BlurPass.js
var BlurPass = class {
  constructor({
    gl,
    resolution,
    width = 500,
    height = 500,
    minDepthThreshold = 0,
    maxDepthThreshold = 1,
    depthScale = 0,
    depthToBlurRatioBias = 0.25
  }) {
    this.renderToScreen = false;
    this.renderTargetA = new WebGLRenderTarget(resolution, resolution, {
      minFilter: LinearFilter,
      magFilter: LinearFilter,
      stencilBuffer: false,
      depthBuffer: false,
      encoding: gl.outputEncoding
    });
    this.renderTargetB = this.renderTargetA.clone();
    this.convolutionMaterial = new ConvolutionMaterial();
    this.convolutionMaterial.setTexelSize(1 / width, 1 / height);
    this.convolutionMaterial.setResolution(new Vector2(width, height));
    this.scene = new Scene();
    this.camera = new Camera();
    this.convolutionMaterial.uniforms.minDepthThreshold.value = minDepthThreshold;
    this.convolutionMaterial.uniforms.maxDepthThreshold.value = maxDepthThreshold;
    this.convolutionMaterial.uniforms.depthScale.value = depthScale;
    this.convolutionMaterial.uniforms.depthToBlurRatioBias.value = depthToBlurRatioBias;
    this.convolutionMaterial.defines.USE_DEPTH = depthScale > 0;
    const vertices = new Float32Array([-1, -1, 0, 3, -1, 0, -1, 3, 0]);
    const uvs = new Float32Array([0, 0, 2, 0, 0, 2]);
    const geometry = new BufferGeometry();
    geometry.setAttribute("position", new BufferAttribute(vertices, 3));
    geometry.setAttribute("uv", new BufferAttribute(uvs, 2));
    this.screen = new Mesh(geometry, this.convolutionMaterial);
    this.screen.frustumCulled = false;
    this.scene.add(this.screen);
  }
  render(renderer, inputBuffer, outputBuffer) {
    const scene = this.scene;
    const camera = this.camera;
    const renderTargetA = this.renderTargetA;
    const renderTargetB = this.renderTargetB;
    let material = this.convolutionMaterial;
    let uniforms = material.uniforms;
    uniforms.depthBuffer.value = inputBuffer.depthTexture;
    const kernel = material.kernel;
    let lastRT = inputBuffer;
    let destRT;
    let i5, l2;
    for (i5 = 0, l2 = kernel.length - 1; i5 < l2; ++i5) {
      destRT = (i5 & 1) === 0 ? renderTargetA : renderTargetB;
      uniforms.kernel.value = kernel[i5];
      uniforms.inputBuffer.value = lastRT.texture;
      renderer.setRenderTarget(destRT);
      renderer.render(scene, camera);
      lastRT = destRT;
    }
    uniforms.kernel.value = kernel[i5];
    uniforms.inputBuffer.value = lastRT.texture;
    renderer.setRenderTarget(this.renderToScreen ? null : outputBuffer);
    renderer.render(scene, camera);
  }
};

// node_modules/@react-three/drei/materials/MeshReflectorMaterial.js
init_three_module();
var MeshReflectorMaterial = class extends MeshStandardMaterial {
  constructor(parameters = {}) {
    super(parameters);
    this._tDepth = {
      value: null
    };
    this._distortionMap = {
      value: null
    };
    this._tDiffuse = {
      value: null
    };
    this._tDiffuseBlur = {
      value: null
    };
    this._textureMatrix = {
      value: null
    };
    this._hasBlur = {
      value: false
    };
    this._mirror = {
      value: 0
    };
    this._mixBlur = {
      value: 0
    };
    this._blurStrength = {
      value: 0.5
    };
    this._minDepthThreshold = {
      value: 0.9
    };
    this._maxDepthThreshold = {
      value: 1
    };
    this._depthScale = {
      value: 0
    };
    this._depthToBlurRatioBias = {
      value: 0.25
    };
    this._distortion = {
      value: 1
    };
    this._mixContrast = {
      value: 1
    };
    this.setValues(parameters);
  }
  onBeforeCompile(shader) {
    var _shader$defines;
    if (!((_shader$defines = shader.defines) != null && _shader$defines.USE_UV)) {
      shader.defines.USE_UV = "";
    }
    shader.uniforms.hasBlur = this._hasBlur;
    shader.uniforms.tDiffuse = this._tDiffuse;
    shader.uniforms.tDepth = this._tDepth;
    shader.uniforms.distortionMap = this._distortionMap;
    shader.uniforms.tDiffuseBlur = this._tDiffuseBlur;
    shader.uniforms.textureMatrix = this._textureMatrix;
    shader.uniforms.mirror = this._mirror;
    shader.uniforms.mixBlur = this._mixBlur;
    shader.uniforms.mixStrength = this._blurStrength;
    shader.uniforms.minDepthThreshold = this._minDepthThreshold;
    shader.uniforms.maxDepthThreshold = this._maxDepthThreshold;
    shader.uniforms.depthScale = this._depthScale;
    shader.uniforms.depthToBlurRatioBias = this._depthToBlurRatioBias;
    shader.uniforms.distortion = this._distortion;
    shader.uniforms.mixContrast = this._mixContrast;
    shader.vertexShader = `
        uniform mat4 textureMatrix;
        varying vec4 my_vUv;
      ${shader.vertexShader}`;
    shader.vertexShader = shader.vertexShader.replace("#include <project_vertex>", `#include <project_vertex>
        my_vUv = textureMatrix * vec4( position, 1.0 );
        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );`);
    shader.fragmentShader = `
        uniform sampler2D tDiffuse;
        uniform sampler2D tDiffuseBlur;
        uniform sampler2D tDepth;
        uniform sampler2D distortionMap;
        uniform float distortion;
        uniform float cameraNear;
			  uniform float cameraFar;
        uniform bool hasBlur;
        uniform float mixBlur;
        uniform float mirror;
        uniform float mixStrength;
        uniform float minDepthThreshold;
        uniform float maxDepthThreshold;
        uniform float mixContrast;
        uniform float depthScale;
        uniform float depthToBlurRatioBias;
        varying vec4 my_vUv;
        ${shader.fragmentShader}`;
    shader.fragmentShader = shader.fragmentShader.replace("#include <emissivemap_fragment>", `#include <emissivemap_fragment>

      float distortionFactor = 0.0;
      #ifdef USE_DISTORTION
        distortionFactor = texture2D(distortionMap, vUv).r * distortion;
      #endif

      vec4 new_vUv = my_vUv;
      new_vUv.x += distortionFactor;
      new_vUv.y += distortionFactor;

      vec4 base = texture2DProj(tDiffuse, new_vUv);
      vec4 blur = texture2DProj(tDiffuseBlur, new_vUv);

      vec4 merge = base;

      #ifdef USE_NORMALMAP
        vec2 normal_uv = vec2(0.0);
        vec4 normalColor = texture2D(normalMap, vUv * normalScale);
        vec3 my_normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );
        vec3 coord = new_vUv.xyz / new_vUv.w;
        normal_uv = coord.xy + coord.z * my_normal.xz * 0.05;
        vec4 base_normal = texture2D(tDiffuse, normal_uv);
        vec4 blur_normal = texture2D(tDiffuseBlur, normal_uv);
        merge = base_normal;
        blur = blur_normal;
      #endif

      float depthFactor = 0.0001;
      float blurFactor = 0.0;

      #ifdef USE_DEPTH
        vec4 depth = texture2DProj(tDepth, new_vUv);
        depthFactor = smoothstep(minDepthThreshold, maxDepthThreshold, 1.0-(depth.r * depth.a));
        depthFactor *= depthScale;
        depthFactor = max(0.0001, min(1.0, depthFactor));

        #ifdef USE_BLUR
          blur = blur * min(1.0, depthFactor + depthToBlurRatioBias);
          merge = merge * min(1.0, depthFactor + 0.5);
        #else
          merge = merge * depthFactor;
        #endif

      #endif

      float reflectorRoughnessFactor = roughness;
      #ifdef USE_ROUGHNESSMAP
        vec4 reflectorTexelRoughness = texture2D( roughnessMap, vUv );
        reflectorRoughnessFactor *= reflectorTexelRoughness.g;
      #endif

      #ifdef USE_BLUR
        blurFactor = min(1.0, mixBlur * reflectorRoughnessFactor);
        merge = mix(merge, blur, blurFactor);
      #endif

      vec4 newMerge = vec4(0.0, 0.0, 0.0, 1.0);
      newMerge.r = (merge.r - 0.5) * mixContrast + 0.5;
      newMerge.g = (merge.g - 0.5) * mixContrast + 0.5;
      newMerge.b = (merge.b - 0.5) * mixContrast + 0.5;

      diffuseColor.rgb = diffuseColor.rgb * ((1.0 - min(1.0, mirror)) + newMerge.rgb * mixStrength);
      `);
  }
  get tDiffuse() {
    return this._tDiffuse.value;
  }
  set tDiffuse(v4) {
    this._tDiffuse.value = v4;
  }
  get tDepth() {
    return this._tDepth.value;
  }
  set tDepth(v4) {
    this._tDepth.value = v4;
  }
  get distortionMap() {
    return this._distortionMap.value;
  }
  set distortionMap(v4) {
    this._distortionMap.value = v4;
  }
  get tDiffuseBlur() {
    return this._tDiffuseBlur.value;
  }
  set tDiffuseBlur(v4) {
    this._tDiffuseBlur.value = v4;
  }
  get textureMatrix() {
    return this._textureMatrix.value;
  }
  set textureMatrix(v4) {
    this._textureMatrix.value = v4;
  }
  get hasBlur() {
    return this._hasBlur.value;
  }
  set hasBlur(v4) {
    this._hasBlur.value = v4;
  }
  get mirror() {
    return this._mirror.value;
  }
  set mirror(v4) {
    this._mirror.value = v4;
  }
  get mixBlur() {
    return this._mixBlur.value;
  }
  set mixBlur(v4) {
    this._mixBlur.value = v4;
  }
  get mixStrength() {
    return this._blurStrength.value;
  }
  set mixStrength(v4) {
    this._blurStrength.value = v4;
  }
  get minDepthThreshold() {
    return this._minDepthThreshold.value;
  }
  set minDepthThreshold(v4) {
    this._minDepthThreshold.value = v4;
  }
  get maxDepthThreshold() {
    return this._maxDepthThreshold.value;
  }
  set maxDepthThreshold(v4) {
    this._maxDepthThreshold.value = v4;
  }
  get depthScale() {
    return this._depthScale.value;
  }
  set depthScale(v4) {
    this._depthScale.value = v4;
  }
  get depthToBlurRatioBias() {
    return this._depthToBlurRatioBias.value;
  }
  set depthToBlurRatioBias(v4) {
    this._depthToBlurRatioBias.value = v4;
  }
  get distortion() {
    return this._distortion.value;
  }
  set distortion(v4) {
    this._distortion.value = v4;
  }
  get mixContrast() {
    return this._mixContrast.value;
  }
  set mixContrast(v4) {
    this._mixContrast.value = v4;
  }
};

// node_modules/@react-three/drei/core/MeshReflectorMaterial.js
extend({
  MeshReflectorMaterialImpl: MeshReflectorMaterial
});
var MeshReflectorMaterial2 = React54.forwardRef((_a, ref) => {
  var _b = _a, {
    mixBlur = 0,
    mixStrength = 1,
    resolution = 256,
    blur = [0, 0],
    minDepthThreshold = 0.9,
    maxDepthThreshold = 1,
    depthScale = 0,
    depthToBlurRatioBias = 0.25,
    mirror = 0,
    distortion = 1,
    mixContrast = 1,
    distortionMap,
    reflectorOffset = 0
  } = _b, props = __objRest(_b, [
    "mixBlur",
    "mixStrength",
    "resolution",
    "blur",
    "minDepthThreshold",
    "maxDepthThreshold",
    "depthScale",
    "depthToBlurRatioBias",
    "mirror",
    "distortion",
    "mixContrast",
    "distortionMap",
    "reflectorOffset"
  ]);
  const gl = useThree(({
    gl: gl2
  }) => gl2);
  const camera = useThree(({
    camera: camera2
  }) => camera2);
  const scene = useThree(({
    scene: scene2
  }) => scene2);
  blur = Array.isArray(blur) ? blur : [blur, blur];
  const hasBlur = blur[0] + blur[1] > 0;
  const materialRef = React54.useRef(null);
  const [reflectorPlane] = React54.useState(() => new Plane());
  const [normal] = React54.useState(() => new Vector3());
  const [reflectorWorldPosition] = React54.useState(() => new Vector3());
  const [cameraWorldPosition] = React54.useState(() => new Vector3());
  const [rotationMatrix] = React54.useState(() => new Matrix4());
  const [lookAtPosition] = React54.useState(() => new Vector3(0, 0, -1));
  const [clipPlane] = React54.useState(() => new Vector4());
  const [view] = React54.useState(() => new Vector3());
  const [target2] = React54.useState(() => new Vector3());
  const [q] = React54.useState(() => new Vector4());
  const [textureMatrix] = React54.useState(() => new Matrix4());
  const [virtualCamera] = React54.useState(() => new PerspectiveCamera());
  const beforeRender = React54.useCallback(() => {
    var _materialRef$current;
    const parent = materialRef.current.parent || ((_materialRef$current = materialRef.current) == null ? void 0 : _materialRef$current.__r3f.parent);
    if (!parent)
      return;
    reflectorWorldPosition.setFromMatrixPosition(parent.matrixWorld);
    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);
    rotationMatrix.extractRotation(parent.matrixWorld);
    normal.set(0, 0, 1);
    normal.applyMatrix4(rotationMatrix);
    reflectorWorldPosition.addScaledVector(normal, reflectorOffset);
    view.subVectors(reflectorWorldPosition, cameraWorldPosition);
    if (view.dot(normal) > 0)
      return;
    view.reflect(normal).negate();
    view.add(reflectorWorldPosition);
    rotationMatrix.extractRotation(camera.matrixWorld);
    lookAtPosition.set(0, 0, -1);
    lookAtPosition.applyMatrix4(rotationMatrix);
    lookAtPosition.add(cameraWorldPosition);
    target2.subVectors(reflectorWorldPosition, lookAtPosition);
    target2.reflect(normal).negate();
    target2.add(reflectorWorldPosition);
    virtualCamera.position.copy(view);
    virtualCamera.up.set(0, 1, 0);
    virtualCamera.up.applyMatrix4(rotationMatrix);
    virtualCamera.up.reflect(normal);
    virtualCamera.lookAt(target2);
    virtualCamera.far = camera.far;
    virtualCamera.updateMatrixWorld();
    virtualCamera.projectionMatrix.copy(camera.projectionMatrix);
    textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);
    textureMatrix.multiply(virtualCamera.projectionMatrix);
    textureMatrix.multiply(virtualCamera.matrixWorldInverse);
    textureMatrix.multiply(parent.matrixWorld);
    reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);
    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);
    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);
    const projectionMatrix = virtualCamera.projectionMatrix;
    q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];
    q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];
    q.z = -1;
    q.w = (1 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];
    clipPlane.multiplyScalar(2 / clipPlane.dot(q));
    projectionMatrix.elements[2] = clipPlane.x;
    projectionMatrix.elements[6] = clipPlane.y;
    projectionMatrix.elements[10] = clipPlane.z + 1;
    projectionMatrix.elements[14] = clipPlane.w;
  }, [camera, reflectorOffset]);
  const [fbo1, fbo2, blurpass, reflectorProps] = React54.useMemo(() => {
    const parameters = {
      minFilter: LinearFilter,
      magFilter: LinearFilter,
      encoding: gl.outputEncoding,
      type: HalfFloatType
    };
    const fbo12 = new WebGLRenderTarget(resolution, resolution, parameters);
    fbo12.depthBuffer = true;
    fbo12.depthTexture = new DepthTexture(resolution, resolution);
    fbo12.depthTexture.format = DepthFormat;
    fbo12.depthTexture.type = UnsignedShortType;
    const fbo22 = new WebGLRenderTarget(resolution, resolution, parameters);
    const blurpass2 = new BlurPass({
      gl,
      resolution,
      width: blur[0],
      height: blur[1],
      minDepthThreshold,
      maxDepthThreshold,
      depthScale,
      depthToBlurRatioBias
    });
    const reflectorProps2 = {
      mirror,
      textureMatrix,
      mixBlur,
      tDiffuse: fbo12.texture,
      tDepth: fbo12.depthTexture,
      tDiffuseBlur: fbo22.texture,
      hasBlur,
      mixStrength,
      minDepthThreshold,
      maxDepthThreshold,
      depthScale,
      depthToBlurRatioBias,
      distortion,
      distortionMap,
      mixContrast,
      "defines-USE_BLUR": hasBlur ? "" : void 0,
      "defines-USE_DEPTH": depthScale > 0 ? "" : void 0,
      "defines-USE_DISTORTION": distortionMap ? "" : void 0
    };
    return [fbo12, fbo22, blurpass2, reflectorProps2];
  }, [gl, blur, textureMatrix, resolution, mirror, hasBlur, mixBlur, mixStrength, minDepthThreshold, maxDepthThreshold, depthScale, depthToBlurRatioBias, distortion, distortionMap, mixContrast]);
  useFrame(() => {
    var _materialRef$current2;
    const parent = materialRef.current.parent || ((_materialRef$current2 = materialRef.current) == null ? void 0 : _materialRef$current2.__r3f.parent);
    if (!parent)
      return;
    parent.visible = false;
    const currentXrEnabled = gl.xr.enabled;
    const currentShadowAutoUpdate = gl.shadowMap.autoUpdate;
    beforeRender();
    gl.xr.enabled = false;
    gl.shadowMap.autoUpdate = false;
    gl.setRenderTarget(fbo1);
    gl.state.buffers.depth.setMask(true);
    if (!gl.autoClear)
      gl.clear();
    gl.render(scene, virtualCamera);
    if (hasBlur)
      blurpass.render(gl, fbo1, fbo2);
    gl.xr.enabled = currentXrEnabled;
    gl.shadowMap.autoUpdate = currentShadowAutoUpdate;
    parent.visible = true;
    gl.setRenderTarget(null);
  });
  return React54.createElement("meshReflectorMaterialImpl", _extends({
    attach: "material",
    key: "key" + reflectorProps["defines-USE_BLUR"] + reflectorProps["defines-USE_DEPTH"] + reflectorProps["defines-USE_DISTORTION"],
    ref: react_merge_refs_esm_default([materialRef, ref])
  }, reflectorProps, props));
});

// node_modules/@react-three/drei/core/PointMaterial.js
init_extends();
init_three_module();
var React55 = __toESM(require_react());
var PointMaterialImpl = class extends PointsMaterial {
  constructor(props) {
    super(props);
    this.onBeforeCompile = (shader) => {
      shader.fragmentShader = shader.fragmentShader.replace("#include <output_fragment>", `
        #include <output_fragment>
      vec2 cxy = 2.0 * gl_PointCoord - 1.0;
      float r = dot(cxy, cxy);
      float delta = fwidth(r);     
      float mask = 1.0 - smoothstep(1.0 - delta, 1.0 + delta, r);
      gl_FragColor = vec4(gl_FragColor.rgb, mask * gl_FragColor.a );
      `);
    };
  }
};
var PointMaterial = React55.forwardRef((props, ref) => {
  const [material] = React55.useState(() => new PointMaterialImpl(null));
  return React55.createElement("primitive", _extends({}, props, {
    object: material,
    ref,
    attach: "material"
  }));
});

// node_modules/@react-three/drei/core/softShadows.js
init_three_module();
var pcss = ({
  frustum = 3.75,
  size = 5e-3,
  near = 9.5,
  samples = 17,
  rings = 11
} = {}) => `#define LIGHT_WORLD_SIZE ${size}
#define LIGHT_FRUSTUM_WIDTH ${frustum}
#define LIGHT_SIZE_UV (LIGHT_WORLD_SIZE / LIGHT_FRUSTUM_WIDTH)
#define NEAR_PLANE ${near}

#define NUM_SAMPLES ${samples}
#define NUM_RINGS ${rings}
#define BLOCKER_SEARCH_NUM_SAMPLES NUM_SAMPLES
#define PCF_NUM_SAMPLES NUM_SAMPLES

vec2 poissonDisk[NUM_SAMPLES];

void initPoissonSamples(const in vec2 randomSeed) {
  float ANGLE_STEP = PI2 * float(NUM_RINGS) / float(NUM_SAMPLES);
  float INV_NUM_SAMPLES = 1.0 / float(NUM_SAMPLES);
  float angle = rand(randomSeed) * PI2;
  float radius = INV_NUM_SAMPLES;
  float radiusStep = radius;
  for (int i = 0; i < NUM_SAMPLES; i++) {
    poissonDisk[i] = vec2(cos(angle), sin(angle)) * pow(radius, 0.75);
    radius += radiusStep;
    angle += ANGLE_STEP;
  }
}

float penumbraSize(const in float zReceiver, const in float zBlocker) { // Parallel plane estimation
  return (zReceiver - zBlocker) / zBlocker;
}

float findBlocker(sampler2D shadowMap, const in vec2 uv, const in float zReceiver) {
  float searchRadius = LIGHT_SIZE_UV * (zReceiver - NEAR_PLANE) / zReceiver;
  float blockerDepthSum = 0.0;
  int numBlockers = 0;
  for (int i = 0; i < BLOCKER_SEARCH_NUM_SAMPLES; i++) {
    float shadowMapDepth = unpackRGBAToDepth(texture2D(shadowMap, uv + poissonDisk[i] * searchRadius));
    if (shadowMapDepth < zReceiver) {
      blockerDepthSum += shadowMapDepth;
      numBlockers++;
    }
  }
  if (numBlockers == 0) return -1.0;
  return blockerDepthSum / float(numBlockers);
}

float PCF_Filter(sampler2D shadowMap, vec2 uv, float zReceiver, float filterRadius) {
  float sum = 0.0;
  for (int i = 0; i < PCF_NUM_SAMPLES; i++) {
    float depth = unpackRGBAToDepth(texture2D(shadowMap, uv + poissonDisk[ i ] * filterRadius));
    if (zReceiver <= depth) sum += 1.0;
  }
  for (int i = 0; i < PCF_NUM_SAMPLES; i++) {
    float depth = unpackRGBAToDepth(texture2D(shadowMap, uv + -poissonDisk[ i ].yx * filterRadius));
    if (zReceiver <= depth) sum += 1.0;
  }
  return sum / (2.0 * float(PCF_NUM_SAMPLES));
}

float PCSS(sampler2D shadowMap, vec4 coords) {
  vec2 uv = coords.xy;
  float zReceiver = coords.z; // Assumed to be eye-space z in this code
  initPoissonSamples(uv);
  float avgBlockerDepth = findBlocker(shadowMap, uv, zReceiver);
  if (avgBlockerDepth == -1.0) return 1.0;
  float penumbraRatio = penumbraSize(zReceiver, avgBlockerDepth);
  float filterRadius = penumbraRatio * LIGHT_SIZE_UV * NEAR_PLANE / zReceiver;
  return PCF_Filter(shadowMap, uv, zReceiver, filterRadius);
}`;
var deployed = false;
var softShadows = (props) => {
  if (!deployed) {
    deployed = true;
    let shader = ShaderChunk.shadowmap_pars_fragment;
    shader = shader.replace("#ifdef USE_SHADOWMAP", "#ifdef USE_SHADOWMAP\n" + pcss(__spreadValues({}, props)));
    shader = shader.replace("#if defined( SHADOWMAP_TYPE_PCF )", "\nreturn PCSS(shadowMap, shadowCoord);\n#if defined( SHADOWMAP_TYPE_PCF )");
    ShaderChunk.shadowmap_pars_fragment = shader;
  }
};

// node_modules/@react-three/drei/core/shapes.js
init_extends();
var React56 = __toESM(require_react());
function create2(type) {
  const El = type + "BufferGeometry";
  return React56.forwardRef((_a, ref) => {
    var _b = _a, {
      args,
      children
    } = _b, props = __objRest(_b, [
      "args",
      "children"
    ]);
    return React56.createElement("mesh", _extends({
      ref
    }, props), React56.createElement(El, {
      attach: "geometry",
      args
    }), children);
  });
}
var Box = create2("box");
var Circle = create2("circle");
var Cone = create2("cone");
var Cylinder = create2("cylinder");
var Sphere2 = create2("sphere");
var Plane2 = create2("plane");
var Tube = create2("tube");
var Torus = create2("torus");
var TorusKnot = create2("torusKnot");
var Tetrahedron = create2("tetrahedron");
var Ring = create2("ring");
var Polyhedron = create2("polyhedron");
var Icosahedron = create2("icosahedron");
var Octahedron = create2("octahedron");
var Dodecahedron = create2("dodecahedron");
var Extrude = create2("extrude");
var Lathe = create2("lathe");
var Capsule = create2("capsule");

// node_modules/@react-three/drei/core/RoundedBox.js
init_extends();
var React57 = __toESM(require_react());
init_three_module();
var eps = 1e-5;
function createShape(width, height, radius0) {
  const shape = new Shape();
  const radius = radius0 - eps;
  shape.absarc(eps, eps, eps, -Math.PI / 2, -Math.PI, true);
  shape.absarc(eps, height - radius * 2, eps, Math.PI, Math.PI / 2, true);
  shape.absarc(width - radius * 2, height - radius * 2, eps, Math.PI / 2, 0, true);
  shape.absarc(width - radius * 2, eps, eps, 0, -Math.PI / 2, true);
  return shape;
}
var RoundedBox = React57.forwardRef(function RoundedBox2(_a, ref) {
  var _b = _a, {
    args: [width = 1, height = 1, depth = 1] = [],
    radius = 0.05,
    steps = 1,
    smoothness = 4,
    children
  } = _b, rest = __objRest(_b, [
    "args",
    "radius",
    "steps",
    "smoothness",
    "children"
  ]);
  const shape = React57.useMemo(() => createShape(width, height, radius), [width, height, radius]);
  const params = React57.useMemo(() => ({
    depth: depth - radius * 2,
    bevelEnabled: true,
    bevelSegments: smoothness * 2,
    steps,
    bevelSize: radius - eps,
    bevelThickness: radius,
    curveSegments: smoothness
  }), [depth, radius, smoothness]);
  const geomRef = React57.useRef();
  React57.useLayoutEffect(() => {
    if (geomRef.current) {
      geomRef.current.center();
    }
  }, [shape, params]);
  return React57.createElement("mesh", _extends({
    ref
  }, rest), React57.createElement("extrudeGeometry", {
    ref: geomRef,
    args: [shape, params]
  }), children);
});

// node_modules/@react-three/drei/core/ScreenQuad.js
init_extends();
init_three_module();
var React58 = __toESM(require_react());
function createScreenQuadGeometry() {
  const geometry = new BufferGeometry();
  const vertices = new Float32Array([-1, -1, 3, -1, -1, 3]);
  geometry.setAttribute("position", new BufferAttribute(vertices, 2));
  return geometry;
}
var ScreenQuad = React58.forwardRef(function ScreenQuad2(_a, ref) {
  var _b = _a, {
    children
  } = _b, restProps = __objRest(_b, [
    "children"
  ]);
  const geometry = React58.useMemo(createScreenQuadGeometry, []);
  return React58.createElement("mesh", _extends({
    ref,
    geometry,
    frustumCulled: false
  }, restProps), children);
});

// node_modules/@react-three/drei/core/Center.js
init_extends();
init_three_module();
var React59 = __toESM(require_react());
var Center = React59.forwardRef(function Center2(_a, ref) {
  var _b = _a, {
    children,
    alignTop
  } = _b, props = __objRest(_b, [
    "children",
    "alignTop"
  ]);
  const outer = React59.useRef(null);
  const inner = React59.useRef(null);
  React59.useLayoutEffect(() => {
    outer.current.position.set(0, 0, 0);
    outer.current.updateWorldMatrix(true, true);
    const box3 = new Box3().setFromObject(inner.current);
    const center = new Vector3();
    const sphere = new Sphere();
    const height = box3.max.y - box3.min.y;
    box3.getCenter(center);
    box3.getBoundingSphere(sphere);
    outer.current.position.set(-center.x, -center.y + (alignTop ? height / 2 : 0), -center.z);
  }, [children]);
  return React59.createElement("group", _extends({
    ref
  }, props), React59.createElement("group", {
    ref: outer
  }, React59.createElement("group", {
    ref: inner
  }, children)));
});

// node_modules/@react-three/drei/core/Bounds.js
var React60 = __toESM(require_react());
init_three_module();
init_react_three_fiber_esm();
var isOrthographic = (def) => def && def.isOrthographicCamera;
var isBox3 = (def) => def && def.isBox3;
var context4 = React60.createContext(null);
function Bounds({
  children,
  damping = 6,
  fit,
  clip,
  observe,
  margin = 1.2,
  eps: eps2 = 0.01,
  onFit
}) {
  const ref = React60.useRef(null);
  const {
    camera,
    invalidate,
    size,
    controls: controlsImpl
  } = useThree();
  const controls = controlsImpl;
  const onFitRef = React60.useRef(onFit);
  onFitRef.current = onFit;
  function equals(a2, b) {
    return Math.abs(a2.x - b.x) < eps2 && Math.abs(a2.y - b.y) < eps2 && Math.abs(a2.z - b.z) < eps2;
  }
  function damp(v4, t2, lambda, delta) {
    v4.x = MathUtils.damp(v4.x, t2.x, lambda, delta);
    v4.y = MathUtils.damp(v4.y, t2.y, lambda, delta);
    v4.z = MathUtils.damp(v4.z, t2.z, lambda, delta);
  }
  const [current] = React60.useState(() => ({
    animating: false,
    focus: new Vector3(),
    camera: new Vector3(),
    zoom: 1
  }));
  const [goal] = React60.useState(() => ({
    focus: new Vector3(),
    camera: new Vector3(),
    zoom: 1
  }));
  const [box] = React60.useState(() => new Box3());
  const api = React60.useMemo(() => {
    function getSize() {
      const size2 = box.getSize(new Vector3());
      const center = box.getCenter(new Vector3());
      const maxSize = Math.max(size2.x, size2.y, size2.z);
      const fitHeightDistance = isOrthographic(camera) ? maxSize * 4 : maxSize / (2 * Math.atan(Math.PI * camera.fov / 360));
      const fitWidthDistance = isOrthographic(camera) ? maxSize * 4 : fitHeightDistance / camera.aspect;
      const distance = margin * Math.max(fitHeightDistance, fitWidthDistance);
      return {
        box,
        size: size2,
        center,
        distance
      };
    }
    return {
      getSize,
      refresh(object) {
        if (isBox3(object))
          box.copy(object);
        else {
          const target2 = object || ref.current;
          target2.updateWorldMatrix(true, true);
          box.setFromObject(target2);
        }
        if (box.isEmpty()) {
          const max = camera.position.length() || 10;
          box.setFromCenterAndSize(new Vector3(), new Vector3(max, max, max));
        }
        if ((controls == null ? void 0 : controls.constructor.name) === "OrthographicTrackballControls") {
          const {
            distance
          } = getSize();
          const direction = camera.position.clone().sub(controls.target).normalize().multiplyScalar(distance);
          const newPos = controls.target.clone().add(direction);
          camera.position.copy(newPos);
        }
        return this;
      },
      clip() {
        const {
          distance
        } = getSize();
        if (controls)
          controls.maxDistance = distance * 10;
        camera.near = distance / 100;
        camera.far = distance * 100;
        camera.updateProjectionMatrix();
        if (controls)
          controls.update();
        invalidate();
        return this;
      },
      fit() {
        current.camera.copy(camera.position);
        if (controls)
          current.focus.copy(controls.target);
        const {
          center,
          distance
        } = getSize();
        const direction = center.clone().sub(camera.position).normalize().multiplyScalar(distance);
        goal.camera.copy(center).sub(direction);
        goal.focus.copy(center);
        if (isOrthographic(camera)) {
          current.zoom = camera.zoom;
          let maxHeight = 0, maxWidth = 0;
          const vertices = [new Vector3(box.min.x, box.min.y, box.min.z), new Vector3(box.min.x, box.max.y, box.min.z), new Vector3(box.min.x, box.min.y, box.max.z), new Vector3(box.min.x, box.max.y, box.max.z), new Vector3(box.max.x, box.max.y, box.max.z), new Vector3(box.max.x, box.max.y, box.min.z), new Vector3(box.max.x, box.min.y, box.max.z), new Vector3(box.max.x, box.min.y, box.min.z)];
          center.applyMatrix4(camera.matrixWorldInverse);
          for (const v4 of vertices) {
            v4.applyMatrix4(camera.matrixWorldInverse);
            maxHeight = Math.max(maxHeight, Math.abs(v4.y - center.y));
            maxWidth = Math.max(maxWidth, Math.abs(v4.x - center.x));
          }
          maxHeight *= 2;
          maxWidth *= 2;
          const zoomForHeight = (camera.top - camera.bottom) / maxHeight;
          const zoomForWidth = (camera.right - camera.left) / maxWidth;
          goal.zoom = Math.min(zoomForHeight, zoomForWidth) / margin;
          if (!damping) {
            camera.zoom = goal.zoom;
            camera.updateProjectionMatrix();
          }
        }
        if (damping) {
          current.animating = true;
        } else {
          camera.position.copy(goal.camera);
          camera.lookAt(goal.focus);
          if (controls) {
            controls.target.copy(goal.focus);
            controls.update();
          }
        }
        if (onFitRef.current)
          onFitRef.current(this.getSize());
        invalidate();
        return this;
      }
    };
  }, [box, camera, controls, margin, damping, invalidate]);
  React60.useLayoutEffect(() => {
    if (controls) {
      const callback = () => current.animating = false;
      controls.addEventListener("start", callback);
      return () => controls.removeEventListener("start", callback);
    }
  }, [controls]);
  const count = React60.useRef(0);
  React60.useLayoutEffect(() => {
    if (observe || count.current++ === 0) {
      api.refresh();
      if (fit)
        api.fit();
      if (clip)
        api.clip();
    }
  }, [size, clip, fit, observe, camera, controls]);
  useFrame((state, delta) => {
    if (current.animating) {
      damp(current.focus, goal.focus, damping, delta);
      damp(current.camera, goal.camera, damping, delta);
      current.zoom = MathUtils.damp(current.zoom, goal.zoom, damping, delta);
      camera.position.copy(current.camera);
      if (isOrthographic(camera)) {
        camera.zoom = current.zoom;
        camera.updateProjectionMatrix();
      }
      if (!controls) {
        camera.lookAt(current.focus);
      } else {
        controls.target.copy(current.focus);
        controls.update();
      }
      invalidate();
      if (isOrthographic(camera) && !(Math.abs(current.zoom - goal.zoom) < eps2))
        return;
      if (!isOrthographic(camera) && !equals(current.camera, goal.camera))
        return;
      if (controls && !equals(current.focus, goal.focus))
        return;
      current.animating = false;
    }
  });
  return React60.createElement("group", {
    ref
  }, React60.createElement(context4.Provider, {
    value: api
  }, children));
}
function useBounds() {
  return React60.useContext(context4);
}

// node_modules/@react-three/drei/core/CameraShake.js
var React61 = __toESM(require_react());
init_react_three_fiber_esm();
var CameraShake = React61.forwardRef(({
  intensity = 1,
  decay,
  decayRate = 0.65,
  maxYaw = 0.1,
  maxPitch = 0.1,
  maxRoll = 0.1,
  yawFrequency = 0.1,
  pitchFrequency = 0.1,
  rollFrequency = 0.1
}, ref) => {
  const camera = useThree((state) => state.camera);
  const defaultControls = useThree((state) => state.controls);
  const intensityRef = React61.useRef(intensity);
  const initialRotation = React61.useRef(camera.rotation.clone());
  const [yawNoise] = React61.useState(() => new SimplexNoise());
  const [pitchNoise] = React61.useState(() => new SimplexNoise());
  const [rollNoise] = React61.useState(() => new SimplexNoise());
  const constrainIntensity = () => {
    if (intensityRef.current < 0 || intensityRef.current > 1) {
      intensityRef.current = intensityRef.current < 0 ? 0 : 1;
    }
  };
  React61.useImperativeHandle(ref, () => ({
    getIntensity: () => intensityRef.current,
    setIntensity: (val) => {
      intensityRef.current = val;
      constrainIntensity();
    }
  }), []);
  React61.useEffect(() => {
    if (defaultControls) {
      const callback = () => void (initialRotation.current = camera.rotation.clone());
      defaultControls.addEventListener("change", callback);
      callback();
      return () => void defaultControls.removeEventListener("change", callback);
    }
  }, [camera, defaultControls]);
  useFrame((state, delta) => {
    const shake = Math.pow(intensityRef.current, 2);
    const yaw = maxYaw * shake * yawNoise.noise(state.clock.elapsedTime * yawFrequency, 1);
    const pitch = maxPitch * shake * pitchNoise.noise(state.clock.elapsedTime * pitchFrequency, 1);
    const roll = maxRoll * shake * rollNoise.noise(state.clock.elapsedTime * rollFrequency, 1);
    camera.rotation.set(initialRotation.current.x + pitch, initialRotation.current.y + yaw, initialRotation.current.z + roll);
    if (decay && intensityRef.current > 0) {
      intensityRef.current -= decayRate * delta;
      constrainIntensity();
    }
  });
  return null;
});

// node_modules/@react-three/drei/core/Float.js
var React62 = __toESM(require_react());
init_react_three_fiber_esm();
init_three_module();
var Float = React62.forwardRef((_a, forwardRef49) => {
  var _b = _a, {
    children,
    speed = 1,
    rotationIntensity = 1,
    floatIntensity = 1,
    floatingRange = [-0.1, 0.1]
  } = _b, props = __objRest(_b, [
    "children",
    "speed",
    "rotationIntensity",
    "floatIntensity",
    "floatingRange"
  ]);
  const ref = React62.useRef(null);
  const offset = React62.useRef(Math.random() * 1e4);
  useFrame((state) => {
    var _floatingRange$, _floatingRange$2;
    const t2 = offset.current + state.clock.getElapsedTime();
    ref.current.rotation.x = Math.cos(t2 / 4 * speed) / 8 * rotationIntensity;
    ref.current.rotation.y = Math.sin(t2 / 4 * speed) / 8 * rotationIntensity;
    ref.current.rotation.z = Math.sin(t2 / 4 * speed) / 20 * rotationIntensity;
    let yPosition = Math.sin(t2 / 4 * speed) / 10;
    yPosition = MathUtils.mapLinear(yPosition, -0.1, 0.1, (_floatingRange$ = floatingRange == null ? void 0 : floatingRange[0]) !== null && _floatingRange$ !== void 0 ? _floatingRange$ : -0.1, (_floatingRange$2 = floatingRange == null ? void 0 : floatingRange[1]) !== null && _floatingRange$2 !== void 0 ? _floatingRange$2 : 0.1);
    ref.current.position.y = yPosition * floatIntensity;
  });
  return React62.createElement("group", props, React62.createElement("group", {
    ref: react_merge_refs_esm_default([ref, forwardRef49])
  }, children));
});

// node_modules/@react-three/drei/core/Stage.js
init_extends();
var React65 = __toESM(require_react());
init_three_module();
init_react_three_fiber_esm();

// node_modules/@react-three/drei/core/Environment.js
init_extends();
var React63 = __toESM(require_react());
init_react_three_fiber_esm();
init_three_module();

// node_modules/@react-three/drei/helpers/environment-assets.js
var presetsObj = {
  sunset: "venice/venice_sunset_1k.hdr",
  dawn: "kiara/kiara_1_dawn_1k.hdr",
  night: "dikhololo/dikhololo_night_1k.hdr",
  warehouse: "empty-wharehouse/empty_warehouse_01_1k.hdr",
  forest: "forrest-slope/forest_slope_1k.hdr",
  apartment: "lebombo/lebombo_1k.hdr",
  studio: "studio-small-3/studio_small_03_1k.hdr",
  city: "potsdamer-platz/potsdamer_platz_1k.hdr",
  park: "rooitou/rooitou_park_1k.hdr",
  lobby: "st-fagans/st_fagans_interior_1k.hdr"
};

// node_modules/@react-three/drei/helpers/glsl/GroundProjection.vert.glsl.js
var vertexShader = "#define GLSLIFY 1\nvarying vec3 vWorldPosition;void main(){vec4 worldPosition=modelMatrix*vec4(position,1.0);vWorldPosition=worldPosition.xyz;gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.0);}";

// node_modules/@react-three/drei/helpers/glsl/GroundProjection.frag.glsl.js
var fragmentShader = "#define GLSLIFY 1\n#define ENVMAP_TYPE_CUBE_UV\nvarying vec3 vWorldPosition;uniform float radius;uniform float height;\n#ifdef ENVMAP_TYPE_CUBE\nuniform samplerCube cubemap;\n#else\nuniform sampler2D cubemap;\n#endif\nfloat diskIntersect(in vec3 ro,in vec3 rd,vec3 c,vec3 n,float r){vec3 o=ro-c;float t=-dot(n,o)/dot(rd,n);vec3 q=o+rd*t;return(dot(q,q)<r*r)? t : 1e6;}float sphereIntersect(in vec3 ro,in vec3 rd,in vec3 ce,float ra){vec3 oc=ro-ce;float b=dot(oc,rd);float c=dot(oc,oc)-ra*ra;float h=b*b-c;if(h<0.0)-1.0;h=sqrt(h);return-b+h;}vec3 project(){vec3 p=normalize(vWorldPosition);vec3 camPos=cameraPosition;camPos.y-=height;float intersection=sphereIntersect(camPos,p,vec3(0.),radius);if(intersection>0.){vec3 h=vec3(0.0,-height,0.0);float intersection2=diskIntersect(camPos,p,h,vec3(0.0,-1.0,0.0),radius);p=(camPos+min(intersection,intersection2)*p)/radius;}else{p=vec3(0.0,1.0,0.0);}return p;}\n#include <common>\n#include <cube_uv_reflection_fragment>\nvoid main(){vec3 projectedWorldPosition=project();\n#ifdef ENVMAP_TYPE_CUBE\nvec3 outcolor=textureCube(cubemap,projectedWorldPosition).rgb;\n#else\nvec3 direction=normalize(projectedWorldPosition);vec2 uv=equirectUv(direction);vec3 outcolor=texture2D(cubemap,uv).rgb;\n#endif\ngl_FragColor=vec4(outcolor,1.0);\n#include <tonemapping_fragment>\n#include <encodings_fragment>\n}";

// node_modules/@react-three/drei/core/Environment.js
var CUBEMAP_ROOT = "https://market-assets.fra1.cdn.digitaloceanspaces.com/market-assets/hdris/";
var isCubeTexture = (def) => def && def.isCubeTexture;
var isRef = (obj) => obj.current && obj.current.isScene;
var resolveScene = (scene) => isRef(scene) ? scene.current : scene;
function EnvironmentMap({
  scene,
  background = false,
  map
}) {
  const defaultScene = useThree((state) => state.scene);
  React63.useLayoutEffect(() => {
    if (map) {
      const target2 = resolveScene(scene || defaultScene);
      const oldbg = target2.background;
      const oldenv = target2.environment;
      if (background !== "only")
        target2.environment = map;
      if (background)
        target2.background = map;
      return () => {
        if (background !== "only")
          target2.environment = oldenv;
        if (background)
          target2.background = oldbg;
      };
    }
  }, [defaultScene, scene, map, background]);
  return null;
}
function useEnvironment({
  files = ["/px.png", "/nx.png", "/py.png", "/ny.png", "/pz.png", "/nz.png"],
  path = "",
  preset = void 0,
  extensions: extensions2
}) {
  if (preset) {
    if (!(preset in presetsObj))
      throw new Error("Preset must be one of: " + Object.keys(presetsObj).join(", "));
    files = presetsObj[preset];
    path = CUBEMAP_ROOT;
  }
  const isCubeMap = Array.isArray(files);
  const loader = isCubeMap ? CubeTextureLoader : RGBELoader;
  const loaderResult = useLoader(loader, isCubeMap ? [files] : files, (loader2) => {
    loader2.setPath(path);
    if (extensions2)
      extensions2(loader2);
  });
  const texture = isCubeMap ? loaderResult[0] : loaderResult;
  texture.mapping = isCubeMap ? CubeReflectionMapping : EquirectangularReflectionMapping;
  return texture;
}
function EnvironmentCube(_a) {
  var _b = _a, {
    background = false,
    scene
  } = _b, rest = __objRest(_b, [
    "background",
    "scene"
  ]);
  const texture = useEnvironment(rest);
  const defaultScene = useThree((state) => state.scene);
  React63.useLayoutEffect(() => {
    const target2 = resolveScene(scene || defaultScene);
    const oldbg = target2.background;
    const oldenv = target2.environment;
    if (background !== "only")
      target2.environment = texture;
    if (background)
      target2.background = texture;
    return () => {
      if (background !== "only")
        target2.environment = oldenv;
      if (background)
        target2.background = oldbg;
    };
  }, [texture, background, scene, defaultScene]);
  return null;
}
function EnvironmentPortal({
  children,
  near = 1,
  far = 1e3,
  resolution = 256,
  frames = 1,
  map,
  background = false,
  scene,
  files,
  path,
  preset = void 0,
  extensions: extensions2
}) {
  const gl = useThree((state) => state.gl);
  const defaultScene = useThree((state) => state.scene);
  const camera = React63.useRef(null);
  const [virtualScene] = React63.useState(() => new Scene());
  const fbo = React63.useMemo(() => {
    const fbo2 = new WebGLCubeRenderTarget(resolution);
    fbo2.texture.type = HalfFloatType;
    return fbo2;
  }, [resolution]);
  React63.useLayoutEffect(() => {
    if (frames === 1)
      camera.current.update(gl, virtualScene);
    const target2 = resolveScene(scene || defaultScene);
    const oldbg = target2.background;
    const oldenv = target2.environment;
    if (background !== "only")
      target2.environment = fbo.texture;
    if (background)
      target2.background = fbo.texture;
    return () => {
      if (background !== "only")
        target2.environment = oldenv;
      if (background)
        target2.background = oldbg;
    };
  }, [children, virtualScene, fbo.texture, scene, defaultScene, background, frames, gl]);
  let count = 1;
  useFrame(() => {
    if (frames === Infinity || count < frames) {
      camera.current.update(gl, virtualScene);
      count++;
    }
  });
  return React63.createElement(React63.Fragment, null, createPortal(React63.createElement(React63.Fragment, null, children, React63.createElement("cubeCamera", {
    ref: camera,
    args: [near, far, fbo]
  }), files || preset ? React63.createElement(EnvironmentCube, {
    background: true,
    files,
    preset,
    path,
    extensions: extensions2
  }) : map ? React63.createElement(EnvironmentMap, {
    background: true,
    map,
    extensions: extensions2
  }) : null), virtualScene));
}
function EnvironmentGround(props) {
  var _props$ground, _props$ground2, _scale, _props$ground3;
  const textureDefault = useEnvironment(props);
  const texture = props.map || textureDefault;
  const isCubeMap = isCubeTexture(texture);
  const defines = React63.useMemo(() => {
    var _ref, _texture$image$;
    const w = (_ref = isCubeMap ? (_texture$image$ = texture.image[0]) == null ? void 0 : _texture$image$.width : texture.image.width) !== null && _ref !== void 0 ? _ref : 1024;
    const cubeSize = w / 4;
    const _lodMax = Math.floor(Math.log2(cubeSize));
    const _cubeSize = Math.pow(2, _lodMax);
    const width = 3 * Math.max(_cubeSize, 16 * 7);
    const height2 = 4 * _cubeSize;
    return [isCubeMap ? `#define ENVMAP_TYPE_CUBE` : "", `#define CUBEUV_TEXEL_WIDTH ${1 / width}`, `#define CUBEUV_TEXEL_HEIGHT ${1 / height2}`, `#define CUBEUV_MAX_MIP ${_lodMax}.0`, ``];
  }, []);
  const fragment = React63.useMemo(() => defines.join("\n") + fragmentShader, [defines]);
  const uniforms = React63.useMemo(() => ({
    cubemap: {
      value: null
    },
    height: {
      value: 15
    },
    radius: {
      value: 60
    }
  }), []);
  const mat = React63.useRef(null);
  const height = (_props$ground = props.ground) == null ? void 0 : _props$ground.height;
  const radius = (_props$ground2 = props.ground) == null ? void 0 : _props$ground2.radius;
  const scale2 = (_scale = (_props$ground3 = props.ground) == null ? void 0 : _props$ground3.scale) !== null && _scale !== void 0 ? _scale : 1e3;
  React63.useEffect(() => void (height && (mat.current.uniforms.height.value = height)), [height]);
  React63.useEffect(() => void (radius && (mat.current.uniforms.radius.value = radius)), [radius]);
  React63.useEffect(() => void (mat.current.uniforms.cubemap.value = texture), [texture]);
  return React63.createElement(React63.Fragment, null, React63.createElement(EnvironmentMap, _extends({}, props, {
    map: texture
  })), React63.createElement(Icosahedron, {
    scale: scale2,
    args: [1, 16]
  }, React63.createElement("shaderMaterial", {
    ref: mat,
    side: BackSide,
    vertexShader,
    fragmentShader: fragment,
    uniforms
  })));
}
function Environment(props) {
  return props.ground ? React63.createElement(EnvironmentGround, props) : props.map ? React63.createElement(EnvironmentMap, props) : props.children ? React63.createElement(EnvironmentPortal, props) : React63.createElement(EnvironmentCube, props);
}

// node_modules/@react-three/drei/core/ContactShadows.js
init_extends();
var React64 = __toESM(require_react());
init_three_module();
init_react_three_fiber_esm();
var ContactShadows = React64.forwardRef((_a, ref) => {
  var _b = _a, {
    scale: scale2 = 10,
    frames = Infinity,
    opacity = 1,
    width = 1,
    height = 1,
    blur = 1,
    far = 10,
    resolution = 512,
    smooth = true,
    color = "#000000",
    depthWrite = false,
    renderOrder
  } = _b, props = __objRest(_b, [
    "scale",
    "frames",
    "opacity",
    "width",
    "height",
    "blur",
    "far",
    "resolution",
    "smooth",
    "color",
    "depthWrite",
    "renderOrder"
  ]);
  const scene = useThree((state) => state.scene);
  const gl = useThree((state) => state.gl);
  const shadowCamera = React64.useRef(null);
  width = width * (Array.isArray(scale2) ? scale2[0] : scale2 || 1);
  height = height * (Array.isArray(scale2) ? scale2[1] : scale2 || 1);
  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = React64.useMemo(() => {
    const renderTarget2 = new WebGLRenderTarget(resolution, resolution);
    const renderTargetBlur2 = new WebGLRenderTarget(resolution, resolution);
    renderTargetBlur2.texture.generateMipmaps = renderTarget2.texture.generateMipmaps = false;
    const planeGeometry2 = new PlaneGeometry(width, height).rotateX(Math.PI / 2);
    const blurPlane2 = new Mesh(planeGeometry2);
    const depthMaterial2 = new MeshDepthMaterial();
    depthMaterial2.depthTest = depthMaterial2.depthWrite = false;
    depthMaterial2.onBeforeCompile = (shader) => {
      shader.uniforms = __spreadProps(__spreadValues({}, shader.uniforms), {
        ucolor: {
          value: new Color(color).convertSRGBToLinear()
        }
      });
      shader.fragmentShader = shader.fragmentShader.replace(`void main() {`, `uniform vec3 ucolor;
           void main() {
          `);
      shader.fragmentShader = shader.fragmentShader.replace("vec4( vec3( 1.0 - fragCoordZ ), opacity );", "vec4( ucolor, ( 1.0 - fragCoordZ ) * 1.0 );");
    };
    const horizontalBlurMaterial2 = new ShaderMaterial(HorizontalBlurShader);
    const verticalBlurMaterial2 = new ShaderMaterial(VerticalBlurShader);
    verticalBlurMaterial2.depthTest = horizontalBlurMaterial2.depthTest = false;
    return [renderTarget2, planeGeometry2, depthMaterial2, blurPlane2, horizontalBlurMaterial2, verticalBlurMaterial2, renderTargetBlur2];
  }, [resolution, width, height, scale2, color]);
  const blurShadows = (blur2) => {
    blurPlane.visible = true;
    blurPlane.material = horizontalBlurMaterial;
    horizontalBlurMaterial.uniforms.tDiffuse.value = renderTarget.texture;
    horizontalBlurMaterial.uniforms.h.value = blur2 * 1 / 256;
    gl.setRenderTarget(renderTargetBlur);
    gl.render(blurPlane, shadowCamera.current);
    blurPlane.material = verticalBlurMaterial;
    verticalBlurMaterial.uniforms.tDiffuse.value = renderTargetBlur.texture;
    verticalBlurMaterial.uniforms.v.value = blur2 * 1 / 256;
    gl.setRenderTarget(renderTarget);
    gl.render(blurPlane, shadowCamera.current);
    blurPlane.visible = false;
  };
  let count = 0;
  useFrame(() => {
    if (shadowCamera.current && (frames === Infinity || count < frames)) {
      const initialBackground = scene.background;
      scene.background = null;
      const initialOverrideMaterial = scene.overrideMaterial;
      scene.overrideMaterial = depthMaterial;
      gl.setRenderTarget(renderTarget);
      gl.render(scene, shadowCamera.current);
      scene.overrideMaterial = initialOverrideMaterial;
      blurShadows(blur);
      if (smooth)
        blurShadows(blur * 0.4);
      gl.setRenderTarget(null);
      scene.background = initialBackground;
      count++;
    }
  });
  return React64.createElement("group", _extends({
    "rotation-x": Math.PI / 2
  }, props, {
    ref
  }), React64.createElement("mesh", {
    renderOrder,
    geometry: planeGeometry,
    scale: [1, -1, 1],
    rotation: [-Math.PI / 2, 0, 0]
  }, React64.createElement("meshBasicMaterial", {
    map: renderTarget.texture,
    "map-encoding": gl.outputEncoding,
    transparent: true,
    opacity,
    depthWrite
  })), React64.createElement("orthographicCamera", {
    ref: shadowCamera,
    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]
  }));
});

// node_modules/@react-three/drei/core/Stage.js
var presets = {
  rembrandt: {
    main: [1, 2, 1],
    fill: [-2, -0.5, -2]
  },
  portrait: {
    main: [-1, 2, 0.5],
    fill: [-1, 0.5, -1.5]
  },
  upfront: {
    main: [0, 2, 1],
    fill: [-1, 0.5, -1.5]
  },
  soft: {
    main: [-2, 4, 4],
    fill: [-1, 0.5, -1.5]
  }
};
function Stage(_a) {
  var _b = _a, {
    children,
    controls,
    shadows = true,
    adjustCamera = true,
    environment = "city",
    intensity = 1,
    preset = "rembrandt",
    shadowBias = 0,
    contactShadow = {
      blur: 2,
      opacity: 0.5,
      position: [0, 0, 0]
    }
  } = _b, props = __objRest(_b, [
    "children",
    "controls",
    "shadows",
    "adjustCamera",
    "environment",
    "intensity",
    "preset",
    "shadowBias",
    "contactShadow"
  ]);
  const config = presets[preset];
  const camera = useThree((state) => state.camera);
  const defaultControls = useThree((state) => state.controls);
  const outer = React65.useRef(null);
  const inner = React65.useRef(null);
  const [{
    radius,
    width,
    height
  }, set] = React65.useState({
    radius: 0,
    width: 0,
    height: 0
  });
  React65.useLayoutEffect(() => {
    outer.current.position.set(0, 0, 0);
    outer.current.updateWorldMatrix(true, true);
    const box3 = new Box3().setFromObject(inner.current);
    const center = new Vector3();
    const sphere = new Sphere();
    const height2 = box3.max.y - box3.min.y;
    const width2 = box3.max.x - box3.min.x;
    box3.getCenter(center);
    box3.getBoundingSphere(sphere);
    set({
      radius: sphere.radius,
      width: width2,
      height: height2
    });
    outer.current.position.set(-center.x, -center.y + height2 / 2, -center.z);
  }, [children]);
  React65.useLayoutEffect(() => {
    if (adjustCamera) {
      const y = radius / (height > width ? 1.5 : 2.5);
      camera.position.set(0, radius * 0.5, radius * 2.5);
      camera.near = 0.1;
      camera.far = Math.max(5e3, radius * 4);
      camera.lookAt(0, y, 0);
      const ctrl = defaultControls || (controls == null ? void 0 : controls.current);
      if (ctrl) {
        ctrl.target.set(0, y, 0);
        ctrl.update();
      }
    }
  }, [defaultControls, radius, height, width, adjustCamera]);
  return React65.createElement("group", props, React65.createElement("group", {
    ref: outer
  }, React65.createElement("group", {
    ref: inner
  }, children)), contactShadow && React65.createElement(ContactShadows, _extends({
    scale: radius * 2,
    far: radius / 2
  }, contactShadow)), environment && React65.createElement(Environment, {
    preset: environment
  }), React65.createElement("ambientLight", {
    intensity: intensity / 3
  }), React65.createElement("spotLight", {
    penumbra: 1,
    position: [config.main[0] * radius, config.main[1] * radius, config.main[2] * radius],
    intensity: intensity * 2,
    castShadow: shadows,
    "shadow-bias": shadowBias
  }), React65.createElement("pointLight", {
    position: [config.fill[0] * radius, config.fill[1] * radius, config.fill[2] * radius],
    intensity
  }));
}

// node_modules/@react-three/drei/core/Backdrop.js
var React66 = __toESM(require_react());
var easeInExpo = (x) => x === 0 ? 0 : Math.pow(2, 10 * x - 10);
function Backdrop(_a) {
  var _b = _a, {
    children,
    floor = 0.25,
    segments = 20,
    receiveShadow
  } = _b, props = __objRest(_b, [
    "children",
    "floor",
    "segments",
    "receiveShadow"
  ]);
  const ref = React66.useRef(null);
  React66.useLayoutEffect(() => {
    let i5 = 0;
    const offset = segments / segments / 2;
    const position2 = ref.current.attributes.position;
    for (let x = 0; x < segments + 1; x++) {
      for (let y = 0; y < segments + 1; y++) {
        position2.setXYZ(i5++, x / segments - offset + (x === 0 ? -floor : 0), y / segments - offset, easeInExpo(x / segments));
      }
    }
    position2.needsUpdate = true;
    ref.current.computeVertexNormals();
  }, [segments, floor]);
  return React66.createElement("group", props, React66.createElement("mesh", {
    receiveShadow,
    rotation: [-Math.PI / 2, 0, Math.PI / 2]
  }, React66.createElement("planeGeometry", {
    ref,
    args: [1, 1, segments, segments]
  }), children));
}

// node_modules/@react-three/drei/core/Shadow.js
init_extends();
var React67 = __toESM(require_react());
init_three_module();
var Shadow = React67.forwardRef((_a, ref) => {
  var _b = _a, {
    fog = false,
    renderOrder,
    depthWrite = false,
    colorStop = 0,
    color = "black",
    opacity = 0.5
  } = _b, props = __objRest(_b, [
    "fog",
    "renderOrder",
    "depthWrite",
    "colorStop",
    "color",
    "opacity"
  ]);
  const canvas = React67.useMemo(() => {
    const canvas2 = document.createElement("canvas");
    canvas2.width = 128;
    canvas2.height = 128;
    const context7 = canvas2.getContext("2d");
    const gradient = context7.createRadialGradient(canvas2.width / 2, canvas2.height / 2, 0, canvas2.width / 2, canvas2.height / 2, canvas2.width / 2);
    gradient.addColorStop(colorStop, new Color(color).getStyle());
    gradient.addColorStop(1, "rgba(0,0,0,0)");
    context7.fillStyle = gradient;
    context7.fillRect(0, 0, canvas2.width, canvas2.height);
    return canvas2;
  }, [color, colorStop]);
  return React67.createElement("mesh", _extends({
    renderOrder,
    ref,
    "rotation-x": -Math.PI / 2
  }, props), React67.createElement("planeGeometry", null), React67.createElement("meshBasicMaterial", {
    transparent: true,
    opacity,
    fog,
    depthWrite,
    side: DoubleSide
  }, React67.createElement("canvasTexture", {
    attach: "map",
    args: [canvas]
  })));
});

// node_modules/@react-three/drei/core/Reflector.js
init_extends();
var React68 = __toESM(require_react());
init_three_module();
init_react_three_fiber_esm();
extend({
  MeshReflectorMaterial
});
var Reflector = React68.forwardRef((_a, ref) => {
  var _b = _a, {
    mixBlur = 0,
    mixStrength = 0.5,
    resolution = 256,
    blur = [0, 0],
    args = [1, 1],
    minDepthThreshold = 0.9,
    maxDepthThreshold = 1,
    depthScale = 0,
    depthToBlurRatioBias = 0.25,
    mirror = 0,
    children,
    debug = 0,
    distortion = 1,
    mixContrast = 1,
    distortionMap
  } = _b, props = __objRest(_b, [
    "mixBlur",
    "mixStrength",
    "resolution",
    "blur",
    "args",
    "minDepthThreshold",
    "maxDepthThreshold",
    "depthScale",
    "depthToBlurRatioBias",
    "mirror",
    "children",
    "debug",
    "distortion",
    "mixContrast",
    "distortionMap"
  ]);
  React68.useEffect(() => {
    console.warn("Reflector has been deprecated and will be removed next major. Replace it with <MeshReflectorMaterial />!");
  }, []);
  const gl = useThree(({
    gl: gl2
  }) => gl2);
  const camera = useThree(({
    camera: camera2
  }) => camera2);
  const scene = useThree(({
    scene: scene2
  }) => scene2);
  blur = Array.isArray(blur) ? blur : [blur, blur];
  const hasBlur = blur[0] + blur[1] > 0;
  const meshRef = React68.useRef(null);
  const [reflectorPlane] = React68.useState(() => new Plane());
  const [normal] = React68.useState(() => new Vector3());
  const [reflectorWorldPosition] = React68.useState(() => new Vector3());
  const [cameraWorldPosition] = React68.useState(() => new Vector3());
  const [rotationMatrix] = React68.useState(() => new Matrix4());
  const [lookAtPosition] = React68.useState(() => new Vector3(0, 0, -1));
  const [clipPlane] = React68.useState(() => new Vector4());
  const [view] = React68.useState(() => new Vector3());
  const [target2] = React68.useState(() => new Vector3());
  const [q] = React68.useState(() => new Vector4());
  const [textureMatrix] = React68.useState(() => new Matrix4());
  const [virtualCamera] = React68.useState(() => new PerspectiveCamera());
  const beforeRender = React68.useCallback(() => {
    reflectorWorldPosition.setFromMatrixPosition(meshRef.current.matrixWorld);
    cameraWorldPosition.setFromMatrixPosition(camera.matrixWorld);
    rotationMatrix.extractRotation(meshRef.current.matrixWorld);
    normal.set(0, 0, 1);
    normal.applyMatrix4(rotationMatrix);
    view.subVectors(reflectorWorldPosition, cameraWorldPosition);
    if (view.dot(normal) > 0)
      return;
    view.reflect(normal).negate();
    view.add(reflectorWorldPosition);
    rotationMatrix.extractRotation(camera.matrixWorld);
    lookAtPosition.set(0, 0, -1);
    lookAtPosition.applyMatrix4(rotationMatrix);
    lookAtPosition.add(cameraWorldPosition);
    target2.subVectors(reflectorWorldPosition, lookAtPosition);
    target2.reflect(normal).negate();
    target2.add(reflectorWorldPosition);
    virtualCamera.position.copy(view);
    virtualCamera.up.set(0, 1, 0);
    virtualCamera.up.applyMatrix4(rotationMatrix);
    virtualCamera.up.reflect(normal);
    virtualCamera.lookAt(target2);
    virtualCamera.far = camera.far;
    virtualCamera.updateMatrixWorld();
    virtualCamera.projectionMatrix.copy(camera.projectionMatrix);
    textureMatrix.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1);
    textureMatrix.multiply(virtualCamera.projectionMatrix);
    textureMatrix.multiply(virtualCamera.matrixWorldInverse);
    textureMatrix.multiply(meshRef.current.matrixWorld);
    reflectorPlane.setFromNormalAndCoplanarPoint(normal, reflectorWorldPosition);
    reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);
    clipPlane.set(reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant);
    const projectionMatrix = virtualCamera.projectionMatrix;
    q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];
    q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];
    q.z = -1;
    q.w = (1 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];
    clipPlane.multiplyScalar(2 / clipPlane.dot(q));
    projectionMatrix.elements[2] = clipPlane.x;
    projectionMatrix.elements[6] = clipPlane.y;
    projectionMatrix.elements[10] = clipPlane.z + 1;
    projectionMatrix.elements[14] = clipPlane.w;
  }, []);
  const [fbo1, fbo2, blurpass, reflectorProps] = React68.useMemo(() => {
    const parameters = {
      minFilter: LinearFilter,
      magFilter: LinearFilter,
      encoding: gl.outputEncoding
    };
    const fbo12 = new WebGLRenderTarget(resolution, resolution, parameters);
    fbo12.depthBuffer = true;
    fbo12.depthTexture = new DepthTexture(resolution, resolution);
    fbo12.depthTexture.format = DepthFormat;
    fbo12.depthTexture.type = UnsignedShortType;
    const fbo22 = new WebGLRenderTarget(resolution, resolution, parameters);
    const blurpass2 = new BlurPass({
      gl,
      resolution,
      width: blur[0],
      height: blur[1],
      minDepthThreshold,
      maxDepthThreshold,
      depthScale,
      depthToBlurRatioBias
    });
    const reflectorProps2 = {
      mirror,
      textureMatrix,
      mixBlur,
      tDiffuse: fbo12.texture,
      tDepth: fbo12.depthTexture,
      tDiffuseBlur: fbo22.texture,
      hasBlur,
      mixStrength,
      minDepthThreshold,
      maxDepthThreshold,
      depthScale,
      depthToBlurRatioBias,
      transparent: true,
      debug,
      distortion,
      distortionMap,
      mixContrast,
      "defines-USE_BLUR": hasBlur ? "" : void 0,
      "defines-USE_DEPTH": depthScale > 0 ? "" : void 0,
      "defines-USE_DISTORTION": distortionMap ? "" : void 0
    };
    return [fbo12, fbo22, blurpass2, reflectorProps2];
  }, [gl, blur, textureMatrix, resolution, mirror, hasBlur, mixBlur, mixStrength, minDepthThreshold, maxDepthThreshold, depthScale, depthToBlurRatioBias, debug, distortion, distortionMap, mixContrast]);
  useFrame(() => {
    if (!(meshRef != null && meshRef.current))
      return;
    meshRef.current.visible = false;
    const currentXrEnabled = gl.xr.enabled;
    const currentShadowAutoUpdate = gl.shadowMap.autoUpdate;
    beforeRender();
    gl.xr.enabled = false;
    gl.shadowMap.autoUpdate = false;
    gl.setRenderTarget(fbo1);
    gl.state.buffers.depth.setMask(true);
    if (!gl.autoClear)
      gl.clear();
    gl.render(scene, virtualCamera);
    if (hasBlur)
      blurpass.render(gl, fbo1, fbo2);
    gl.xr.enabled = currentXrEnabled;
    gl.shadowMap.autoUpdate = currentShadowAutoUpdate;
    meshRef.current.visible = true;
    gl.setRenderTarget(null);
  });
  return React68.createElement("mesh", _extends({
    ref: react_merge_refs_esm_default([meshRef, ref])
  }, props), React68.createElement("planeBufferGeometry", {
    args
  }), children ? children("meshReflectorMaterial", reflectorProps) : React68.createElement("meshReflectorMaterial", reflectorProps));
});

// node_modules/@react-three/drei/core/SpotLight.js
init_extends();
var React69 = __toESM(require_react());
init_three_module();
init_react_three_fiber_esm();

// node_modules/@react-three/drei/materials/SpotLightMaterial.js
init_three_module();
var SpotLightMaterial = class extends ShaderMaterial {
  constructor() {
    super({
      uniforms: {
        depth: {
          value: null
        },
        opacity: {
          value: 1
        },
        attenuation: {
          value: 2.5
        },
        anglePower: {
          value: 12
        },
        spotPosition: {
          value: new Vector3(0, 0, 0)
        },
        lightColor: {
          value: new Color("white")
        },
        cameraNear: {
          value: 0
        },
        cameraFar: {
          value: 1
        },
        resolution: {
          value: new Vector2(0, 0)
        }
      },
      transparent: true,
      depthWrite: false,
      vertexShader: `
      varying vec3 vNormal;
      varying vec3 vWorldPosition;
      varying float vViewZ;
      varying float vIntensity;
      uniform vec3 spotPosition;
      uniform float attenuation;      

      void main() {
        // compute intensity
        vNormal = normalize( normalMatrix * normal );
        vec4 worldPosition	= modelMatrix * vec4( position, 1.0 );
        vWorldPosition = worldPosition.xyz;
        vec4 viewPosition = viewMatrix * worldPosition;
        vViewZ = viewPosition.z;
        float intensity	= distance(worldPosition.xyz, spotPosition) / attenuation;
        intensity	= 1.0 - clamp(intensity, 0.0, 1.0);
        vIntensity = intensity;        
        // set gl_Position
        gl_Position	= projectionMatrix * viewPosition;

      }`,
      fragmentShader: `
      #include <packing>

      varying vec3 vNormal;
      varying vec3 vWorldPosition;
      uniform vec3 lightColor;
      uniform vec3 spotPosition;
      uniform float attenuation;
      uniform float anglePower;
      uniform sampler2D depth;
      uniform vec2 resolution;
      uniform float cameraNear;
      uniform float cameraFar;
      varying float vViewZ;
      varying float vIntensity;
      uniform float opacity;

      float readDepth( sampler2D depthSampler, vec2 coord ) {
        float fragCoordZ = texture2D( depthSampler, coord ).x;
        float viewZ = perspectiveDepthToViewZ(fragCoordZ, cameraNear, cameraFar);
        return viewZ;
      }

      void main() {
        float d = 1.0;
        bool isSoft = resolution[0] > 0.0 && resolution[1] > 0.0;
        if (isSoft) {
          vec2 sUv = gl_FragCoord.xy / resolution;
          d = readDepth(depth, sUv);
        }
        float intensity = vIntensity;
        vec3 normal	= vec3(vNormal.x, vNormal.y, abs(vNormal.z));
        float angleIntensity	= pow( dot(normal, vec3(0.0, 0.0, 1.0)), anglePower );
        intensity	*= angleIntensity;
        // fades when z is close to sampled depth, meaning the cone is intersecting existing geometry
        if (isSoft) {
          intensity	*= smoothstep(0., 1., vViewZ - d);
        }
        gl_FragColor = vec4(lightColor, intensity * opacity);

        #include <tonemapping_fragment>
	      #include <encodings_fragment>
      }`
    });
  }
};

// node_modules/@react-three/drei/core/SpotLight.js
var vec = new Vector3();
var SpotLight = React69.forwardRef((_a, ref) => {
  var _b = _a, {
    opacity = 1,
    radiusTop,
    radiusBottom,
    depthBuffer,
    color = "white",
    distance = 5,
    angle = 0.15,
    attenuation = 5,
    anglePower = 5
  } = _b, props = __objRest(_b, [
    "opacity",
    "radiusTop",
    "radiusBottom",
    "depthBuffer",
    "color",
    "distance",
    "angle",
    "attenuation",
    "anglePower"
  ]);
  const mesh = React69.useRef(null);
  const size = useThree((state) => state.size);
  const camera = useThree((state) => state.camera);
  const dpr = useThree((state) => state.viewport.dpr);
  const [material] = React69.useState(() => new SpotLightMaterial());
  radiusTop = radiusTop === void 0 ? 0.1 : radiusTop;
  radiusBottom = radiusBottom === void 0 ? angle * 7 : radiusBottom;
  useFrame(() => {
    material.uniforms.spotPosition.value.copy(mesh.current.getWorldPosition(vec));
    mesh.current.lookAt(mesh.current.parent.target.getWorldPosition(vec));
  });
  const geom = React69.useMemo(() => {
    const geometry = new CylinderGeometry(radiusTop, radiusBottom, distance, 128, 64, true);
    geometry.applyMatrix4(new Matrix4().makeTranslation(0, -distance / 2, 0));
    geometry.applyMatrix4(new Matrix4().makeRotationX(-Math.PI / 2));
    return geometry;
  }, [angle, distance, radiusTop, radiusBottom]);
  return React69.createElement("spotLight", _extends({
    ref,
    angle,
    color,
    distance
  }, props), React69.createElement("mesh", {
    ref: mesh,
    geometry: geom,
    raycast: () => null
  }, React69.createElement("primitive", {
    object: material,
    attach: "material",
    "uniforms-opacity-value": opacity,
    "uniforms-lightColor-value": color,
    "uniforms-attenuation-value": attenuation,
    "uniforms-anglePower-value": anglePower,
    "uniforms-depth-value": depthBuffer,
    "uniforms-cameraNear-value": camera.near,
    "uniforms-cameraFar-value": camera.far,
    "uniforms-resolution-value": depthBuffer ? [size.width * dpr, size.height * dpr] : [0, 0]
  })));
});

// node_modules/@react-three/drei/core/Lightformer.js
init_extends();
init_react_three_fiber_esm();
var React70 = __toESM(require_react());
init_three_module();
var Lightformer = React70.forwardRef((_a, forwardRef49) => {
  var _b = _a, {
    args,
    map,
    toneMapped = false,
    color = "white",
    form: Form = "rect",
    intensity = 1,
    scale: scale2 = 1,
    target: target2,
    children
  } = _b, props = __objRest(_b, [
    "args",
    "map",
    "toneMapped",
    "color",
    "form",
    "intensity",
    "scale",
    "target",
    "children"
  ]);
  const ref = React70.useRef(null);
  React70.useLayoutEffect(() => {
    if (!children && !props.material) {
      applyProps(ref.current.material, {
        color
      });
      ref.current.material.color.multiplyScalar(intensity);
    }
  }, [color, intensity, children, props.material]);
  React70.useLayoutEffect(() => {
    if (target2)
      ref.current.lookAt(Array.isArray(target2) ? new Vector3(...target2) : target2);
  }, [target2]);
  scale2 = Array.isArray(scale2) && scale2.length === 2 ? [scale2[0], scale2[1], 1] : scale2;
  return React70.createElement("mesh", _extends({
    ref: react_merge_refs_esm_default([ref, forwardRef49]),
    scale: scale2
  }, props), Form === "circle" ? React70.createElement("ringGeometry", {
    args: [0, 1, 64]
  }) : Form === "ring" ? React70.createElement("ringGeometry", {
    args: [0.5, 1, 64]
  }) : Form === "rect" ? React70.createElement("planeGeometry", null) : React70.createElement(Form, {
    args
  }), children ? children : !props.material ? React70.createElement("meshBasicMaterial", {
    toneMapped,
    map,
    side: DoubleSide
  }) : null);
});

// node_modules/@react-three/drei/core/Sky.js
init_extends();
var React71 = __toESM(require_react());
init_three_module();
function calcPosFromAngles(inclination, azimuth, vector = new Vector3()) {
  const theta = Math.PI * (inclination - 0.5);
  const phi = 2 * Math.PI * (azimuth - 0.5);
  vector.x = Math.cos(phi);
  vector.y = Math.sin(theta);
  vector.z = Math.sin(phi);
  return vector;
}
var Sky2 = React71.forwardRef((_a, ref) => {
  var _b = _a, {
    inclination = 0.6,
    azimuth = 0.1,
    distance = 1e3,
    mieCoefficient = 5e-3,
    mieDirectionalG = 0.8,
    rayleigh = 0.5,
    turbidity = 10,
    sunPosition = calcPosFromAngles(inclination, azimuth)
  } = _b, props = __objRest(_b, [
    "inclination",
    "azimuth",
    "distance",
    "mieCoefficient",
    "mieDirectionalG",
    "rayleigh",
    "turbidity",
    "sunPosition"
  ]);
  const scale2 = React71.useMemo(() => new Vector3().setScalar(distance), [distance]);
  const [sky] = React71.useState(() => new Sky());
  return React71.createElement("primitive", _extends({
    object: sky,
    ref,
    "material-uniforms-mieCoefficient-value": mieCoefficient,
    "material-uniforms-mieDirectionalG-value": mieDirectionalG,
    "material-uniforms-rayleigh-value": rayleigh,
    "material-uniforms-sunPosition-value": sunPosition,
    "material-uniforms-turbidity-value": turbidity,
    scale: scale2
  }, props));
});

// node_modules/@react-three/drei/core/Stars.js
var React72 = __toESM(require_react());
init_react_three_fiber_esm();
init_three_module();
var StarfieldMaterial = class extends ShaderMaterial {
  constructor() {
    super({
      uniforms: {
        time: {
          value: 0
        },
        fade: {
          value: 1
        }
      },
      vertexShader: `
      uniform float time;
      attribute float size;
      varying vec3 vColor;
      void main() {
        vColor = color;
        vec4 mvPosition = modelViewMatrix * vec4(position, 0.5);
        gl_PointSize = size * (30.0 / -mvPosition.z) * (3.0 + sin(mvPosition.x + 2.0 * time + 100.0));
        gl_Position = projectionMatrix * mvPosition;
      }`,
      fragmentShader: `
      uniform sampler2D pointTexture;
      uniform float fade;
      varying vec3 vColor;
      void main() {
        float opacity = 1.0;
        if (fade == 1.0) {
          float d = distance(gl_PointCoord, vec2(0.5, 0.5));
          opacity = 1.0 / (1.0 + exp(16.0 * (d - 0.25)));
        }
        gl_FragColor = vec4(vColor, opacity);

        #include <tonemapping_fragment>
	      #include <encodings_fragment>
      }`
    });
  }
};
var genStar = (r3) => {
  return new Vector3().setFromSpherical(new Spherical(r3, Math.acos(1 - Math.random() * 2), Math.random() * 2 * Math.PI));
};
var Stars = React72.forwardRef(({
  radius = 100,
  depth = 50,
  count = 5e3,
  saturation = 0,
  factor = 4,
  fade = false,
  speed = 1
}, ref) => {
  const material = React72.useRef();
  const [position2, color, size] = React72.useMemo(() => {
    const positions = [];
    const colors2 = [];
    const sizes = Array.from({
      length: count
    }, () => (0.5 + 0.5 * Math.random()) * factor);
    const color2 = new Color();
    let r3 = radius + depth;
    const increment = depth / count;
    for (let i5 = 0; i5 < count; i5++) {
      r3 -= increment * Math.random();
      positions.push(...genStar(r3).toArray());
      color2.setHSL(i5 / count, saturation, 0.9);
      colors2.push(color2.r, color2.g, color2.b);
    }
    return [new Float32Array(positions), new Float32Array(colors2), new Float32Array(sizes)];
  }, [count, depth, factor, radius, saturation]);
  useFrame((state) => material.current && (material.current.uniforms.time.value = state.clock.getElapsedTime() * speed));
  const [starfieldMaterial] = React72.useState(() => new StarfieldMaterial());
  return React72.createElement("points", {
    ref
  }, React72.createElement("bufferGeometry", null, React72.createElement("bufferAttribute", {
    attach: "attributes-position",
    args: [position2, 3]
  }), React72.createElement("bufferAttribute", {
    attach: "attributes-color",
    args: [color, 3]
  }), React72.createElement("bufferAttribute", {
    attach: "attributes-size",
    args: [size, 1]
  })), React72.createElement("primitive", {
    ref: material,
    object: starfieldMaterial,
    attach: "material",
    blending: AdditiveBlending,
    "uniforms-fade-value": fade,
    transparent: true,
    vertexColors: true
  }));
});

// node_modules/@react-three/drei/core/Cloud.js
var React73 = __toESM(require_react());
init_react_three_fiber_esm();
var CLOUD_URL = "https://rawcdn.githack.com/pmndrs/drei-assets/9225a9f1fbd449d9411125c2f419b843d0308c9f/cloud.png";
function Cloud(_a) {
  var _b = _a, {
    opacity = 0.5,
    speed = 0.4,
    width = 10,
    depth = 1.5,
    segments = 20,
    texture = CLOUD_URL,
    color = "#ffffff",
    depthTest = true
  } = _b, props = __objRest(_b, [
    "opacity",
    "speed",
    "width",
    "depth",
    "segments",
    "texture",
    "color",
    "depthTest"
  ]);
  const gl = useThree((state) => state.gl);
  const group = React73.useRef();
  const cloudTexture = useTexture(texture);
  const clouds = React73.useMemo(() => [...new Array(segments)].map((_, index) => ({
    x: width / 2 - Math.random() * width,
    y: width / 2 - Math.random() * width,
    scale: 0.4 + Math.sin((index + 1) / segments * Math.PI) * ((0.2 + Math.random()) * 10),
    density: Math.max(0.2, Math.random()),
    rotation: Math.max(2e-3, 5e-3 * Math.random()) * speed
  })), [width, segments, speed]);
  useFrame((state) => {
    var _group$current;
    return (_group$current = group.current) == null ? void 0 : _group$current.children.forEach((cloud, index) => {
      cloud.children[0].rotation.z += clouds[index].rotation;
      cloud.children[0].scale.setScalar(clouds[index].scale + (1 + Math.sin(state.clock.getElapsedTime() / 10)) / 2 * index / 10);
    });
  });
  return React73.createElement("group", props, React73.createElement("group", {
    position: [0, 0, segments / 2 * depth],
    ref: group
  }, clouds.map(({
    x,
    y,
    scale: scale2,
    density
  }, index) => React73.createElement(Billboard, {
    key: index,
    position: [x, y, -index * depth]
  }, React73.createElement(Plane2, {
    scale: scale2,
    rotation: [0, 0, 0]
  }, React73.createElement("meshStandardMaterial", {
    map: cloudTexture,
    "map-encoding": gl.outputEncoding,
    transparent: true,
    opacity: scale2 / 6 * density * opacity,
    depthTest,
    color
  }))))));
}

// node_modules/@react-three/drei/core/Sparkles.js
init_extends();
var React74 = __toESM(require_react());
init_three_module();
init_react_three_fiber_esm();

// node_modules/@react-three/drei/helpers/glsl/Sparkles.frag.glsl.js
var fragShader = "#define GLSLIFY 1\nvarying vec3 vColor;varying float vOpacity;void main(){float distanceToCenter=distance(gl_PointCoord,vec2(0.5));float strength=0.05/distanceToCenter-0.1;gl_FragColor=vec4(vColor,strength*vOpacity);}";

// node_modules/@react-three/drei/helpers/glsl/Sparkles.vert.glsl.js
var vertShader = "#define GLSLIFY 1\nuniform float pixelRatio;uniform float time;attribute float size;attribute float speed;attribute float opacity;attribute vec3 noise;attribute vec3 color;varying vec3 vColor;varying float vOpacity;void main(){vec4 modelPosition=modelMatrix*vec4(position,1.0);modelPosition.y+=sin(time*speed+modelPosition.x*noise.x*100.0)*0.2;modelPosition.z+=cos(time*speed+modelPosition.x*noise.y*100.0)*0.2;modelPosition.x+=cos(time*speed+modelPosition.x*noise.z*100.0)*0.2;vec4 viewPosition=viewMatrix*modelPosition;vec4 projectionPostion=projectionMatrix*viewPosition;gl_Position=projectionPostion;gl_PointSize=size*25.*pixelRatio;gl_PointSize*=(1.0/-viewPosition.z);vColor=color;vOpacity=opacity;}";

// node_modules/@react-three/drei/core/Sparkles.js
var SparklesMaterial = shaderMaterial({
  time: 0,
  pixelRatio: 1
}, vertShader, fragShader);
var isFloat32Array = (def) => def && def.constructor === Float32Array;
var expandColor = (v4) => [v4.r, v4.g, v4.b];
var isVector = (v4) => v4 instanceof Vector2 || v4 instanceof Vector3 || v4 instanceof Vector4;
var normalizeVector = (v4) => {
  if (Array.isArray(v4))
    return v4;
  else if (isVector(v4))
    return v4.toArray();
  return [v4, v4, v4];
};
function usePropAsIsOrAsAttribute(count, prop, setDefault) {
  return React74.useMemo(() => {
    if (prop !== void 0) {
      if (isFloat32Array(prop)) {
        return prop;
      } else {
        if (prop instanceof Color) {
          const a2 = Array.from({
            length: count * 3
          }, () => expandColor(prop)).flat();
          return Float32Array.from(a2);
        } else if (isVector(prop) || Array.isArray(prop)) {
          const a2 = Array.from({
            length: count * 3
          }, () => normalizeVector(prop)).flat();
          return Float32Array.from(a2);
        }
        return Float32Array.from({
          length: count
        }, () => prop);
      }
    }
    return Float32Array.from({
      length: count
    }, setDefault);
  }, [prop]);
}
var Sparkles = React74.forwardRef((_a, forwardRef49) => {
  var _b = _a, {
    noise = 1,
    count = 100,
    speed = 1,
    opacity = 1,
    scale: scale2 = 1,
    size,
    color
  } = _b, props = __objRest(_b, [
    "noise",
    "count",
    "speed",
    "opacity",
    "scale",
    "size",
    "color"
  ]);
  React74.useMemo(() => extend({
    SparklesMaterial
  }), []);
  const matRef = React74.useRef();
  const dpr = useThree((state) => state.viewport.dpr);
  const positions = React74.useMemo(() => Float32Array.from(Array.from({
    length: count
  }, () => normalizeVector(scale2).map(MathUtils.randFloatSpread)).flat()), [count, scale2]);
  const sizes = usePropAsIsOrAsAttribute(count, size, Math.random);
  const opacities = usePropAsIsOrAsAttribute(count, opacity);
  const speeds = usePropAsIsOrAsAttribute(count, speed);
  const noises = usePropAsIsOrAsAttribute(count * 3, noise);
  const colors2 = usePropAsIsOrAsAttribute(color === void 0 ? count * 3 : count, !isFloat32Array(color) ? new Color(color) : color, () => 1);
  useFrame((state) => matRef.current.uniforms.time.value = state.clock.elapsedTime);
  return React74.createElement("points", _extends({
    key: `particle-${count}-${JSON.stringify(scale2)}`
  }, props, {
    ref: forwardRef49
  }), React74.createElement("bufferGeometry", null, React74.createElement("bufferAttribute", {
    attach: "attributes-position",
    args: [positions, 3]
  }), React74.createElement("bufferAttribute", {
    attach: "attributes-size",
    args: [sizes, 1]
  }), React74.createElement("bufferAttribute", {
    attach: "attributes-opacity",
    args: [opacities, 1]
  }), React74.createElement("bufferAttribute", {
    attach: "attributes-speed",
    args: [speeds, 1]
  }), React74.createElement("bufferAttribute", {
    attach: "attributes-color",
    args: [colors2, 3]
  }), React74.createElement("bufferAttribute", {
    attach: "attributes-noise",
    args: [noises, 3]
  })), React74.createElement("sparklesMaterial", {
    ref: matRef,
    transparent: true,
    pixelRatio: dpr,
    depthWrite: false
  }));
});

// node_modules/@react-three/drei/core/useMatcapTexture.js
var React75 = __toESM(require_react());
init_dist();
function getFormatString(format) {
  switch (format) {
    case 64:
      return "-64px";
    case 128:
      return "-128px";
    case 256:
      return "-256px";
    case 512:
      return "-512px";
    default:
      return "";
  }
}
var LIST_URL = "https://cdn.jsdelivr.net/gh/pmndrs/drei-assets@master/matcaps.json";
var MATCAP_ROOT = "https://rawcdn.githack.com/emmelleppi/matcaps/9b36ccaaf0a24881a39062d05566c9e92be4aa0d";
function useMatcapTexture(id = 0, format = 1024, onLoad) {
  const matcapList = suspend(() => fetch(LIST_URL).then((res) => res.json()), ["matcapList"]);
  const DEFAULT_MATCAP = matcapList[0];
  const numTot = React75.useMemo(() => Object.keys(matcapList).length, []);
  const fileHash = React75.useMemo(() => {
    if (typeof id === "string") {
      return id;
    } else if (typeof id === "number") {
      return matcapList[id];
    }
    return null;
  }, [id]);
  const fileName = `${fileHash || DEFAULT_MATCAP}${getFormatString(format)}.png`;
  const url = `${MATCAP_ROOT}/${format}/${fileName}`;
  const matcapTexture = useTexture(url, onLoad);
  return [matcapTexture, url, numTot];
}

// node_modules/@react-three/drei/core/useNormalTexture.js
var React76 = __toESM(require_react());
init_three_module();
init_dist();
var NORMAL_ROOT = "https://rawcdn.githack.com/pmndrs/drei-assets/7a3104997e1576f83472829815b00880d88b32fb";
var LIST_URL2 = "https://cdn.jsdelivr.net/gh/pmndrs/drei-assets@master/normals/normals.json";
function useNormalTexture(id = 0, settings = {}, onLoad) {
  const {
    repeat = [1, 1],
    anisotropy = 1,
    offset = [0, 0]
  } = settings;
  const normalsList = suspend(() => fetch(LIST_URL2).then((res) => res.json()), ["normalsList"]);
  const numTot = React76.useMemo(() => Object.keys(normalsList).length, []);
  const DEFAULT_NORMAL = normalsList[0];
  const imageName = normalsList[id] || DEFAULT_NORMAL;
  const url = `${NORMAL_ROOT}/normals/${imageName}`;
  const normalTexture = useTexture(url, onLoad);
  React76.useLayoutEffect(() => {
    if (!normalTexture)
      return;
    normalTexture.wrapS = normalTexture.wrapT = RepeatWrapping;
    normalTexture.repeat = new Vector2(repeat[0], repeat[1]);
    normalTexture.offset = new Vector2(offset[0], offset[1]);
    normalTexture.anisotropy = anisotropy;
  }, [normalTexture, anisotropy, repeat, offset]);
  return [normalTexture, url, numTot];
}

// node_modules/@react-three/drei/core/Points.js
init_extends();
init_three_module();
var React77 = __toESM(require_react());
init_react_three_fiber_esm();

// node_modules/@react-three/drei/helpers/Position.js
init_three_module();
var _instanceLocalMatrix = new Matrix4();
var _instanceWorldMatrix = new Matrix4();
var _instanceIntersects = [];
var _mesh = new Mesh();
var Position = class extends Group {
  constructor() {
    super();
    this.color = new Color("white");
    this.instance = {
      current: void 0
    };
    this.instanceKey = {
      current: void 0
    };
  }
  get geometry() {
    var _this$instance$curren;
    return (_this$instance$curren = this.instance.current) == null ? void 0 : _this$instance$curren.geometry;
  }
  raycast(raycaster, intersects) {
    const parent = this.instance.current;
    if (!parent)
      return;
    if (!parent.geometry || !parent.material)
      return;
    _mesh.geometry = parent.geometry;
    const matrixWorld = parent.matrixWorld;
    let instanceId = parent.userData.instances.indexOf(this.instanceKey);
    if (instanceId === -1 || instanceId > parent.count)
      return;
    parent.getMatrixAt(instanceId, _instanceLocalMatrix);
    _instanceWorldMatrix.multiplyMatrices(matrixWorld, _instanceLocalMatrix);
    _mesh.matrixWorld = _instanceWorldMatrix;
    _mesh.raycast(raycaster, _instanceIntersects);
    for (let i5 = 0, l2 = _instanceIntersects.length; i5 < l2; i5++) {
      const intersect = _instanceIntersects[i5];
      intersect.instanceId = instanceId;
      intersect.object = this;
      intersects.push(intersect);
    }
    _instanceIntersects.length = 0;
  }
};

// node_modules/@react-three/drei/core/Points.js
var i3;
var positionRef;
var context5 = React77.createContext(null);
var parentMatrix = new Matrix4();
var position = new Vector3();
new Color();
var PointsInstances = React77.forwardRef((_a, ref) => {
  var _b = _a, {
    children,
    range,
    limit = 1e3
  } = _b, props = __objRest(_b, [
    "children",
    "range",
    "limit"
  ]);
  const parentRef = React77.useRef(null);
  const [refs, setRefs] = React77.useState([]);
  const [[positions, colors2, sizes]] = React77.useState(() => [new Float32Array(limit * 3), Float32Array.from({
    length: limit * 3
  }, () => 1), Float32Array.from({
    length: limit
  }, () => 1)]);
  React77.useEffect(() => {
    parentRef.current.geometry.attributes.position.needsUpdate = true;
  });
  useFrame(() => {
    parentRef.current.updateMatrix();
    parentRef.current.updateMatrixWorld();
    parentMatrix.copy(parentRef.current.matrixWorld).invert();
    parentRef.current.geometry.drawRange.count = Math.min(limit, range !== void 0 ? range : limit, refs.length);
    for (i3 = 0; i3 < refs.length; i3++) {
      positionRef = refs[i3].current;
      positionRef.getWorldPosition(position).applyMatrix4(parentMatrix);
      position.toArray(positions, i3 * 3);
      parentRef.current.geometry.attributes.position.needsUpdate = true;
      positionRef.matrixWorldNeedsUpdate = true;
      positionRef.color.toArray(colors2, i3 * 3);
      parentRef.current.geometry.attributes.color.needsUpdate = true;
      sizes.set([positionRef.size], i3);
      parentRef.current.geometry.attributes.size.needsUpdate = true;
    }
  });
  const events = React77.useMemo(() => {
    const events2 = {};
    for (i3 = 0; i3 < refs.length; i3++) {
      var _refs$i$current;
      Object.assign(events2, (_refs$i$current = refs[i3].current) == null ? void 0 : _refs$i$current.__r3f.handlers);
    }
    return Object.keys(events2).reduce((prev, key) => __spreadProps(__spreadValues({}, prev), {
      [key]: (event) => {
        var _refs$event$index, _r3f, _r3f$handlers;
        const object = (_refs$event$index = refs[event.index]) == null ? void 0 : _refs$event$index.current;
        return object == null ? void 0 : (_r3f = object.__r3f) == null ? void 0 : (_r3f$handlers = _r3f.handlers) == null ? void 0 : _r3f$handlers[key](__spreadProps(__spreadValues({}, event), {
          object
        }));
      }
    }), {});
  }, [children, refs]);
  const api = React77.useMemo(() => ({
    subscribe: (ref2) => {
      setRefs((refs2) => [...refs2, ref2]);
      return () => setRefs((refs2) => refs2.filter((item) => item.current !== ref2.current));
    }
  }), []);
  return React77.createElement("points", _extends({
    matrixAutoUpdate: false,
    ref: react_merge_refs_esm_default([ref, parentRef])
  }, events, props), React77.createElement("bufferGeometry", null, React77.createElement("bufferAttribute", {
    attach: "attributes-position",
    count: positions.length / 3,
    array: positions,
    itemSize: 3,
    usage: DynamicDrawUsage
  }), React77.createElement("bufferAttribute", {
    attach: "attributes-color",
    count: colors2.length / 3,
    array: colors2,
    itemSize: 3,
    usage: DynamicDrawUsage
  }), React77.createElement("bufferAttribute", {
    attach: "attributes-size",
    count: sizes.length,
    array: sizes,
    itemSize: 1,
    usage: DynamicDrawUsage
  })), React77.createElement(context5.Provider, {
    value: api
  }, children));
});
var Point = React77.forwardRef((_a, ref) => {
  var _b = _a, {
    children
  } = _b, props = __objRest(_b, [
    "children"
  ]);
  React77.useMemo(() => extend({
    Position
  }), []);
  const group = React77.useRef();
  const {
    subscribe
  } = React77.useContext(context5);
  React77.useLayoutEffect(() => subscribe(group), []);
  return React77.createElement("position", _extends({
    ref: react_merge_refs_esm_default([ref, group])
  }, props), children);
});
var PointsBuffer = React77.forwardRef((_a, forwardedRef) => {
  var _b = _a, {
    children,
    positions,
    colors: colors2,
    sizes,
    stride = 3
  } = _b, props = __objRest(_b, [
    "children",
    "positions",
    "colors",
    "sizes",
    "stride"
  ]);
  const pointsRef = React77.useRef(null);
  useFrame(() => {
    const attr = pointsRef.current.geometry.attributes;
    attr.position.needsUpdate = true;
    if (colors2)
      attr.color.needsUpdate = true;
    if (sizes)
      attr.size.needsUpdate = true;
  });
  return React77.createElement("points", _extends({
    ref: react_merge_refs_esm_default([forwardedRef, pointsRef])
  }, props), React77.createElement("bufferGeometry", null, React77.createElement("bufferAttribute", {
    attach: "attributes-position",
    count: positions.length / stride,
    array: positions,
    itemSize: stride,
    usage: DynamicDrawUsage
  }), colors2 && React77.createElement("bufferAttribute", {
    attach: "attributes-color",
    count: colors2.length / stride,
    array: colors2,
    itemSize: 3,
    usage: DynamicDrawUsage
  }), sizes && React77.createElement("bufferAttribute", {
    attach: "attributes-size",
    count: sizes.length / stride,
    array: sizes,
    itemSize: 1,
    usage: DynamicDrawUsage
  })), children);
});
var Points = React77.forwardRef((props, forwardedRef) => {
  if (props.positions instanceof Float32Array) {
    return React77.createElement(PointsBuffer, _extends({}, props, {
      ref: forwardedRef
    }));
  } else
    return React77.createElement(PointsInstances, _extends({}, props, {
      ref: forwardedRef
    }));
});

// node_modules/@react-three/drei/core/Instances.js
init_extends();
init_three_module();
var React78 = __toESM(require_react());
init_react_three_fiber_esm();

// node_modules/react-composer/es/index.js
var import_react7 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
function Composer(props) {
  return renderRecursive(props.children, props.components);
}
Composer.propTypes = {
  children: import_prop_types.default.func.isRequired,
  components: import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.element, import_prop_types.default.func])).isRequired
};
function renderRecursive(render, remaining, results) {
  results = results || [];
  if (!remaining[0]) {
    return render(results);
  }
  function nextRender(value) {
    return renderRecursive(render, remaining.slice(1), results.concat([value]));
  }
  return typeof remaining[0] === "function" ? remaining[0]({ results, render: nextRender }) : (0, import_react7.cloneElement)(remaining[0], { children: nextRender });
}

// node_modules/@react-three/drei/core/Instances.js
var i4;
var instanceRef;
var globalContext = React78.createContext(null);
var parentMatrix2 = new Matrix4();
var instanceMatrix = new Matrix4();
var tempMatrix2 = new Matrix4();
new Color();
var translation = new Vector3();
var rotation = new Quaternion();
var scale = new Vector3();
var Instance = React78.forwardRef((_a, ref) => {
  var _b = _a, {
    context: context7,
    children
  } = _b, props = __objRest(_b, [
    "context",
    "children"
  ]);
  React78.useMemo(() => extend({
    Position
  }), []);
  const group = React78.useRef();
  const {
    subscribe,
    getParent
  } = React78.useContext(context7 || globalContext);
  React78.useLayoutEffect(() => subscribe(group), []);
  return React78.createElement("position", _extends({
    instance: getParent(),
    instanceKey: group,
    ref: react_merge_refs_esm_default([ref, group])
  }, props), children);
});
var Instances = React78.forwardRef((_a, ref) => {
  var _b = _a, {
    children,
    range,
    limit = 1e3,
    frames = Infinity
  } = _b, props = __objRest(_b, [
    "children",
    "range",
    "limit",
    "frames"
  ]);
  const [{
    context: context7,
    instance
  }] = React78.useState(() => {
    const context8 = React78.createContext(null);
    return {
      context: context8,
      instance: React78.forwardRef((props2, ref2) => React78.createElement(Instance, _extends({
        context: context8
      }, props2, {
        ref: ref2
      })))
    };
  });
  const parentRef = React78.useRef(null);
  const [instances, setInstances] = React78.useState([]);
  const [[matrices, colors2]] = React78.useState(() => {
    const mArray = new Float32Array(limit * 16);
    for (i4 = 0; i4 < limit; i4++)
      tempMatrix2.identity().toArray(mArray, i4 * 16);
    return [mArray, new Float32Array([...new Array(limit * 3)].map(() => 1))];
  });
  React78.useEffect(() => {
    parentRef.current.instanceMatrix.needsUpdate = true;
  });
  let count = 0;
  let updateRange = 0;
  useFrame(() => {
    if (frames === Infinity || count < frames) {
      parentRef.current.updateMatrix();
      parentRef.current.updateMatrixWorld();
      parentMatrix2.copy(parentRef.current.matrixWorld).invert();
      updateRange = Math.min(limit, range !== void 0 ? range : limit, instances.length);
      parentRef.current.count = updateRange;
      parentRef.current.instanceMatrix.updateRange.count = updateRange * 16;
      parentRef.current.instanceColor.updateRange.count = updateRange * 3;
      for (i4 = 0; i4 < instances.length; i4++) {
        instanceRef = instances[i4].current;
        instanceRef.matrixWorld.decompose(translation, rotation, scale);
        instanceMatrix.compose(translation, rotation, scale).premultiply(parentMatrix2);
        instanceMatrix.toArray(matrices, i4 * 16);
        parentRef.current.instanceMatrix.needsUpdate = true;
        instanceRef.color.toArray(colors2, i4 * 3);
        parentRef.current.instanceColor.needsUpdate = true;
      }
      count++;
    }
  });
  const api = React78.useMemo(() => ({
    getParent: () => parentRef,
    subscribe: (ref2) => {
      setInstances((instances2) => [...instances2, ref2]);
      return () => setInstances((instances2) => instances2.filter((item) => item.current !== ref2.current));
    }
  }), []);
  return React78.createElement("instancedMesh", _extends({
    userData: {
      instances
    },
    matrixAutoUpdate: false,
    ref: react_merge_refs_esm_default([ref, parentRef]),
    args: [null, null, 0],
    raycast: () => null
  }, props), React78.createElement("instancedBufferAttribute", {
    attach: "instanceMatrix",
    count: matrices.length / 16,
    array: matrices,
    itemSize: 16,
    usage: DynamicDrawUsage
  }), React78.createElement("instancedBufferAttribute", {
    attach: "instanceColor",
    count: colors2.length / 3,
    array: colors2,
    itemSize: 3,
    usage: DynamicDrawUsage
  }), typeof children === "function" ? React78.createElement(context7.Provider, {
    value: api
  }, children(instance)) : React78.createElement(globalContext.Provider, {
    value: api
  }, children));
});
function Merged(_a) {
  var _b = _a, {
    meshes,
    children
  } = _b, props = __objRest(_b, [
    "meshes",
    "children"
  ]);
  const isArray = Array.isArray(meshes);
  if (!isArray) {
    for (const key of Object.keys(meshes))
      if (!meshes[key].isMesh)
        delete meshes[key];
  }
  return React78.createElement(Composer, {
    components: (isArray ? meshes : Object.values(meshes)).map(({
      geometry,
      material
    }) => React78.createElement(Instances, _extends({
      key: geometry.uuid,
      geometry,
      material
    }, props)))
  }, (args) => isArray ? children(...args) : children(Object.keys(meshes).filter((key) => meshes[key].isMesh).reduce((acc, key, i5) => __spreadProps(__spreadValues({}, acc), {
    [key]: args[i5]
  }), {})));
}

// node_modules/@react-three/drei/core/Segments.js
init_extends();
init_three_module();
var React79 = __toESM(require_react());
init_react_three_fiber_esm();
var context6 = React79.createContext(null);
var Segments = React79.forwardRef((props, forwardedRef) => {
  React79.useMemo(() => extend({
    SegmentObject
  }), []);
  const _a = props, {
    limit = 1e3,
    lineWidth = 1,
    children
  } = _a, rest = __objRest(_a, [
    "limit",
    "lineWidth",
    "children"
  ]);
  const [segments, setSegments] = React79.useState([]);
  const [line] = React79.useState(() => new Line2());
  const [material] = React79.useState(() => new LineMaterial());
  const [geometry] = React79.useState(() => new LineSegmentsGeometry());
  const [resolution] = React79.useState(() => new Vector2(512, 512));
  const [positions] = React79.useState(() => Array(limit * 6).fill(0));
  const [colors2] = React79.useState(() => Array(limit * 6).fill(0));
  const api = React79.useMemo(() => ({
    subscribe: (ref) => {
      setSegments((segments2) => [...segments2, ref]);
      return () => setSegments((segments2) => segments2.filter((item) => item.current !== ref.current));
    }
  }), []);
  useFrame(() => {
    for (let i5 = 0; i5 < limit; i5++) {
      var _segments$i;
      const segment = (_segments$i = segments[i5]) == null ? void 0 : _segments$i.current;
      if (segment) {
        positions[i5 * 6 + 0] = segment.start.x;
        positions[i5 * 6 + 1] = segment.start.y;
        positions[i5 * 6 + 2] = segment.start.z;
        positions[i5 * 6 + 3] = segment.end.x;
        positions[i5 * 6 + 4] = segment.end.y;
        positions[i5 * 6 + 5] = segment.end.z;
        colors2[i5 * 6 + 0] = segment.color.r;
        colors2[i5 * 6 + 1] = segment.color.g;
        colors2[i5 * 6 + 2] = segment.color.b;
        colors2[i5 * 6 + 3] = segment.color.r;
        colors2[i5 * 6 + 4] = segment.color.g;
        colors2[i5 * 6 + 5] = segment.color.b;
      }
    }
    geometry.setColors(colors2);
    geometry.setPositions(positions);
    line.computeLineDistances();
  });
  return React79.createElement("primitive", {
    object: line,
    ref: forwardedRef
  }, React79.createElement("primitive", {
    object: geometry,
    attach: "geometry"
  }), React79.createElement("primitive", _extends({
    object: material,
    attach: "material",
    vertexColors: true,
    resolution,
    linewidth: lineWidth
  }, rest)), React79.createElement(context6.Provider, {
    value: api
  }, children));
});
var SegmentObject = class {
  constructor() {
    this.color = new Color("white");
    this.start = new Vector3(0, 0, 0);
    this.end = new Vector3(0, 0, 0);
  }
};
var normPos = (pos) => pos instanceof Vector3 ? pos : new Vector3(...typeof pos === "number" ? [pos, pos, pos] : pos);
var Segment = React79.forwardRef(({
  color,
  start,
  end
}, forwardedRef) => {
  const api = React79.useContext(context6);
  if (!api)
    throw "Segment must used inside Segments component.";
  const ref = React79.useRef(null);
  React79.useLayoutEffect(() => api.subscribe(ref), []);
  return React79.createElement("segmentObject", {
    ref: react_merge_refs_esm_default([ref, forwardedRef]),
    color,
    start: normPos(start),
    end: normPos(end)
  });
});

// node_modules/@react-three/drei/core/Detailed.js
init_extends();
var React80 = __toESM(require_react());
init_react_three_fiber_esm();
var Detailed = React80.forwardRef((_a, ref) => {
  var _b = _a, {
    children,
    distances
  } = _b, props = __objRest(_b, [
    "children",
    "distances"
  ]);
  const lodRef = React80.useRef(null);
  React80.useLayoutEffect(() => {
    const {
      current: lod
    } = lodRef;
    lod.levels.length = 0;
    lod.children.forEach((object, index) => lod.levels.push({
      object,
      distance: distances[index]
    }));
  });
  useFrame((state) => {
    var _lodRef$current;
    return (_lodRef$current = lodRef.current) == null ? void 0 : _lodRef$current.update(state.camera);
  });
  return React80.createElement("lOD", _extends({
    ref: react_merge_refs_esm_default([lodRef, ref])
  }, props), children);
});

// node_modules/@react-three/drei/core/Preload.js
init_three_module();
var React81 = __toESM(require_react());
init_react_three_fiber_esm();
function Preload({
  all,
  scene,
  camera
}) {
  const gl = useThree(({
    gl: gl2
  }) => gl2);
  const dCamera = useThree(({
    camera: camera2
  }) => camera2);
  const dScene = useThree(({
    scene: scene2
  }) => scene2);
  React81.useLayoutEffect(() => {
    const invisible = [];
    if (all) {
      (scene || dScene).traverse((object) => {
        if (object.visible === false) {
          invisible.push(object);
          object.visible = true;
        }
      });
    }
    gl.compile(scene || dScene, camera || dCamera);
    const cubeRenderTarget = new WebGLCubeRenderTarget(128);
    const cubeCamera = new CubeCamera(0.01, 1e5, cubeRenderTarget);
    cubeCamera.update(gl, scene || dScene);
    cubeRenderTarget.dispose();
    invisible.forEach((object) => object.visible = false);
  }, []);
  return null;
}

// node_modules/@react-three/drei/core/BakeShadows.js
var import_react8 = __toESM(require_react());
init_react_three_fiber_esm();
function BakeShadows() {
  const gl = useThree((state) => state.gl);
  (0, import_react8.useEffect)(() => {
    gl.shadowMap.autoUpdate = false;
    gl.shadowMap.needsUpdate = true;
    return () => {
      gl.shadowMap.autoUpdate = gl.shadowMap.needsUpdate = true;
    };
  }, [gl.shadowMap]);
  return null;
}

// node_modules/@react-three/drei/core/meshBounds.js
init_three_module();
var _inverseMatrix = new Matrix4();
var _ray = new Ray();
var _sphere = new Sphere();
var _vA = new Vector3();
function meshBounds(raycaster, intersects) {
  const geometry = this.geometry;
  const material = this.material;
  const matrixWorld = this.matrixWorld;
  if (material === void 0)
    return;
  if (geometry.boundingSphere === null)
    geometry.computeBoundingSphere();
  _sphere.copy(geometry.boundingSphere);
  _sphere.applyMatrix4(matrixWorld);
  if (raycaster.ray.intersectsSphere(_sphere) === false)
    return;
  _inverseMatrix.copy(matrixWorld).invert();
  _ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);
  if (geometry.boundingBox !== null && _ray.intersectBox(geometry.boundingBox, _vA) === null)
    return;
  intersects.push({
    distance: _vA.distanceTo(raycaster.ray.origin),
    point: _vA.clone(),
    object: this
  });
}

// node_modules/@react-three/drei/core/AdaptiveDpr.js
var React82 = __toESM(require_react());
init_react_three_fiber_esm();
function AdaptiveDpr({
  pixelated
}) {
  const gl = useThree((state) => state.gl);
  const active = useThree((state) => state.internal.active);
  const current = useThree((state) => state.performance.current);
  const initialDpr = useThree((state) => state.viewport.initialDpr);
  const setDpr = useThree((state) => state.setDpr);
  React82.useEffect(() => {
    const domElement = gl.domElement;
    return () => {
      if (active)
        setDpr(initialDpr);
      if (pixelated && domElement)
        domElement.style.imageRendering = "auto";
    };
  }, []);
  React82.useEffect(() => {
    setDpr(current * initialDpr);
    if (pixelated && gl.domElement)
      gl.domElement.style.imageRendering = current === 1 ? "auto" : "pixelated";
  }, [current]);
  return null;
}

// node_modules/@react-three/drei/core/AdaptiveEvents.js
var React83 = __toESM(require_react());
init_react_three_fiber_esm();
function AdaptiveEvents() {
  const get = useThree((state) => state.get);
  const setEvents = useThree((state) => state.setEvents);
  const current = useThree((state) => state.performance.current);
  React83.useEffect(() => {
    const enabled = get().events.enabled;
    return () => setEvents({
      enabled
    });
  }, []);
  React83.useEffect(() => setEvents({
    enabled: current === 1
  }), [current]);
  return null;
}

// node_modules/@react-three/drei/core/RenderTexture.js
init_extends();
init_three_module();
var React84 = __toESM(require_react());
init_react_three_fiber_esm();
var RenderTexture = React84.forwardRef((_a, forwardRef49) => {
  var _b = _a, {
    children,
    width,
    height,
    renderPriority = 0,
    eventPriority = 0,
    frames = Infinity
  } = _b, props = __objRest(_b, [
    "children",
    "width",
    "height",
    "renderPriority",
    "eventPriority",
    "frames"
  ]);
  const {
    size,
    viewport
  } = useThree();
  const fbo = useFBO((width || size.width) * viewport.dpr, (height || size.height) * viewport.dpr, {
    samples: 8
  });
  const [vScene] = React84.useState(() => new Scene());
  const compute = React84.useCallback((event, state, previous) => {
    var _fbo$texture, _previous$previousRoo;
    let parent = (_fbo$texture = fbo.texture) == null ? void 0 : _fbo$texture.__r3f.parent;
    while (parent && !(parent instanceof Object3D)) {
      parent = parent.__r3f.parent;
    }
    if (!parent)
      return false;
    if (!previous.raycaster.camera)
      previous.events.compute(event, previous, (_previous$previousRoo = previous.previousRoot) == null ? void 0 : _previous$previousRoo.getState());
    const [intersection] = previous.raycaster.intersectObject(parent);
    if (!intersection)
      return false;
    const uv = intersection.uv;
    state.raycaster.setFromCamera(state.pointer.set(uv.x * 2 - 1, uv.y * 2 - 1), state.camera);
  }, []);
  React84.useImperativeHandle(forwardRef49, () => fbo.texture, [fbo]);
  return React84.createElement(React84.Fragment, null, createPortal(React84.createElement(Container, {
    renderPriority,
    frames,
    fbo
  }, children), vScene, {
    events: {
      compute,
      priority: eventPriority
    }
  }), React84.createElement("primitive", _extends({
    object: fbo.texture
  }, props)));
});
function Container({
  frames,
  renderPriority,
  children,
  fbo
}) {
  let count = 0;
  useFrame((state) => {
    if (frames === Infinity || count < frames) {
      state.gl.setRenderTarget(fbo);
      state.gl.render(state.scene, state.camera);
      state.gl.setRenderTarget(null);
      count++;
    }
  }, renderPriority);
  return React84.createElement(React84.Fragment, null, children);
}

// node_modules/@react-three/drei/core/Mask.js
init_extends();
init_three_module();
var React85 = __toESM(require_react());
function Mask(_a) {
  var _b = _a, {
    id = 1,
    children,
    colorWrite = false,
    depthWrite = false
  } = _b, props = __objRest(_b, [
    "id",
    "children",
    "colorWrite",
    "depthWrite"
  ]);
  const spread = React85.useMemo(() => ({
    colorWrite,
    depthWrite,
    stencilWrite: true,
    stencilRef: id,
    stencilFunc: AlwaysStencilFunc,
    stencilFail: ReplaceStencilOp,
    stencilZFail: ReplaceStencilOp,
    stencilZPass: ReplaceStencilOp
  }), [id, colorWrite, depthWrite]);
  return React85.createElement("mesh", _extends({
    renderOrder: -id
  }, props), React85.createElement("meshBasicMaterial", spread), typeof children === "function" ? children(spread) : children);
}
function useMask(id, inverse = false) {
  return {
    stencilWrite: true,
    stencilRef: id,
    stencilFunc: inverse ? NotEqualStencilFunc : EqualStencilFunc,
    stencilFail: KeepStencilOp,
    stencilZFail: KeepStencilOp,
    stencilZPass: KeepStencilOp
  };
}

// node_modules/@react-three/drei/web/View.js
var React86 = __toESM(require_react());
init_three_module();
init_react_three_fiber_esm();
var isOrthographicCamera = (def) => def && def.isOrthographicCamera;
var col = new Color();
function Container2({
  canvasSize,
  scene,
  index,
  children,
  frames,
  rect,
  track
}) {
  const get = useThree((state) => state.get);
  const camera = useThree((state) => state.camera);
  const virtualScene = useThree((state) => state.scene);
  const setEvents = useThree((state) => state.setEvents);
  let frameCount = 0;
  useFrame((state) => {
    if (frames === Infinity || frameCount <= frames) {
      var _track$current;
      rect.current = (_track$current = track.current) == null ? void 0 : _track$current.getBoundingClientRect();
      frameCount++;
    }
    if (rect.current) {
      const {
        left,
        right,
        top,
        bottom,
        width,
        height
      } = rect.current;
      const isOffscreen = bottom < 0 || top > canvasSize.height || right < 0 || left > canvasSize.width;
      const positiveYUpBottom = canvasSize.height - bottom;
      const aspect = width / height;
      if (isOrthographicCamera(camera)) {
        if (camera.left !== width / -2 || camera.right !== width / 2 || camera.top !== height / 2 || camera.bottom !== height / -2) {
          Object.assign(camera, {
            left: width / -2,
            right: width / 2,
            top: height / 2,
            bottom: height / -2
          });
          camera.updateProjectionMatrix();
        }
      } else if (camera.aspect !== aspect) {
        camera.aspect = aspect;
        camera.updateProjectionMatrix();
      }
      state.gl.setViewport(left, positiveYUpBottom, width, height);
      state.gl.setScissor(left, positiveYUpBottom, width, height);
      state.gl.setScissorTest(true);
      if (isOffscreen) {
        state.gl.getClearColor(col);
        state.gl.setClearColor(col, state.gl.getClearAlpha());
        state.gl.clear(true, true);
        return;
      }
      state.gl.render(children ? virtualScene : scene, camera);
    }
  }, index);
  React86.useEffect(() => {
    const old = get().events.connected;
    setEvents({
      connected: track.current
    });
    return () => setEvents({
      connected: old
    });
  }, []);
  return React86.createElement(React86.Fragment, null, children);
}
var View = ({
  track,
  index = 1,
  frames = Infinity,
  children
}) => {
  const rect = React86.useRef(null);
  const {
    size,
    scene
  } = useThree();
  const [virtualScene] = React86.useState(() => new Scene());
  const compute = React86.useCallback((event, state) => {
    if (track.current && event.target === track.current) {
      const {
        width,
        height,
        left,
        top
      } = rect.current;
      const x = event.clientX - left;
      const y = event.clientY - top;
      state.pointer.set(x / width * 2 - 1, -(y / height) * 2 + 1);
      state.raycaster.setFromCamera(state.pointer, state.camera);
    }
  }, [rect]);
  const [ready, toggle] = React86.useReducer(() => true, false);
  React86.useEffect(() => {
    var _track$current2;
    rect.current = (_track$current2 = track.current) == null ? void 0 : _track$current2.getBoundingClientRect();
    toggle();
  }, []);
  return ready && createPortal(React86.createElement(Container2, {
    canvasSize: size,
    frames,
    scene,
    track,
    rect,
    index
  }, children), virtualScene, {
    events: {
      compute,
      priority: index
    },
    size: {
      width: rect.current.width,
      height: rect.current.height
    }
  });
};
export {
  AdaptiveDpr,
  AdaptiveEvents,
  ArcballControls2 as ArcballControls,
  BBAnchor,
  Backdrop,
  BakeShadows,
  Billboard,
  Bounds,
  Box,
  CameraShake,
  Capsule,
  Center,
  Circle,
  Clone,
  Cloud,
  ComputedAttribute,
  Cone,
  ContactShadows,
  CubeCamera2 as CubeCamera,
  CubicBezierLine,
  CurveModifier,
  CycleRaycast,
  Cylinder,
  Detailed,
  DeviceOrientationControls2 as DeviceOrientationControls,
  Dodecahedron,
  Edges,
  Effects,
  Environment,
  EnvironmentCube,
  EnvironmentMap,
  EnvironmentPortal,
  Extrude,
  FirstPersonControls2 as FirstPersonControls,
  Float,
  FlyControls2 as FlyControls,
  GizmoHelper,
  GizmoViewcube,
  GizmoViewport,
  GradientTexture,
  Html,
  Icosahedron,
  Image,
  Instance,
  Instances,
  IsObject,
  Lathe,
  Lightformer,
  Line,
  Loader,
  MapControls2 as MapControls,
  Mask,
  Merged,
  MeshDistortMaterial,
  MeshReflectorMaterial2 as MeshReflectorMaterial,
  MeshWobbleMaterial,
  Octahedron,
  OrbitControls2 as OrbitControls,
  OrthographicCamera2 as OrthographicCamera,
  PerspectiveCamera2 as PerspectiveCamera,
  Plane2 as Plane,
  Point,
  PointMaterial,
  PointMaterialImpl,
  PointerLockControls2 as PointerLockControls,
  Points,
  PointsBuffer,
  Polyhedron,
  PositionalAudio,
  Preload,
  PresentationControls,
  QuadraticBezierLine,
  Reflector,
  RenderTexture,
  Ring,
  RoundedBox,
  Sampler,
  ScreenQuad,
  Scroll,
  ScrollControls,
  Segment,
  SegmentObject,
  Segments,
  Select,
  Shadow,
  Sky2 as Sky,
  Sparkles,
  Sphere2 as Sphere,
  SpotLight,
  Stage,
  Stars,
  Stats,
  Tetrahedron,
  Text2 as Text,
  Text3D,
  Torus,
  TorusKnot,
  TrackballControls2 as TrackballControls,
  Trail,
  TransformControls2 as TransformControls,
  Tube,
  View,
  calcPosFromAngles,
  isWebGL2Available,
  meshBounds,
  shaderMaterial,
  softShadows,
  useAnimations,
  useAspect,
  useBVH,
  useBounds,
  useBoxProjectedEnv,
  useCamera,
  useContextBridge,
  useCubeTexture,
  useCursor,
  useDepthBuffer,
  useDetectGPU,
  useEnvironment,
  useFBO,
  useFBX,
  useGLTF,
  useGizmoContext,
  useHelper,
  useIntersect,
  useKTX2,
  useMask,
  useMatcapTexture,
  useNormalTexture,
  useProgress,
  useScroll,
  useSelect,
  useTexture,
  useTrail
};
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*!
Custom build of Typr.ts (https://github.com/fredli74/Typr.ts) for use in Troika text rendering.
Original MIT license applies: https://github.com/fredli74/Typr.ts/blob/master/LICENSE
*/
/*!
Custom bundle of woff2otf (https://github.com/arty-name/woff2otf) with fflate
(https://github.com/101arrowz/fflate) for use in Troika text rendering. 
Original licenses apply: 
- fflate: https://github.com/101arrowz/fflate/blob/master/LICENSE (MIT)
- woff2otf.js: https://github.com/arty-name/woff2otf/blob/master/woff2otf.js (Apache2)
*/
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=@react-three_drei.js.map
